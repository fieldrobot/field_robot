ARM GAS  /tmp/ccWCiiyE.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32f1xx_it.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.NMI_Handler,"ax",%progbits
  16              		.align	1
  17              		.global	NMI_Handler
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	NMI_Handler:
  24              	.LFB64:
  25              		.file 1 "Src/stm32f1xx_it.c"
   1:Src/stm32f1xx_it.c **** /**
   2:Src/stm32f1xx_it.c ****   ******************************************************************************
   3:Src/stm32f1xx_it.c ****   * @file    stm32f1xx_it.c
   4:Src/stm32f1xx_it.c ****   * @brief   Interrupt Service Routines.
   5:Src/stm32f1xx_it.c ****   ******************************************************************************
   6:Src/stm32f1xx_it.c ****   *
   7:Src/stm32f1xx_it.c ****   * COPYRIGHT(c) 2017 STMicroelectronics
   8:Src/stm32f1xx_it.c ****   *
   9:Src/stm32f1xx_it.c ****   * Redistribution and use in source and binary forms, with or without modification,
  10:Src/stm32f1xx_it.c ****   * are permitted provided that the following conditions are met:
  11:Src/stm32f1xx_it.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  12:Src/stm32f1xx_it.c ****   *      this list of conditions and the following disclaimer.
  13:Src/stm32f1xx_it.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  14:Src/stm32f1xx_it.c ****   *      this list of conditions and the following disclaimer in the documentation
  15:Src/stm32f1xx_it.c ****   *      and/or other materials provided with the distribution.
  16:Src/stm32f1xx_it.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  17:Src/stm32f1xx_it.c ****   *      may be used to endorse or promote products derived from this software
  18:Src/stm32f1xx_it.c ****   *      without specific prior written permission.
  19:Src/stm32f1xx_it.c ****   *
  20:Src/stm32f1xx_it.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:Src/stm32f1xx_it.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:Src/stm32f1xx_it.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  23:Src/stm32f1xx_it.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  24:Src/stm32f1xx_it.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  25:Src/stm32f1xx_it.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  26:Src/stm32f1xx_it.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  27:Src/stm32f1xx_it.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  28:Src/stm32f1xx_it.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  29:Src/stm32f1xx_it.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  30:Src/stm32f1xx_it.c ****   *
  31:Src/stm32f1xx_it.c ****   ******************************************************************************
  32:Src/stm32f1xx_it.c ****   */
  33:Src/stm32f1xx_it.c **** /* Includes ------------------------------------------------------------------*/
ARM GAS  /tmp/ccWCiiyE.s 			page 2


  34:Src/stm32f1xx_it.c **** #include "stm32f1xx_hal.h"
  35:Src/stm32f1xx_it.c **** #include "stm32f1xx.h"
  36:Src/stm32f1xx_it.c **** #include "stm32f1xx_it.h"
  37:Src/stm32f1xx_it.c **** #include "defines.h"
  38:Src/stm32f1xx_it.c **** #include "config.h"
  39:Src/stm32f1xx_it.c **** #include "util.h"
  40:Src/stm32f1xx_it.c **** 
  41:Src/stm32f1xx_it.c **** extern DMA_HandleTypeDef hdma_i2c2_rx;
  42:Src/stm32f1xx_it.c **** extern DMA_HandleTypeDef hdma_i2c2_tx;
  43:Src/stm32f1xx_it.c **** extern I2C_HandleTypeDef hi2c2;
  44:Src/stm32f1xx_it.c **** 
  45:Src/stm32f1xx_it.c **** extern DMA_HandleTypeDef hdma_usart2_rx;
  46:Src/stm32f1xx_it.c **** extern DMA_HandleTypeDef hdma_usart2_tx;
  47:Src/stm32f1xx_it.c **** extern DMA_HandleTypeDef hdma_usart3_rx;
  48:Src/stm32f1xx_it.c **** extern DMA_HandleTypeDef hdma_usart3_tx;
  49:Src/stm32f1xx_it.c **** 
  50:Src/stm32f1xx_it.c **** /* USER CODE BEGIN 0 */
  51:Src/stm32f1xx_it.c **** extern UART_HandleTypeDef huart2;
  52:Src/stm32f1xx_it.c **** extern UART_HandleTypeDef huart3;
  53:Src/stm32f1xx_it.c **** /* USER CODE END 0 */
  54:Src/stm32f1xx_it.c **** 
  55:Src/stm32f1xx_it.c **** /* External variables --------------------------------------------------------*/
  56:Src/stm32f1xx_it.c **** 
  57:Src/stm32f1xx_it.c **** 
  58:Src/stm32f1xx_it.c **** /******************************************************************************/
  59:Src/stm32f1xx_it.c **** /*            Cortex-M3 Processor Interruption and Exception Handlers         */
  60:Src/stm32f1xx_it.c **** /******************************************************************************/
  61:Src/stm32f1xx_it.c **** 
  62:Src/stm32f1xx_it.c **** /**
  63:Src/stm32f1xx_it.c **** * @brief This function handles Non maskable interrupt.
  64:Src/stm32f1xx_it.c **** */
  65:Src/stm32f1xx_it.c **** void NMI_Handler(void) {
  26              		.loc 1 65 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31 0000 7047     		bx	lr
  32              		.cfi_endproc
  33              	.LFE64:
  35              		.section	.text.HardFault_Handler,"ax",%progbits
  36              		.align	1
  37              		.global	HardFault_Handler
  38              		.syntax unified
  39              		.thumb
  40              		.thumb_func
  41              		.fpu softvfp
  43              	HardFault_Handler:
  44              	.LFB65:
  66:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  67:Src/stm32f1xx_it.c **** 
  68:Src/stm32f1xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 0 */
  69:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  70:Src/stm32f1xx_it.c **** 
  71:Src/stm32f1xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 1 */
  72:Src/stm32f1xx_it.c **** }
  73:Src/stm32f1xx_it.c **** 
ARM GAS  /tmp/ccWCiiyE.s 			page 3


  74:Src/stm32f1xx_it.c **** /**
  75:Src/stm32f1xx_it.c **** * @brief This function handles Hard fault interrupt.
  76:Src/stm32f1xx_it.c **** */
  77:Src/stm32f1xx_it.c **** void HardFault_Handler(void) {
  45              		.loc 1 77 0
  46              		.cfi_startproc
  47              		@ Volatile: function does not return.
  48              		@ args = 0, pretend = 0, frame = 0
  49              		@ frame_needed = 0, uses_anonymous_args = 0
  50              		@ link register save eliminated.
  51              	.L3:
  52 0000 FEE7     		b	.L3
  53              		.cfi_endproc
  54              	.LFE65:
  56              		.section	.text.MemManage_Handler,"ax",%progbits
  57              		.align	1
  58              		.global	MemManage_Handler
  59              		.syntax unified
  60              		.thumb
  61              		.thumb_func
  62              		.fpu softvfp
  64              	MemManage_Handler:
  65              	.LFB66:
  78:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN HardFault_IRQn 0 */
  79:Src/stm32f1xx_it.c **** 
  80:Src/stm32f1xx_it.c ****   /* USER CODE END HardFault_IRQn 0 */
  81:Src/stm32f1xx_it.c ****   while(1) {
  82:Src/stm32f1xx_it.c ****   }
  83:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN HardFault_IRQn 1 */
  84:Src/stm32f1xx_it.c **** 
  85:Src/stm32f1xx_it.c ****   /* USER CODE END HardFault_IRQn 1 */
  86:Src/stm32f1xx_it.c **** }
  87:Src/stm32f1xx_it.c **** 
  88:Src/stm32f1xx_it.c **** /**
  89:Src/stm32f1xx_it.c **** * @brief This function handles Memory management fault.
  90:Src/stm32f1xx_it.c **** */
  91:Src/stm32f1xx_it.c **** void MemManage_Handler(void) {
  66              		.loc 1 91 0
  67              		.cfi_startproc
  68              		@ Volatile: function does not return.
  69              		@ args = 0, pretend = 0, frame = 0
  70              		@ frame_needed = 0, uses_anonymous_args = 0
  71              		@ link register save eliminated.
  72              	.L5:
  73 0000 FEE7     		b	.L5
  74              		.cfi_endproc
  75              	.LFE66:
  77              		.section	.text.BusFault_Handler,"ax",%progbits
  78              		.align	1
  79              		.global	BusFault_Handler
  80              		.syntax unified
  81              		.thumb
  82              		.thumb_func
  83              		.fpu softvfp
  85              	BusFault_Handler:
  86              	.LFB67:
  92:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN MemoryManagement_IRQn 0 */
ARM GAS  /tmp/ccWCiiyE.s 			page 4


  93:Src/stm32f1xx_it.c **** 
  94:Src/stm32f1xx_it.c ****   /* USER CODE END MemoryManagement_IRQn 0 */
  95:Src/stm32f1xx_it.c ****   while(1) {
  96:Src/stm32f1xx_it.c ****   }
  97:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN MemoryManagement_IRQn 1 */
  98:Src/stm32f1xx_it.c **** 
  99:Src/stm32f1xx_it.c ****   /* USER CODE END MemoryManagement_IRQn 1 */
 100:Src/stm32f1xx_it.c **** }
 101:Src/stm32f1xx_it.c **** 
 102:Src/stm32f1xx_it.c **** /**
 103:Src/stm32f1xx_it.c **** * @brief This function handles Prefetch fault, memory access fault.
 104:Src/stm32f1xx_it.c **** */
 105:Src/stm32f1xx_it.c **** void BusFault_Handler(void) {
  87              		.loc 1 105 0
  88              		.cfi_startproc
  89              		@ Volatile: function does not return.
  90              		@ args = 0, pretend = 0, frame = 0
  91              		@ frame_needed = 0, uses_anonymous_args = 0
  92              		@ link register save eliminated.
  93              	.L7:
  94 0000 FEE7     		b	.L7
  95              		.cfi_endproc
  96              	.LFE67:
  98              		.section	.text.UsageFault_Handler,"ax",%progbits
  99              		.align	1
 100              		.global	UsageFault_Handler
 101              		.syntax unified
 102              		.thumb
 103              		.thumb_func
 104              		.fpu softvfp
 106              	UsageFault_Handler:
 107              	.LFB68:
 106:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN BusFault_IRQn 0 */
 107:Src/stm32f1xx_it.c **** 
 108:Src/stm32f1xx_it.c ****   /* USER CODE END BusFault_IRQn 0 */
 109:Src/stm32f1xx_it.c ****   while(1) {
 110:Src/stm32f1xx_it.c ****   }
 111:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN BusFault_IRQn 1 */
 112:Src/stm32f1xx_it.c **** 
 113:Src/stm32f1xx_it.c ****   /* USER CODE END BusFault_IRQn 1 */
 114:Src/stm32f1xx_it.c **** }
 115:Src/stm32f1xx_it.c **** 
 116:Src/stm32f1xx_it.c **** /**
 117:Src/stm32f1xx_it.c **** * @brief This function handles Undefined instruction or illegal state.
 118:Src/stm32f1xx_it.c **** */
 119:Src/stm32f1xx_it.c **** void UsageFault_Handler(void) {
 108              		.loc 1 119 0
 109              		.cfi_startproc
 110              		@ Volatile: function does not return.
 111              		@ args = 0, pretend = 0, frame = 0
 112              		@ frame_needed = 0, uses_anonymous_args = 0
 113              		@ link register save eliminated.
 114              	.L9:
 115 0000 FEE7     		b	.L9
 116              		.cfi_endproc
 117              	.LFE68:
 119              		.section	.text.SVC_Handler,"ax",%progbits
ARM GAS  /tmp/ccWCiiyE.s 			page 5


 120              		.align	1
 121              		.global	SVC_Handler
 122              		.syntax unified
 123              		.thumb
 124              		.thumb_func
 125              		.fpu softvfp
 127              	SVC_Handler:
 128              	.LFB69:
 120:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN UsageFault_IRQn 0 */
 121:Src/stm32f1xx_it.c **** 
 122:Src/stm32f1xx_it.c ****   /* USER CODE END UsageFault_IRQn 0 */
 123:Src/stm32f1xx_it.c ****   while(1) {
 124:Src/stm32f1xx_it.c ****   }
 125:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN UsageFault_IRQn 1 */
 126:Src/stm32f1xx_it.c **** 
 127:Src/stm32f1xx_it.c ****   /* USER CODE END UsageFault_IRQn 1 */
 128:Src/stm32f1xx_it.c **** }
 129:Src/stm32f1xx_it.c **** 
 130:Src/stm32f1xx_it.c **** /**
 131:Src/stm32f1xx_it.c **** * @brief This function handles System service call via SWI instruction.
 132:Src/stm32f1xx_it.c **** */
 133:Src/stm32f1xx_it.c **** void SVC_Handler(void) {
 129              		.loc 1 133 0
 130              		.cfi_startproc
 131              		@ args = 0, pretend = 0, frame = 0
 132              		@ frame_needed = 0, uses_anonymous_args = 0
 133              		@ link register save eliminated.
 134 0000 7047     		bx	lr
 135              		.cfi_endproc
 136              	.LFE69:
 138              		.section	.text.DebugMon_Handler,"ax",%progbits
 139              		.align	1
 140              		.global	DebugMon_Handler
 141              		.syntax unified
 142              		.thumb
 143              		.thumb_func
 144              		.fpu softvfp
 146              	DebugMon_Handler:
 147              	.LFB70:
 134:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SVCall_IRQn 0 */
 135:Src/stm32f1xx_it.c **** 
 136:Src/stm32f1xx_it.c ****   /* USER CODE END SVCall_IRQn 0 */
 137:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SVCall_IRQn 1 */
 138:Src/stm32f1xx_it.c **** 
 139:Src/stm32f1xx_it.c ****   /* USER CODE END SVCall_IRQn 1 */
 140:Src/stm32f1xx_it.c **** }
 141:Src/stm32f1xx_it.c **** 
 142:Src/stm32f1xx_it.c **** /**
 143:Src/stm32f1xx_it.c **** * @brief This function handles Debug monitor.
 144:Src/stm32f1xx_it.c **** */
 145:Src/stm32f1xx_it.c **** void DebugMon_Handler(void) {
 148              		.loc 1 145 0
 149              		.cfi_startproc
 150              		@ args = 0, pretend = 0, frame = 0
 151              		@ frame_needed = 0, uses_anonymous_args = 0
 152              		@ link register save eliminated.
 153 0000 7047     		bx	lr
ARM GAS  /tmp/ccWCiiyE.s 			page 6


 154              		.cfi_endproc
 155              	.LFE70:
 157              		.section	.text.PendSV_Handler,"ax",%progbits
 158              		.align	1
 159              		.global	PendSV_Handler
 160              		.syntax unified
 161              		.thumb
 162              		.thumb_func
 163              		.fpu softvfp
 165              	PendSV_Handler:
 166              	.LFB71:
 146:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 0 */
 147:Src/stm32f1xx_it.c **** 
 148:Src/stm32f1xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 0 */
 149:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 1 */
 150:Src/stm32f1xx_it.c **** 
 151:Src/stm32f1xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 1 */
 152:Src/stm32f1xx_it.c **** }
 153:Src/stm32f1xx_it.c **** 
 154:Src/stm32f1xx_it.c **** /**
 155:Src/stm32f1xx_it.c **** * @brief This function handles Pendable request for system service.
 156:Src/stm32f1xx_it.c **** */
 157:Src/stm32f1xx_it.c **** void PendSV_Handler(void) {
 167              		.loc 1 157 0
 168              		.cfi_startproc
 169              		@ args = 0, pretend = 0, frame = 0
 170              		@ frame_needed = 0, uses_anonymous_args = 0
 171              		@ link register save eliminated.
 172 0000 7047     		bx	lr
 173              		.cfi_endproc
 174              	.LFE71:
 176              		.section	.text.SysTick_Handler,"ax",%progbits
 177              		.align	1
 178              		.global	SysTick_Handler
 179              		.syntax unified
 180              		.thumb
 181              		.thumb_func
 182              		.fpu softvfp
 184              	SysTick_Handler:
 185              	.LFB72:
 158:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 0 */
 159:Src/stm32f1xx_it.c **** 
 160:Src/stm32f1xx_it.c ****   /* USER CODE END PendSV_IRQn 0 */
 161:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 1 */
 162:Src/stm32f1xx_it.c **** 
 163:Src/stm32f1xx_it.c ****   /* USER CODE END PendSV_IRQn 1 */
 164:Src/stm32f1xx_it.c **** }
 165:Src/stm32f1xx_it.c **** 
 166:Src/stm32f1xx_it.c **** /**
 167:Src/stm32f1xx_it.c **** * @brief This function handles System tick timer.
 168:Src/stm32f1xx_it.c **** */
 169:Src/stm32f1xx_it.c **** #if defined(CONTROL_PPM_LEFT) || defined(CONTROL_PPM_RIGHT)
 170:Src/stm32f1xx_it.c **** void PPM_SysTick_Callback(void);
 171:Src/stm32f1xx_it.c **** #endif
 172:Src/stm32f1xx_it.c **** 
 173:Src/stm32f1xx_it.c **** #if defined(CONTROL_PWM_LEFT) || defined(CONTROL_PWM_RIGHT)
 174:Src/stm32f1xx_it.c **** void PWM_SysTick_Callback(void);
ARM GAS  /tmp/ccWCiiyE.s 			page 7


 175:Src/stm32f1xx_it.c **** #endif
 176:Src/stm32f1xx_it.c **** 
 177:Src/stm32f1xx_it.c **** void SysTick_Handler(void) {
 186              		.loc 1 177 0
 187              		.cfi_startproc
 188              		@ args = 0, pretend = 0, frame = 0
 189              		@ frame_needed = 0, uses_anonymous_args = 0
 190              		.loc 1 177 0
 191 0000 08B5     		push	{r3, lr}
 192              	.LCFI0:
 193              		.cfi_def_cfa_offset 8
 194              		.cfi_offset 3, -8
 195              		.cfi_offset 14, -4
 178:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 0 */
 179:Src/stm32f1xx_it.c **** 
 180:Src/stm32f1xx_it.c ****   /* USER CODE END SysTick_IRQn 0 */
 181:Src/stm32f1xx_it.c ****   HAL_IncTick();
 196              		.loc 1 181 0
 197 0002 FFF7FEFF 		bl	HAL_IncTick
 198              	.LVL0:
 182:Src/stm32f1xx_it.c ****   HAL_SYSTICK_IRQHandler();
 199              		.loc 1 182 0
 200 0006 FFF7FEFF 		bl	HAL_SYSTICK_IRQHandler
 201              	.LVL1:
 202 000a 08BD     		pop	{r3, pc}
 203              		.cfi_endproc
 204              	.LFE72:
 206              		.section	.text.DMA1_Channel2_IRQHandler,"ax",%progbits
 207              		.align	1
 208              		.global	DMA1_Channel2_IRQHandler
 209              		.syntax unified
 210              		.thumb
 211              		.thumb_func
 212              		.fpu softvfp
 214              	DMA1_Channel2_IRQHandler:
 215              	.LFB73:
 183:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 1 */
 184:Src/stm32f1xx_it.c **** #if defined(CONTROL_PPM_LEFT) || defined(CONTROL_PPM_RIGHT)
 185:Src/stm32f1xx_it.c ****   PPM_SysTick_Callback();
 186:Src/stm32f1xx_it.c **** #endif
 187:Src/stm32f1xx_it.c **** 
 188:Src/stm32f1xx_it.c **** #if defined(CONTROL_PWM_LEFT) || defined(CONTROL_PWM_RIGHT)
 189:Src/stm32f1xx_it.c ****   PWM_SysTick_Callback();
 190:Src/stm32f1xx_it.c **** #endif
 191:Src/stm32f1xx_it.c ****   /* USER CODE END SysTick_IRQn 1 */
 192:Src/stm32f1xx_it.c **** }
 193:Src/stm32f1xx_it.c **** 
 194:Src/stm32f1xx_it.c **** #ifdef CONTROL_NUNCHUK
 195:Src/stm32f1xx_it.c **** extern I2C_HandleTypeDef hi2c2;
 196:Src/stm32f1xx_it.c **** void I2C1_EV_IRQHandler(void)
 197:Src/stm32f1xx_it.c **** {
 198:Src/stm32f1xx_it.c ****   HAL_I2C_EV_IRQHandler(&hi2c2);
 199:Src/stm32f1xx_it.c **** }
 200:Src/stm32f1xx_it.c **** 
 201:Src/stm32f1xx_it.c **** void I2C1_ER_IRQHandler(void)
 202:Src/stm32f1xx_it.c **** {
 203:Src/stm32f1xx_it.c ****   HAL_I2C_ER_IRQHandler(&hi2c2);
ARM GAS  /tmp/ccWCiiyE.s 			page 8


 204:Src/stm32f1xx_it.c **** }
 205:Src/stm32f1xx_it.c **** 
 206:Src/stm32f1xx_it.c **** /**
 207:Src/stm32f1xx_it.c **** * @brief This function handles DMA1 channel4 global interrupt.
 208:Src/stm32f1xx_it.c **** */
 209:Src/stm32f1xx_it.c **** void DMA1_Channel4_IRQHandler(void)
 210:Src/stm32f1xx_it.c **** {
 211:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */
 212:Src/stm32f1xx_it.c **** 
 213:Src/stm32f1xx_it.c ****   /* USER CODE END DMA1_Channel4_IRQn 0 */
 214:Src/stm32f1xx_it.c ****   HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 215:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */
 216:Src/stm32f1xx_it.c **** 
 217:Src/stm32f1xx_it.c ****   /* USER CODE END DMA1_Channel4_IRQn 1 */
 218:Src/stm32f1xx_it.c **** }
 219:Src/stm32f1xx_it.c **** 
 220:Src/stm32f1xx_it.c **** /**
 221:Src/stm32f1xx_it.c **** * @brief This function handles DMA1 channel5 global interrupt.
 222:Src/stm32f1xx_it.c **** */
 223:Src/stm32f1xx_it.c **** void DMA1_Channel5_IRQHandler(void)
 224:Src/stm32f1xx_it.c **** {
 225:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */
 226:Src/stm32f1xx_it.c **** 
 227:Src/stm32f1xx_it.c ****   /* USER CODE END DMA1_Channel5_IRQn 0 */
 228:Src/stm32f1xx_it.c ****   HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 229:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */
 230:Src/stm32f1xx_it.c **** 
 231:Src/stm32f1xx_it.c ****   /* USER CODE END DMA1_Channel5_IRQn 1 */
 232:Src/stm32f1xx_it.c **** }
 233:Src/stm32f1xx_it.c **** #endif
 234:Src/stm32f1xx_it.c **** 
 235:Src/stm32f1xx_it.c **** #ifdef CONTROL_PPM_LEFT
 236:Src/stm32f1xx_it.c **** void EXTI3_IRQHandler(void)
 237:Src/stm32f1xx_it.c **** {
 238:Src/stm32f1xx_it.c ****   __HAL_GPIO_EXTI_CLEAR_IT(PPM_PIN);
 239:Src/stm32f1xx_it.c ****   PPM_ISR_Callback();    
 240:Src/stm32f1xx_it.c **** }
 241:Src/stm32f1xx_it.c **** #endif
 242:Src/stm32f1xx_it.c **** #ifdef CONTROL_PPM_RIGHT
 243:Src/stm32f1xx_it.c **** void EXTI15_10_IRQHandler(void)
 244:Src/stm32f1xx_it.c **** {
 245:Src/stm32f1xx_it.c ****   if(__HAL_GPIO_EXTI_GET_IT(PPM_PIN) != RESET) {
 246:Src/stm32f1xx_it.c ****     __HAL_GPIO_EXTI_CLEAR_IT(PPM_PIN);
 247:Src/stm32f1xx_it.c ****     PPM_ISR_Callback();
 248:Src/stm32f1xx_it.c ****   }
 249:Src/stm32f1xx_it.c **** }
 250:Src/stm32f1xx_it.c **** #endif
 251:Src/stm32f1xx_it.c **** 
 252:Src/stm32f1xx_it.c **** #ifdef CONTROL_PWM_LEFT
 253:Src/stm32f1xx_it.c **** void EXTI2_IRQHandler(void)
 254:Src/stm32f1xx_it.c **** {    
 255:Src/stm32f1xx_it.c ****   __HAL_GPIO_EXTI_CLEAR_IT(PWM_PIN_CH1);
 256:Src/stm32f1xx_it.c ****   PWM_ISR_CH1_Callback();
 257:Src/stm32f1xx_it.c **** }
 258:Src/stm32f1xx_it.c **** 
 259:Src/stm32f1xx_it.c **** void EXTI3_IRQHandler(void)
 260:Src/stm32f1xx_it.c **** {
ARM GAS  /tmp/ccWCiiyE.s 			page 9


 261:Src/stm32f1xx_it.c ****   __HAL_GPIO_EXTI_CLEAR_IT(PWM_PIN_CH2);
 262:Src/stm32f1xx_it.c ****   PWM_ISR_CH2_Callback();    
 263:Src/stm32f1xx_it.c **** }
 264:Src/stm32f1xx_it.c **** #endif
 265:Src/stm32f1xx_it.c **** #ifdef CONTROL_PWM_RIGHT
 266:Src/stm32f1xx_it.c **** void EXTI15_10_IRQHandler(void)
 267:Src/stm32f1xx_it.c **** {
 268:Src/stm32f1xx_it.c ****   if(__HAL_GPIO_EXTI_GET_IT(PWM_PIN_CH1) != RESET) {
 269:Src/stm32f1xx_it.c ****     __HAL_GPIO_EXTI_CLEAR_IT(PWM_PIN_CH1);
 270:Src/stm32f1xx_it.c ****     PWM_ISR_CH1_Callback();
 271:Src/stm32f1xx_it.c ****   }
 272:Src/stm32f1xx_it.c ****   if(__HAL_GPIO_EXTI_GET_IT(PWM_PIN_CH2) != RESET) {
 273:Src/stm32f1xx_it.c ****     __HAL_GPIO_EXTI_CLEAR_IT(PWM_PIN_CH2);
 274:Src/stm32f1xx_it.c ****     PWM_ISR_CH2_Callback();
 275:Src/stm32f1xx_it.c ****   }
 276:Src/stm32f1xx_it.c **** }
 277:Src/stm32f1xx_it.c **** #endif
 278:Src/stm32f1xx_it.c **** 
 279:Src/stm32f1xx_it.c **** #if defined(DEBUG_SERIAL_USART2) || defined(CONTROL_SERIAL_USART2) || defined(FEEDBACK_SERIAL_USART
 280:Src/stm32f1xx_it.c **** void DMA1_Channel6_IRQHandler(void)
 281:Src/stm32f1xx_it.c **** {
 282:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */
 283:Src/stm32f1xx_it.c **** 
 284:Src/stm32f1xx_it.c ****   /* USER CODE END DMA1_Channel4_IRQn 0 */
 285:Src/stm32f1xx_it.c ****   HAL_DMA_IRQHandler(&hdma_usart2_rx);
 286:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */
 287:Src/stm32f1xx_it.c **** 
 288:Src/stm32f1xx_it.c ****   /* USER CODE END DMA1_Channel4_IRQn 1 */
 289:Src/stm32f1xx_it.c **** }
 290:Src/stm32f1xx_it.c **** 
 291:Src/stm32f1xx_it.c **** /**
 292:Src/stm32f1xx_it.c **** * @brief This function handles DMA1 channel5 global interrupt.
 293:Src/stm32f1xx_it.c **** */
 294:Src/stm32f1xx_it.c **** void DMA1_Channel7_IRQHandler(void)
 295:Src/stm32f1xx_it.c **** {
 296:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */
 297:Src/stm32f1xx_it.c **** 
 298:Src/stm32f1xx_it.c ****   /* USER CODE END DMA1_Channel5_IRQn 0 */
 299:Src/stm32f1xx_it.c ****   HAL_DMA_IRQHandler(&hdma_usart2_tx);
 300:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */
 301:Src/stm32f1xx_it.c **** 
 302:Src/stm32f1xx_it.c ****   /* USER CODE END DMA1_Channel5_IRQn 1 */
 303:Src/stm32f1xx_it.c **** }
 304:Src/stm32f1xx_it.c **** #endif
 305:Src/stm32f1xx_it.c **** 
 306:Src/stm32f1xx_it.c **** #if defined(DEBUG_SERIAL_USART3) || defined(CONTROL_SERIAL_USART3) || defined(FEEDBACK_SERIAL_USART
 307:Src/stm32f1xx_it.c **** /**
 308:Src/stm32f1xx_it.c ****   * @brief This function handles DMA1 channel2 global interrupt.
 309:Src/stm32f1xx_it.c ****   */
 310:Src/stm32f1xx_it.c **** void DMA1_Channel2_IRQHandler(void)
 311:Src/stm32f1xx_it.c **** {
 216              		.loc 1 311 0
 217              		.cfi_startproc
 218              		@ args = 0, pretend = 0, frame = 0
 219              		@ frame_needed = 0, uses_anonymous_args = 0
 220 0000 08B5     		push	{r3, lr}
 221              	.LCFI1:
ARM GAS  /tmp/ccWCiiyE.s 			page 10


 222              		.cfi_def_cfa_offset 8
 223              		.cfi_offset 3, -8
 224              		.cfi_offset 14, -4
 312:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */
 313:Src/stm32f1xx_it.c **** 
 314:Src/stm32f1xx_it.c ****   /* USER CODE END DMA1_Channel2_IRQn 0 */
 315:Src/stm32f1xx_it.c ****   HAL_DMA_IRQHandler(&hdma_usart3_tx);
 225              		.loc 1 315 0
 226 0002 0248     		ldr	r0, .L17
 227 0004 FFF7FEFF 		bl	HAL_DMA_IRQHandler
 228              	.LVL2:
 229 0008 08BD     		pop	{r3, pc}
 230              	.L18:
 231 000a 00BF     		.align	2
 232              	.L17:
 233 000c 00000000 		.word	hdma_usart3_tx
 234              		.cfi_endproc
 235              	.LFE73:
 237              		.section	.text.DMA1_Channel3_IRQHandler,"ax",%progbits
 238              		.align	1
 239              		.global	DMA1_Channel3_IRQHandler
 240              		.syntax unified
 241              		.thumb
 242              		.thumb_func
 243              		.fpu softvfp
 245              	DMA1_Channel3_IRQHandler:
 246              	.LFB74:
 316:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */
 317:Src/stm32f1xx_it.c **** 
 318:Src/stm32f1xx_it.c ****   /* USER CODE END DMA1_Channel2_IRQn 1 */
 319:Src/stm32f1xx_it.c **** }
 320:Src/stm32f1xx_it.c **** 
 321:Src/stm32f1xx_it.c **** /**
 322:Src/stm32f1xx_it.c ****   * @brief This function handles DMA1 channel3 global interrupt.
 323:Src/stm32f1xx_it.c ****   */
 324:Src/stm32f1xx_it.c **** void DMA1_Channel3_IRQHandler(void)
 325:Src/stm32f1xx_it.c **** {
 247              		.loc 1 325 0
 248              		.cfi_startproc
 249              		@ args = 0, pretend = 0, frame = 0
 250              		@ frame_needed = 0, uses_anonymous_args = 0
 251 0000 08B5     		push	{r3, lr}
 252              	.LCFI2:
 253              		.cfi_def_cfa_offset 8
 254              		.cfi_offset 3, -8
 255              		.cfi_offset 14, -4
 326:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */
 327:Src/stm32f1xx_it.c **** 
 328:Src/stm32f1xx_it.c ****   /* USER CODE END DMA1_Channel3_IRQn 0 */
 329:Src/stm32f1xx_it.c ****   HAL_DMA_IRQHandler(&hdma_usart3_rx);
 256              		.loc 1 329 0
 257 0002 0248     		ldr	r0, .L21
 258 0004 FFF7FEFF 		bl	HAL_DMA_IRQHandler
 259              	.LVL3:
 260 0008 08BD     		pop	{r3, pc}
 261              	.L22:
 262 000a 00BF     		.align	2
ARM GAS  /tmp/ccWCiiyE.s 			page 11


 263              	.L21:
 264 000c 00000000 		.word	hdma_usart3_rx
 265              		.cfi_endproc
 266              	.LFE74:
 268              		.section	.text.USART3_IRQHandler,"ax",%progbits
 269              		.align	1
 270              		.global	USART3_IRQHandler
 271              		.syntax unified
 272              		.thumb
 273              		.thumb_func
 274              		.fpu softvfp
 276              	USART3_IRQHandler:
 277              	.LFB75:
 330:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */
 331:Src/stm32f1xx_it.c **** 
 332:Src/stm32f1xx_it.c ****   /* USER CODE END DMA1_Channel3_IRQn 1 */
 333:Src/stm32f1xx_it.c **** }
 334:Src/stm32f1xx_it.c **** #endif
 335:Src/stm32f1xx_it.c **** 
 336:Src/stm32f1xx_it.c **** #if defined(DEBUG_SERIAL_USART2) || defined(CONTROL_SERIAL_USART2) || defined(FEEDBACK_SERIAL_USART
 337:Src/stm32f1xx_it.c **** /**
 338:Src/stm32f1xx_it.c ****   * @brief This function handles USART2 global interrupt.
 339:Src/stm32f1xx_it.c ****   */
 340:Src/stm32f1xx_it.c **** void USART2_IRQHandler(void)
 341:Src/stm32f1xx_it.c **** {
 342:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN USART2_IRQn 0 */
 343:Src/stm32f1xx_it.c **** 
 344:Src/stm32f1xx_it.c ****   /* USER CODE END USART2_IRQn 0 */
 345:Src/stm32f1xx_it.c ****   HAL_UART_IRQHandler(&huart2);
 346:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN USART2_IRQn 1 */
 347:Src/stm32f1xx_it.c ****   if(RESET != __HAL_UART_GET_IT_SOURCE(&huart2, UART_IT_IDLE)) {  // Check for IDLE line interrupt
 348:Src/stm32f1xx_it.c ****       __HAL_UART_CLEAR_IDLEFLAG(&huart2);                         // Clear IDLE line flag (otherwis
 349:Src/stm32f1xx_it.c ****       usart2_rx_check();                                          // Check for data to process
 350:Src/stm32f1xx_it.c ****   }
 351:Src/stm32f1xx_it.c ****   /* USER CODE END USART2_IRQn 1 */
 352:Src/stm32f1xx_it.c **** }
 353:Src/stm32f1xx_it.c **** #endif
 354:Src/stm32f1xx_it.c **** 
 355:Src/stm32f1xx_it.c **** #if defined(DEBUG_SERIAL_USART3) || defined(CONTROL_SERIAL_USART3) || defined(FEEDBACK_SERIAL_USART
 356:Src/stm32f1xx_it.c **** /**
 357:Src/stm32f1xx_it.c ****   * @brief This function handles USART3 global interrupt.
 358:Src/stm32f1xx_it.c ****   */
 359:Src/stm32f1xx_it.c **** void USART3_IRQHandler(void)
 360:Src/stm32f1xx_it.c **** {
 278              		.loc 1 360 0
 279              		.cfi_startproc
 280              		@ args = 0, pretend = 0, frame = 8
 281              		@ frame_needed = 0, uses_anonymous_args = 0
 282 0000 10B5     		push	{r4, lr}
 283              	.LCFI3:
 284              		.cfi_def_cfa_offset 8
 285              		.cfi_offset 4, -8
 286              		.cfi_offset 14, -4
 287 0002 82B0     		sub	sp, sp, #8
 288              	.LCFI4:
 289              		.cfi_def_cfa_offset 16
 361:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN USART2_IRQn 0 */
ARM GAS  /tmp/ccWCiiyE.s 			page 12


 362:Src/stm32f1xx_it.c **** 
 363:Src/stm32f1xx_it.c ****   /* USER CODE END USART2_IRQn 0 */
 364:Src/stm32f1xx_it.c ****   HAL_UART_IRQHandler(&huart3);
 290              		.loc 1 364 0
 291 0004 0A4C     		ldr	r4, .L27
 292 0006 2046     		mov	r0, r4
 293 0008 FFF7FEFF 		bl	HAL_UART_IRQHandler
 294              	.LVL4:
 365:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN USART2_IRQn 1 */
 366:Src/stm32f1xx_it.c ****   if(RESET != __HAL_UART_GET_IT_SOURCE(&huart3, UART_IT_IDLE)) {  // Check for IDLE line interrupt 
 295              		.loc 1 366 0
 296 000c 2368     		ldr	r3, [r4]
 297 000e DA68     		ldr	r2, [r3, #12]
 298 0010 12F0100F 		tst	r2, #16
 299 0014 01D1     		bne	.L26
 300              	.L23:
 367:Src/stm32f1xx_it.c ****       __HAL_UART_CLEAR_IDLEFLAG(&huart3);                         // Clear IDLE line flag (otherwis
 368:Src/stm32f1xx_it.c ****       usart3_rx_check();                                          // Check for data to process
 369:Src/stm32f1xx_it.c ****   }
 370:Src/stm32f1xx_it.c ****   /* USER CODE END USART2_IRQn 1 */
 371:Src/stm32f1xx_it.c **** }
 301              		.loc 1 371 0
 302 0016 02B0     		add	sp, sp, #8
 303              	.LCFI5:
 304              		.cfi_remember_state
 305              		.cfi_def_cfa_offset 8
 306              		@ sp needed
 307 0018 10BD     		pop	{r4, pc}
 308              	.L26:
 309              	.LCFI6:
 310              		.cfi_restore_state
 311              	.LBB2:
 367:Src/stm32f1xx_it.c ****       __HAL_UART_CLEAR_IDLEFLAG(&huart3);                         // Clear IDLE line flag (otherwis
 312              		.loc 1 367 0
 313 001a 0022     		movs	r2, #0
 314 001c 0192     		str	r2, [sp, #4]
 315 001e 1A68     		ldr	r2, [r3]
 316 0020 0192     		str	r2, [sp, #4]
 317 0022 5B68     		ldr	r3, [r3, #4]
 318 0024 0193     		str	r3, [sp, #4]
 319 0026 019B     		ldr	r3, [sp, #4]
 320              	.LBE2:
 368:Src/stm32f1xx_it.c ****   }
 321              		.loc 1 368 0
 322 0028 FFF7FEFF 		bl	usart3_rx_check
 323              	.LVL5:
 324              		.loc 1 371 0
 325 002c F3E7     		b	.L23
 326              	.L28:
 327 002e 00BF     		.align	2
 328              	.L27:
 329 0030 00000000 		.word	huart3
 330              		.cfi_endproc
 331              	.LFE75:
 333              		.text
 334              	.Letext0:
 335              		.file 2 "/usr/include/newlib/machine/_default_types.h"
ARM GAS  /tmp/ccWCiiyE.s 			page 13


 336              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 337              		.file 4 "Drivers/CMSIS/Include/core_cm3.h"
 338              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 339              		.file 6 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xe.h"
 340              		.file 7 "/usr/include/newlib/sys/lock.h"
 341              		.file 8 "/usr/include/newlib/sys/_types.h"
 342              		.file 9 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 343              		.file 10 "/usr/include/newlib/sys/reent.h"
 344              		.file 11 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f1xx.h"
 345              		.file 12 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 346              		.file 13 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 347              		.file 14 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_i2c.h"
 348              		.file 15 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_uart.h"
 349              		.file 16 "Inc/util.h"
 350              		.file 17 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 351              		.file 18 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_cortex.h"
ARM GAS  /tmp/ccWCiiyE.s 			page 14


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f1xx_it.c
     /tmp/ccWCiiyE.s:16     .text.NMI_Handler:0000000000000000 $t
     /tmp/ccWCiiyE.s:23     .text.NMI_Handler:0000000000000000 NMI_Handler
     /tmp/ccWCiiyE.s:36     .text.HardFault_Handler:0000000000000000 $t
     /tmp/ccWCiiyE.s:43     .text.HardFault_Handler:0000000000000000 HardFault_Handler
     /tmp/ccWCiiyE.s:57     .text.MemManage_Handler:0000000000000000 $t
     /tmp/ccWCiiyE.s:64     .text.MemManage_Handler:0000000000000000 MemManage_Handler
     /tmp/ccWCiiyE.s:78     .text.BusFault_Handler:0000000000000000 $t
     /tmp/ccWCiiyE.s:85     .text.BusFault_Handler:0000000000000000 BusFault_Handler
     /tmp/ccWCiiyE.s:99     .text.UsageFault_Handler:0000000000000000 $t
     /tmp/ccWCiiyE.s:106    .text.UsageFault_Handler:0000000000000000 UsageFault_Handler
     /tmp/ccWCiiyE.s:120    .text.SVC_Handler:0000000000000000 $t
     /tmp/ccWCiiyE.s:127    .text.SVC_Handler:0000000000000000 SVC_Handler
     /tmp/ccWCiiyE.s:139    .text.DebugMon_Handler:0000000000000000 $t
     /tmp/ccWCiiyE.s:146    .text.DebugMon_Handler:0000000000000000 DebugMon_Handler
     /tmp/ccWCiiyE.s:158    .text.PendSV_Handler:0000000000000000 $t
     /tmp/ccWCiiyE.s:165    .text.PendSV_Handler:0000000000000000 PendSV_Handler
     /tmp/ccWCiiyE.s:177    .text.SysTick_Handler:0000000000000000 $t
     /tmp/ccWCiiyE.s:184    .text.SysTick_Handler:0000000000000000 SysTick_Handler
     /tmp/ccWCiiyE.s:207    .text.DMA1_Channel2_IRQHandler:0000000000000000 $t
     /tmp/ccWCiiyE.s:214    .text.DMA1_Channel2_IRQHandler:0000000000000000 DMA1_Channel2_IRQHandler
     /tmp/ccWCiiyE.s:233    .text.DMA1_Channel2_IRQHandler:000000000000000c $d
     /tmp/ccWCiiyE.s:238    .text.DMA1_Channel3_IRQHandler:0000000000000000 $t
     /tmp/ccWCiiyE.s:245    .text.DMA1_Channel3_IRQHandler:0000000000000000 DMA1_Channel3_IRQHandler
     /tmp/ccWCiiyE.s:264    .text.DMA1_Channel3_IRQHandler:000000000000000c $d
     /tmp/ccWCiiyE.s:269    .text.USART3_IRQHandler:0000000000000000 $t
     /tmp/ccWCiiyE.s:276    .text.USART3_IRQHandler:0000000000000000 USART3_IRQHandler
     /tmp/ccWCiiyE.s:329    .text.USART3_IRQHandler:0000000000000030 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_IncTick
HAL_SYSTICK_IRQHandler
HAL_DMA_IRQHandler
hdma_usart3_tx
hdma_usart3_rx
HAL_UART_IRQHandler
usart3_rx_check
huart3
