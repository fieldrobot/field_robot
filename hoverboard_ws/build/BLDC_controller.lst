ARM GAS  /tmp/ccoxnsnM.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"BLDC_controller.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.plook_u8s16_evencka,"ax",%progbits
  16              		.align	1
  17              		.global	plook_u8s16_evencka
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	plook_u8s16_evencka:
  24              	.LFB0:
  25              		.file 1 "Src/BLDC_controller.c"
   1:Src/BLDC_controller.c **** /*
   2:Src/BLDC_controller.c ****  * File: BLDC_controller.c
   3:Src/BLDC_controller.c ****  *
   4:Src/BLDC_controller.c ****  * Code generated for Simulink model 'BLDC_controller'.
   5:Src/BLDC_controller.c ****  *
   6:Src/BLDC_controller.c ****  * Model version                  : 1.1260
   7:Src/BLDC_controller.c ****  * Simulink Coder version         : 8.13 (R2017b) 24-Jul-2017
   8:Src/BLDC_controller.c ****  * C/C++ source code generated on : Tue Mar 24 11:01:08 2020
   9:Src/BLDC_controller.c ****  *
  10:Src/BLDC_controller.c ****  * Target selection: ert.tlc
  11:Src/BLDC_controller.c ****  * Embedded hardware selection: ARM Compatible->ARM Cortex
  12:Src/BLDC_controller.c ****  * Emulation hardware selection:
  13:Src/BLDC_controller.c ****  *    Differs from embedded hardware (MATLAB Host)
  14:Src/BLDC_controller.c ****  * Code generation objectives:
  15:Src/BLDC_controller.c ****  *    1. Execution efficiency
  16:Src/BLDC_controller.c ****  *    2. RAM efficiency
  17:Src/BLDC_controller.c ****  * Validation result: Not run
  18:Src/BLDC_controller.c ****  */
  19:Src/BLDC_controller.c **** 
  20:Src/BLDC_controller.c **** #include "BLDC_controller.h"
  21:Src/BLDC_controller.c **** 
  22:Src/BLDC_controller.c **** /* Named constants for Chart: '<S4>/F03_02_Control_Mode_Manager' */
  23:Src/BLDC_controller.c **** #define IN_ACTIVE                      ((uint8_T)1U)
  24:Src/BLDC_controller.c **** #define IN_NO_ACTIVE_CHILD             ((uint8_T)0U)
  25:Src/BLDC_controller.c **** #define IN_OPEN                        ((uint8_T)2U)
  26:Src/BLDC_controller.c **** #define IN_SPEED_MODE                  ((uint8_T)1U)
  27:Src/BLDC_controller.c **** #define IN_TORQUE_MODE                 ((uint8_T)2U)
  28:Src/BLDC_controller.c **** #define IN_VOLTAGE_MODE                ((uint8_T)3U)
  29:Src/BLDC_controller.c **** #define OPEN_MODE                      ((uint8_T)0U)
  30:Src/BLDC_controller.c **** #define SPD_MODE                       ((uint8_T)2U)
  31:Src/BLDC_controller.c **** #define TRQ_MODE                       ((uint8_T)3U)
  32:Src/BLDC_controller.c **** #define VLT_MODE                       ((uint8_T)1U)
  33:Src/BLDC_controller.c **** #ifndef UCHAR_MAX
ARM GAS  /tmp/ccoxnsnM.s 			page 2


  34:Src/BLDC_controller.c **** #include <limits.h>
  35:Src/BLDC_controller.c **** #endif
  36:Src/BLDC_controller.c **** 
  37:Src/BLDC_controller.c **** #if ( UCHAR_MAX != (0xFFU) ) || ( SCHAR_MAX != (0x7F) )
  38:Src/BLDC_controller.c **** #error Code was generated for compiler with different sized uchar/char. \
  39:Src/BLDC_controller.c **** Consider adjusting Test hardware word size settings on the \
  40:Src/BLDC_controller.c **** Hardware Implementation pane to match your compiler word sizes as \
  41:Src/BLDC_controller.c **** defined in limits.h of the compiler. Alternatively, you can \
  42:Src/BLDC_controller.c **** select the Test hardware is the same as production hardware option and \
  43:Src/BLDC_controller.c **** select the Enable portable word sizes option on the Code Generation > \
  44:Src/BLDC_controller.c **** Verification pane for ERT based targets, which will disable the \
  45:Src/BLDC_controller.c **** preprocessor word size checks.
  46:Src/BLDC_controller.c **** #endif
  47:Src/BLDC_controller.c **** 
  48:Src/BLDC_controller.c **** #if ( USHRT_MAX != (0xFFFFU) ) || ( SHRT_MAX != (0x7FFF) )
  49:Src/BLDC_controller.c **** #error Code was generated for compiler with different sized ushort/short. \
  50:Src/BLDC_controller.c **** Consider adjusting Test hardware word size settings on the \
  51:Src/BLDC_controller.c **** Hardware Implementation pane to match your compiler word sizes as \
  52:Src/BLDC_controller.c **** defined in limits.h of the compiler. Alternatively, you can \
  53:Src/BLDC_controller.c **** select the Test hardware is the same as production hardware option and \
  54:Src/BLDC_controller.c **** select the Enable portable word sizes option on the Code Generation > \
  55:Src/BLDC_controller.c **** Verification pane for ERT based targets, which will disable the \
  56:Src/BLDC_controller.c **** preprocessor word size checks.
  57:Src/BLDC_controller.c **** #endif
  58:Src/BLDC_controller.c **** 
  59:Src/BLDC_controller.c **** #if ( UINT_MAX != (0xFFFFFFFFU) ) || ( INT_MAX != (0x7FFFFFFF) )
  60:Src/BLDC_controller.c **** #error Code was generated for compiler with different sized uint/int. \
  61:Src/BLDC_controller.c **** Consider adjusting Test hardware word size settings on the \
  62:Src/BLDC_controller.c **** Hardware Implementation pane to match your compiler word sizes as \
  63:Src/BLDC_controller.c **** defined in limits.h of the compiler. Alternatively, you can \
  64:Src/BLDC_controller.c **** select the Test hardware is the same as production hardware option and \
  65:Src/BLDC_controller.c **** select the Enable portable word sizes option on the Code Generation > \
  66:Src/BLDC_controller.c **** Verification pane for ERT based targets, which will disable the \
  67:Src/BLDC_controller.c **** preprocessor word size checks.
  68:Src/BLDC_controller.c **** #endif
  69:Src/BLDC_controller.c **** 
  70:Src/BLDC_controller.c **** #if ( ULONG_MAX != (0xFFFFFFFFU) ) || ( LONG_MAX != (0x7FFFFFFF) )
  71:Src/BLDC_controller.c **** #error Code was generated for compiler with different sized ulong/long. \
  72:Src/BLDC_controller.c **** Consider adjusting Test hardware word size settings on the \
  73:Src/BLDC_controller.c **** Hardware Implementation pane to match your compiler word sizes as \
  74:Src/BLDC_controller.c **** defined in limits.h of the compiler. Alternatively, you can \
  75:Src/BLDC_controller.c **** select the Test hardware is the same as production hardware option and \
  76:Src/BLDC_controller.c **** select the Enable portable word sizes option on the Code Generation > \
  77:Src/BLDC_controller.c **** Verification pane for ERT based targets, which will disable the \
  78:Src/BLDC_controller.c **** preprocessor word size checks.
  79:Src/BLDC_controller.c **** #endif
  80:Src/BLDC_controller.c **** 
  81:Src/BLDC_controller.c **** #if 0
  82:Src/BLDC_controller.c **** 
  83:Src/BLDC_controller.c **** /* Skip this size verification because of preprocessor limitation */
  84:Src/BLDC_controller.c **** #if ( ULLONG_MAX != (0xFFFFFFFFFFFFFFFFULL) ) || ( LLONG_MAX != (0x7FFFFFFFFFFFFFFFLL) )
  85:Src/BLDC_controller.c **** #error Code was generated for compiler with different sized ulong_long/long_long. \
  86:Src/BLDC_controller.c **** Consider adjusting Test hardware word size settings on the \
  87:Src/BLDC_controller.c **** Hardware Implementation pane to match your compiler word sizes as \
  88:Src/BLDC_controller.c **** defined in limits.h of the compiler. Alternatively, you can \
  89:Src/BLDC_controller.c **** select the Test hardware is the same as production hardware option and \
  90:Src/BLDC_controller.c **** select the Enable portable word sizes option on the Code Generation > \
ARM GAS  /tmp/ccoxnsnM.s 			page 3


  91:Src/BLDC_controller.c **** Verification pane for ERT based targets, which will disable the \
  92:Src/BLDC_controller.c **** preprocessor word size checks.
  93:Src/BLDC_controller.c **** #endif
  94:Src/BLDC_controller.c **** #endif
  95:Src/BLDC_controller.c **** 
  96:Src/BLDC_controller.c **** uint8_T plook_u8s16_evencka(int16_T u, int16_T bp0, uint16_T bpSpace, uint32_T
  97:Src/BLDC_controller.c ****   maxIndex);
  98:Src/BLDC_controller.c **** uint8_T plook_u8u16_evencka(uint16_T u, uint16_T bp0, uint16_T bpSpace, uint32_T
  99:Src/BLDC_controller.c ****   maxIndex);
 100:Src/BLDC_controller.c **** int32_T div_nde_s32_floor(int32_T numerator, int32_T denominator);
 101:Src/BLDC_controller.c **** extern void Counter_Init(DW_Counter *localDW, int16_T rtp_z_cntInit);
 102:Src/BLDC_controller.c **** extern int16_T Counter(int16_T rtu_inc, int16_T rtu_max, boolean_T rtu_rst,
 103:Src/BLDC_controller.c ****   DW_Counter *localDW);
 104:Src/BLDC_controller.c **** extern void PI_clamp_fixdt(int16_T rtu_err, uint16_T rtu_P, uint16_T rtu_I,
 105:Src/BLDC_controller.c ****   int16_T rtu_satMax, int16_T rtu_satMin, int32_T rtu_ext_limProt, int16_T
 106:Src/BLDC_controller.c ****   *rty_out, DW_PI_clamp_fixdt *localDW);
 107:Src/BLDC_controller.c **** extern void Low_Pass_Filter_Reset(DW_Low_Pass_Filter *localDW);
 108:Src/BLDC_controller.c **** extern void Low_Pass_Filter(const int16_T rtu_u[2], uint16_T rtu_coef, int16_T
 109:Src/BLDC_controller.c ****   rty_y[2], DW_Low_Pass_Filter *localDW);
 110:Src/BLDC_controller.c **** extern void I_backCalc_fixdt_Init(DW_I_backCalc_fixdt *localDW, int32_T
 111:Src/BLDC_controller.c ****   rtp_yInit);
 112:Src/BLDC_controller.c **** extern void I_backCalc_fixdt(int16_T rtu_err, uint16_T rtu_I, uint16_T rtu_Kb,
 113:Src/BLDC_controller.c ****   int16_T rtu_satMax, int16_T rtu_satMin, int16_T *rty_out, DW_I_backCalc_fixdt *
 114:Src/BLDC_controller.c ****   localDW);
 115:Src/BLDC_controller.c **** extern void Counter_b_Init(DW_Counter_l *localDW, uint16_T rtp_z_cntInit);
 116:Src/BLDC_controller.c **** extern uint16_T Counter_i(uint16_T rtu_inc, uint16_T rtu_max, boolean_T rtu_rst,
 117:Src/BLDC_controller.c ****   DW_Counter_l *localDW);
 118:Src/BLDC_controller.c **** extern boolean_T either_edge(boolean_T rtu_u, DW_either_edge *localDW);
 119:Src/BLDC_controller.c **** extern void Debounce_Filter_Init(DW_Debounce_Filter *localDW);
 120:Src/BLDC_controller.c **** extern void Debounce_Filter(boolean_T rtu_u, uint16_T rtu_tAcv, uint16_T
 121:Src/BLDC_controller.c ****   rtu_tDeacv, boolean_T *rty_y, DW_Debounce_Filter *localDW);
 122:Src/BLDC_controller.c **** uint8_T plook_u8s16_evencka(int16_T u, int16_T bp0, uint16_T bpSpace, uint32_T
 123:Src/BLDC_controller.c ****   maxIndex)
 124:Src/BLDC_controller.c **** {
  26              		.loc 1 124 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31              	.LVL0:
 125:Src/BLDC_controller.c ****   uint8_T bpIndex;
 126:Src/BLDC_controller.c ****   uint16_T fbpIndex;
 127:Src/BLDC_controller.c **** 
 128:Src/BLDC_controller.c ****   /* Prelookup - Index only
 129:Src/BLDC_controller.c ****      Index Search method: 'even'
 130:Src/BLDC_controller.c ****      Extrapolation method: 'Clip'
 131:Src/BLDC_controller.c ****      Use previous index: 'off'
 132:Src/BLDC_controller.c ****      Use last breakpoint for index at or above upper limit: 'on'
 133:Src/BLDC_controller.c ****      Remove protection against out-of-range input in generated code: 'off'
 134:Src/BLDC_controller.c ****    */
 135:Src/BLDC_controller.c ****   if (u <= bp0) {
  32              		.loc 1 135 0
  33 0000 8842     		cmp	r0, r1
  34 0002 09DD     		ble	.L4
 136:Src/BLDC_controller.c ****     bpIndex = 0U;
 137:Src/BLDC_controller.c ****   } else {
 138:Src/BLDC_controller.c ****     fbpIndex = (uint16_T)((uint32_T)(uint16_T)(u - bp0) / bpSpace);
ARM GAS  /tmp/ccoxnsnM.s 			page 4


  35              		.loc 1 138 0
  36 0004 401A     		subs	r0, r0, r1
  37              	.LVL1:
  38 0006 80B2     		uxth	r0, r0
  39 0008 B0FBF2F2 		udiv	r2, r0, r2
  40              	.LVL2:
 139:Src/BLDC_controller.c ****     if (fbpIndex < maxIndex) {
  41              		.loc 1 139 0
  42 000c 9A42     		cmp	r2, r3
  43 000e 01D3     		bcc	.L5
 140:Src/BLDC_controller.c ****       bpIndex = (uint8_T)fbpIndex;
 141:Src/BLDC_controller.c ****     } else {
 142:Src/BLDC_controller.c ****       bpIndex = (uint8_T)maxIndex;
  44              		.loc 1 142 0
  45 0010 D8B2     		uxtb	r0, r3
  46              	.LVL3:
  47 0012 7047     		bx	lr
  48              	.LVL4:
  49              	.L5:
 140:Src/BLDC_controller.c ****       bpIndex = (uint8_T)fbpIndex;
  50              		.loc 1 140 0
  51 0014 D0B2     		uxtb	r0, r2
  52              	.LVL5:
  53 0016 7047     		bx	lr
  54              	.LVL6:
  55              	.L4:
 136:Src/BLDC_controller.c ****   } else {
  56              		.loc 1 136 0
  57 0018 0020     		movs	r0, #0
  58              	.LVL7:
 143:Src/BLDC_controller.c ****     }
 144:Src/BLDC_controller.c ****   }
 145:Src/BLDC_controller.c **** 
 146:Src/BLDC_controller.c ****   return bpIndex;
 147:Src/BLDC_controller.c **** }
  59              		.loc 1 147 0
  60 001a 7047     		bx	lr
  61              		.cfi_endproc
  62              	.LFE0:
  64              		.section	.text.plook_u8u16_evencka,"ax",%progbits
  65              		.align	1
  66              		.global	plook_u8u16_evencka
  67              		.syntax unified
  68              		.thumb
  69              		.thumb_func
  70              		.fpu softvfp
  72              	plook_u8u16_evencka:
  73              	.LFB1:
 148:Src/BLDC_controller.c **** 
 149:Src/BLDC_controller.c **** uint8_T plook_u8u16_evencka(uint16_T u, uint16_T bp0, uint16_T bpSpace, uint32_T
 150:Src/BLDC_controller.c ****   maxIndex)
 151:Src/BLDC_controller.c **** {
  74              		.loc 1 151 0
  75              		.cfi_startproc
  76              		@ args = 0, pretend = 0, frame = 0
  77              		@ frame_needed = 0, uses_anonymous_args = 0
  78              		@ link register save eliminated.
ARM GAS  /tmp/ccoxnsnM.s 			page 5


  79              	.LVL8:
 152:Src/BLDC_controller.c ****   uint8_T bpIndex;
 153:Src/BLDC_controller.c ****   uint16_T fbpIndex;
 154:Src/BLDC_controller.c **** 
 155:Src/BLDC_controller.c ****   /* Prelookup - Index only
 156:Src/BLDC_controller.c ****      Index Search method: 'even'
 157:Src/BLDC_controller.c ****      Extrapolation method: 'Clip'
 158:Src/BLDC_controller.c ****      Use previous index: 'off'
 159:Src/BLDC_controller.c ****      Use last breakpoint for index at or above upper limit: 'on'
 160:Src/BLDC_controller.c ****      Remove protection against out-of-range input in generated code: 'off'
 161:Src/BLDC_controller.c ****    */
 162:Src/BLDC_controller.c ****   if (u <= bp0) {
  80              		.loc 1 162 0
  81 0000 8842     		cmp	r0, r1
  82 0002 09D9     		bls	.L9
 163:Src/BLDC_controller.c ****     bpIndex = 0U;
 164:Src/BLDC_controller.c ****   } else {
 165:Src/BLDC_controller.c ****     fbpIndex = (uint16_T)((uint32_T)(uint16_T)((uint32_T)u - bp0) / bpSpace);
  83              		.loc 1 165 0
  84 0004 401A     		subs	r0, r0, r1
  85              	.LVL9:
  86 0006 80B2     		uxth	r0, r0
  87 0008 B0FBF2F2 		udiv	r2, r0, r2
  88              	.LVL10:
 166:Src/BLDC_controller.c ****     if (fbpIndex < maxIndex) {
  89              		.loc 1 166 0
  90 000c 9A42     		cmp	r2, r3
  91 000e 01D3     		bcc	.L10
 167:Src/BLDC_controller.c ****       bpIndex = (uint8_T)fbpIndex;
 168:Src/BLDC_controller.c ****     } else {
 169:Src/BLDC_controller.c ****       bpIndex = (uint8_T)maxIndex;
  92              		.loc 1 169 0
  93 0010 D8B2     		uxtb	r0, r3
  94              	.LVL11:
  95 0012 7047     		bx	lr
  96              	.LVL12:
  97              	.L10:
 167:Src/BLDC_controller.c ****       bpIndex = (uint8_T)fbpIndex;
  98              		.loc 1 167 0
  99 0014 D0B2     		uxtb	r0, r2
 100              	.LVL13:
 101 0016 7047     		bx	lr
 102              	.LVL14:
 103              	.L9:
 163:Src/BLDC_controller.c ****   } else {
 104              		.loc 1 163 0
 105 0018 0020     		movs	r0, #0
 106              	.LVL15:
 170:Src/BLDC_controller.c ****     }
 171:Src/BLDC_controller.c ****   }
 172:Src/BLDC_controller.c **** 
 173:Src/BLDC_controller.c ****   return bpIndex;
 174:Src/BLDC_controller.c **** }
 107              		.loc 1 174 0
 108 001a 7047     		bx	lr
 109              		.cfi_endproc
 110              	.LFE1:
ARM GAS  /tmp/ccoxnsnM.s 			page 6


 112              		.section	.text.div_nde_s32_floor,"ax",%progbits
 113              		.align	1
 114              		.global	div_nde_s32_floor
 115              		.syntax unified
 116              		.thumb
 117              		.thumb_func
 118              		.fpu softvfp
 120              	div_nde_s32_floor:
 121              	.LFB2:
 175:Src/BLDC_controller.c **** 
 176:Src/BLDC_controller.c **** int32_T div_nde_s32_floor(int32_T numerator, int32_T denominator)
 177:Src/BLDC_controller.c **** {
 122              		.loc 1 177 0
 123              		.cfi_startproc
 124              		@ args = 0, pretend = 0, frame = 0
 125              		@ frame_needed = 0, uses_anonymous_args = 0
 126              		@ link register save eliminated.
 127              	.LVL16:
 178:Src/BLDC_controller.c ****   return (((numerator < 0) != (denominator < 0)) && (numerator % denominator !=
 128              		.loc 1 178 0
 129 0000 CB0F     		lsrs	r3, r1, #31
 179:Src/BLDC_controller.c ****            0) ? -1 : 0) + numerator / denominator;
 130              		.loc 1 179 0
 131 0002 B3EBD07F 		cmp	r3, r0, lsr #31
 132 0006 08D0     		beq	.L13
 178:Src/BLDC_controller.c ****   return (((numerator < 0) != (denominator < 0)) && (numerator % denominator !=
 133              		.loc 1 178 0
 134 0008 90FBF1F3 		sdiv	r3, r0, r1
 135 000c 01FB1303 		mls	r3, r1, r3, r0
 136 0010 2BB9     		cbnz	r3, .L14
 137              	.L12:
 138              		.loc 1 179 0 discriminator 3
 139 0012 90FBF1F0 		sdiv	r0, r0, r1
 140              	.LVL17:
 180:Src/BLDC_controller.c **** }
 141              		.loc 1 180 0 discriminator 3
 142 0016 1844     		add	r0, r0, r3
 143 0018 7047     		bx	lr
 144              	.LVL18:
 145              	.L13:
 179:Src/BLDC_controller.c ****            0) ? -1 : 0) + numerator / denominator;
 146              		.loc 1 179 0
 147 001a 0023     		movs	r3, #0
 148 001c F9E7     		b	.L12
 149              	.L14:
 150 001e 4FF0FF33 		mov	r3, #-1
 151 0022 F6E7     		b	.L12
 152              		.cfi_endproc
 153              	.LFE2:
 155              		.section	.text.Counter_Init,"ax",%progbits
 156              		.align	1
 157              		.global	Counter_Init
 158              		.syntax unified
 159              		.thumb
 160              		.thumb_func
 161              		.fpu softvfp
 163              	Counter_Init:
ARM GAS  /tmp/ccoxnsnM.s 			page 7


 164              	.LFB3:
 181:Src/BLDC_controller.c **** 
 182:Src/BLDC_controller.c **** /* System initialize for atomic system: '<S12>/Counter' */
 183:Src/BLDC_controller.c **** void Counter_Init(DW_Counter *localDW, int16_T rtp_z_cntInit)
 184:Src/BLDC_controller.c **** {
 165              		.loc 1 184 0
 166              		.cfi_startproc
 167              		@ args = 0, pretend = 0, frame = 0
 168              		@ frame_needed = 0, uses_anonymous_args = 0
 169              		@ link register save eliminated.
 170              	.LVL19:
 185:Src/BLDC_controller.c ****   /* InitializeConditions for UnitDelay: '<S16>/UnitDelay' */
 186:Src/BLDC_controller.c ****   localDW->UnitDelay_DSTATE = rtp_z_cntInit;
 171              		.loc 1 186 0
 172 0000 0180     		strh	r1, [r0]	@ movhi
 173 0002 7047     		bx	lr
 174              		.cfi_endproc
 175              	.LFE3:
 177              		.section	.text.Counter,"ax",%progbits
 178              		.align	1
 179              		.global	Counter
 180              		.syntax unified
 181              		.thumb
 182              		.thumb_func
 183              		.fpu softvfp
 185              	Counter:
 186              	.LFB4:
 187:Src/BLDC_controller.c **** }
 188:Src/BLDC_controller.c **** 
 189:Src/BLDC_controller.c **** /* Output and update for atomic system: '<S12>/Counter' */
 190:Src/BLDC_controller.c **** int16_T Counter(int16_T rtu_inc, int16_T rtu_max, boolean_T rtu_rst, DW_Counter *
 191:Src/BLDC_controller.c ****                 localDW)
 192:Src/BLDC_controller.c **** {
 187              		.loc 1 192 0
 188              		.cfi_startproc
 189              		@ args = 0, pretend = 0, frame = 0
 190              		@ frame_needed = 0, uses_anonymous_args = 0
 191              		@ link register save eliminated.
 192              	.LVL20:
 193:Src/BLDC_controller.c ****   int16_T rtu_rst_0;
 194:Src/BLDC_controller.c ****   int16_T rty_cnt_0;
 195:Src/BLDC_controller.c **** 
 196:Src/BLDC_controller.c ****   /* Switch: '<S16>/Switch1' incorporates:
 197:Src/BLDC_controller.c ****    *  Constant: '<S16>/Constant23'
 198:Src/BLDC_controller.c ****    *  UnitDelay: '<S16>/UnitDelay'
 199:Src/BLDC_controller.c ****    */
 200:Src/BLDC_controller.c ****   if (rtu_rst) {
 193              		.loc 1 200 0
 194 0000 3AB9     		cbnz	r2, .L20
 201:Src/BLDC_controller.c ****     rtu_rst_0 = 0;
 202:Src/BLDC_controller.c ****   } else {
 203:Src/BLDC_controller.c ****     rtu_rst_0 = localDW->UnitDelay_DSTATE;
 195              		.loc 1 203 0
 196 0002 B3F90020 		ldrsh	r2, [r3]
 197              	.LVL21:
 198              	.L17:
 204:Src/BLDC_controller.c ****   }
ARM GAS  /tmp/ccoxnsnM.s 			page 8


 205:Src/BLDC_controller.c **** 
 206:Src/BLDC_controller.c ****   /* End of Switch: '<S16>/Switch1' */
 207:Src/BLDC_controller.c **** 
 208:Src/BLDC_controller.c ****   /* Sum: '<S14>/Sum1' */
 209:Src/BLDC_controller.c ****   rty_cnt_0 = (int16_T)(rtu_inc + rtu_rst_0);
 199              		.loc 1 209 0
 200 0006 1044     		add	r0, r0, r2
 201              	.LVL22:
 202 0008 00B2     		sxth	r0, r0
 203              	.LVL23:
 210:Src/BLDC_controller.c **** 
 211:Src/BLDC_controller.c ****   /* MinMax: '<S14>/MinMax' */
 212:Src/BLDC_controller.c ****   if (rty_cnt_0 < rtu_max) {
 204              		.loc 1 212 0
 205 000a 8842     		cmp	r0, r1
 206 000c 03DB     		blt	.L21
 213:Src/BLDC_controller.c ****     /* Update for UnitDelay: '<S16>/UnitDelay' */
 214:Src/BLDC_controller.c ****     localDW->UnitDelay_DSTATE = rty_cnt_0;
 215:Src/BLDC_controller.c ****   } else {
 216:Src/BLDC_controller.c ****     /* Update for UnitDelay: '<S16>/UnitDelay' */
 217:Src/BLDC_controller.c ****     localDW->UnitDelay_DSTATE = rtu_max;
 207              		.loc 1 217 0
 208 000e 1980     		strh	r1, [r3]	@ movhi
 218:Src/BLDC_controller.c ****   }
 219:Src/BLDC_controller.c **** 
 220:Src/BLDC_controller.c ****   /* End of MinMax: '<S14>/MinMax' */
 221:Src/BLDC_controller.c ****   return rty_cnt_0;
 222:Src/BLDC_controller.c **** }
 209              		.loc 1 222 0
 210 0010 7047     		bx	lr
 211              	.LVL24:
 212              	.L20:
 201:Src/BLDC_controller.c ****   } else {
 213              		.loc 1 201 0
 214 0012 0022     		movs	r2, #0
 215              	.LVL25:
 216 0014 F7E7     		b	.L17
 217              	.LVL26:
 218              	.L21:
 214:Src/BLDC_controller.c ****   } else {
 219              		.loc 1 214 0
 220 0016 1880     		strh	r0, [r3]	@ movhi
 221 0018 7047     		bx	lr
 222              		.cfi_endproc
 223              	.LFE4:
 225              		.section	.text.PI_clamp_fixdt,"ax",%progbits
 226              		.align	1
 227              		.global	PI_clamp_fixdt
 228              		.syntax unified
 229              		.thumb
 230              		.thumb_func
 231              		.fpu softvfp
 233              	PI_clamp_fixdt:
 234              	.LFB5:
 223:Src/BLDC_controller.c **** 
 224:Src/BLDC_controller.c **** /*
 225:Src/BLDC_controller.c ****  * Output and update for atomic system:
ARM GAS  /tmp/ccoxnsnM.s 			page 9


 226:Src/BLDC_controller.c ****  *    '<S54>/PI_clamp_fixdt'
 227:Src/BLDC_controller.c ****  *    '<S52>/PI_clamp_fixdt'
 228:Src/BLDC_controller.c ****  *    '<S53>/PI_clamp_fixdt'
 229:Src/BLDC_controller.c ****  */
 230:Src/BLDC_controller.c **** void PI_clamp_fixdt(int16_T rtu_err, uint16_T rtu_P, uint16_T rtu_I, int16_T
 231:Src/BLDC_controller.c ****                     rtu_satMax, int16_T rtu_satMin, int32_T rtu_ext_limProt,
 232:Src/BLDC_controller.c ****                     int16_T *rty_out, DW_PI_clamp_fixdt *localDW)
 233:Src/BLDC_controller.c **** {
 235              		.loc 1 233 0
 236              		.cfi_startproc
 237              		@ args = 16, pretend = 0, frame = 0
 238              		@ frame_needed = 0, uses_anonymous_args = 0
 239              	.LVL27:
 240 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 241              	.LCFI0:
 242              		.cfi_def_cfa_offset 20
 243              		.cfi_offset 4, -20
 244              		.cfi_offset 5, -16
 245              		.cfi_offset 6, -12
 246              		.cfi_offset 7, -8
 247              		.cfi_offset 14, -4
 248 0002 BDF91460 		ldrsh	r6, [sp, #20]
 249 0006 069F     		ldr	r7, [sp, #24]
 250 0008 079C     		ldr	r4, [sp, #28]
 251 000a 089D     		ldr	r5, [sp, #32]
 234:Src/BLDC_controller.c ****   boolean_T rtb_LowerRelop1_c;
 235:Src/BLDC_controller.c ****   boolean_T rtb_UpperRelop_e;
 236:Src/BLDC_controller.c ****   int32_T rtb_Sum1_n;
 237:Src/BLDC_controller.c ****   int32_T q0;
 238:Src/BLDC_controller.c ****   int32_T tmp;
 239:Src/BLDC_controller.c ****   int16_T tmp_0;
 240:Src/BLDC_controller.c **** 
 241:Src/BLDC_controller.c ****   /* Sum: '<S65>/Sum2' incorporates:
 242:Src/BLDC_controller.c ****    *  Product: '<S65>/Divide2'
 243:Src/BLDC_controller.c ****    */
 244:Src/BLDC_controller.c ****   q0 = rtu_err * rtu_I;
 252              		.loc 1 244 0
 253 000c 02FB00F2 		mul	r2, r2, r0
 254              	.LVL28:
 245:Src/BLDC_controller.c ****   if ((q0 < 0) && (rtu_ext_limProt < MIN_int32_T - q0)) {
 255              		.loc 1 245 0
 256 0010 002A     		cmp	r2, #0
 257 0012 19DB     		blt	.L48
 258              	.L23:
 246:Src/BLDC_controller.c ****     q0 = MIN_int32_T;
 247:Src/BLDC_controller.c ****   } else if ((q0 > 0) && (rtu_ext_limProt > MAX_int32_T - q0)) {
 259              		.loc 1 247 0
 260 0014 002A     		cmp	r2, #0
 261 0016 05DD     		ble	.L25
 262              		.loc 1 247 0 is_stmt 0 discriminator 1
 263 0018 6FF0004E 		mvn	lr, #-2147483648
 264 001c AEEB020E 		sub	lr, lr, r2
 265 0020 7745     		cmp	r7, lr
 266 0022 18DC     		bgt	.L36
 267              	.L25:
 248:Src/BLDC_controller.c ****     q0 = MAX_int32_T;
 249:Src/BLDC_controller.c ****   } else {
ARM GAS  /tmp/ccoxnsnM.s 			page 10


 250:Src/BLDC_controller.c ****     q0 += rtu_ext_limProt;
 268              		.loc 1 250 0 is_stmt 1
 269 0024 3A44     		add	r2, r2, r7
 270              	.LVL29:
 271              	.L24:
 251:Src/BLDC_controller.c ****   }
 252:Src/BLDC_controller.c **** 
 253:Src/BLDC_controller.c ****   /* Switch: '<S65>/Switch1' incorporates:
 254:Src/BLDC_controller.c ****    *  Constant: '<S65>/Constant'
 255:Src/BLDC_controller.c ****    *  Sum: '<S65>/Sum2'
 256:Src/BLDC_controller.c ****    *  UnitDelay: '<S65>/UnitDelay1'
 257:Src/BLDC_controller.c ****    */
 258:Src/BLDC_controller.c ****   if (localDW->UnitDelay1_DSTATE) {
 272              		.loc 1 258 0
 273 0026 2F79     		ldrb	r7, [r5, #4]	@ zero_extendqisi2
 274 0028 C7B1     		cbz	r7, .L37
 259:Src/BLDC_controller.c ****     tmp = 0;
 275              		.loc 1 259 0
 276 002a 4FF0000E 		mov	lr, #0
 277              	.L26:
 278              	.LVL30:
 260:Src/BLDC_controller.c ****   } else {
 261:Src/BLDC_controller.c ****     tmp = q0;
 262:Src/BLDC_controller.c ****   }
 263:Src/BLDC_controller.c **** 
 264:Src/BLDC_controller.c ****   /* End of Switch: '<S65>/Switch1' */
 265:Src/BLDC_controller.c **** 
 266:Src/BLDC_controller.c ****   /* Sum: '<S68>/Sum1' incorporates:
 267:Src/BLDC_controller.c ****    *  UnitDelay: '<S68>/UnitDelay'
 268:Src/BLDC_controller.c ****    */
 269:Src/BLDC_controller.c ****   rtb_Sum1_n = tmp + localDW->UnitDelay_DSTATE;
 279              		.loc 1 269 0
 280 002e 2F68     		ldr	r7, [r5]
 281 0030 7744     		add	r7, r7, lr
 282              	.LVL31:
 270:Src/BLDC_controller.c **** 
 271:Src/BLDC_controller.c ****   /* Product: '<S65>/Divide5' */
 272:Src/BLDC_controller.c ****   tmp = (rtu_err * rtu_P) >> 11;
 283              		.loc 1 272 0
 284 0032 00FB01F1 		mul	r1, r0, r1
 285              	.LVL32:
 286 0036 C912     		asrs	r1, r1, #11
 287              	.LVL33:
 273:Src/BLDC_controller.c ****   if (tmp > 32767) {
 288              		.loc 1 273 0
 289 0038 B1F5004F 		cmp	r1, #32768
 290 003c 10DA     		bge	.L38
 274:Src/BLDC_controller.c ****     tmp = 32767;
 275:Src/BLDC_controller.c ****   } else {
 276:Src/BLDC_controller.c ****     if (tmp < -32768) {
 291              		.loc 1 276 0
 292 003e 11F5004F 		cmn	r1, #32768
 293 0042 0FDA     		bge	.L27
 277:Src/BLDC_controller.c ****       tmp = -32768;
 294              		.loc 1 277 0
 295 0044 2449     		ldr	r1, .L50
 296              	.LVL34:
ARM GAS  /tmp/ccoxnsnM.s 			page 11


 297 0046 0DE0     		b	.L27
 298              	.LVL35:
 299              	.L48:
 245:Src/BLDC_controller.c ****     q0 = MIN_int32_T;
 300              		.loc 1 245 0 discriminator 1
 301 0048 C2F1004E 		rsb	lr, r2, #-2147483648
 302 004c BE45     		cmp	lr, r7
 303 004e E1DD     		ble	.L23
 246:Src/BLDC_controller.c ****   } else if ((q0 > 0) && (rtu_ext_limProt > MAX_int32_T - q0)) {
 304              		.loc 1 246 0
 305 0050 4FF00042 		mov	r2, #-2147483648
 306              	.LVL36:
 307 0054 E7E7     		b	.L24
 308              	.LVL37:
 309              	.L36:
 248:Src/BLDC_controller.c ****   } else {
 310              		.loc 1 248 0
 311 0056 6FF00042 		mvn	r2, #-2147483648
 312              	.LVL38:
 313 005a E4E7     		b	.L24
 314              	.LVL39:
 315              	.L37:
 261:Src/BLDC_controller.c ****   }
 316              		.loc 1 261 0
 317 005c 9646     		mov	lr, r2
 318 005e E6E7     		b	.L26
 319              	.LVL40:
 320              	.L38:
 274:Src/BLDC_controller.c ****   } else {
 321              		.loc 1 274 0
 322 0060 47F6FF71 		movw	r1, #32767
 323              	.LVL41:
 324              	.L27:
 278:Src/BLDC_controller.c ****     }
 279:Src/BLDC_controller.c ****   }
 280:Src/BLDC_controller.c **** 
 281:Src/BLDC_controller.c ****   /* Sum: '<S65>/Sum1' incorporates:
 282:Src/BLDC_controller.c ****    *  DataTypeConversion: '<S68>/Data Type Conversion1'
 283:Src/BLDC_controller.c ****    *  Product: '<S65>/Divide5'
 284:Src/BLDC_controller.c ****    */
 285:Src/BLDC_controller.c ****   tmp = (((rtb_Sum1_n >> 16) << 1) + tmp) >> 1;
 325              		.loc 1 285 0
 326 0064 3814     		asrs	r0, r7, #16
 327              	.LVL42:
 328 0066 01EB4001 		add	r1, r1, r0, lsl #1
 329              	.LVL43:
 330 006a 4910     		asrs	r1, r1, #1
 331              	.LVL44:
 286:Src/BLDC_controller.c ****   if (tmp > 32767) {
 332              		.loc 1 286 0
 333 006c B1F5004F 		cmp	r1, #32768
 334 0070 04DA     		bge	.L40
 287:Src/BLDC_controller.c ****     tmp = 32767;
 288:Src/BLDC_controller.c ****   } else {
 289:Src/BLDC_controller.c ****     if (tmp < -32768) {
 335              		.loc 1 289 0
 336 0072 11F5004F 		cmn	r1, #32768
ARM GAS  /tmp/ccoxnsnM.s 			page 12


 337 0076 03DA     		bge	.L28
 290:Src/BLDC_controller.c ****       tmp = -32768;
 338              		.loc 1 290 0
 339 0078 1749     		ldr	r1, .L50
 340              	.LVL45:
 341 007a 01E0     		b	.L28
 342              	.LVL46:
 343              	.L40:
 287:Src/BLDC_controller.c ****     tmp = 32767;
 344              		.loc 1 287 0
 345 007c 47F6FF71 		movw	r1, #32767
 346              	.LVL47:
 347              	.L28:
 291:Src/BLDC_controller.c ****     }
 292:Src/BLDC_controller.c ****   }
 293:Src/BLDC_controller.c **** 
 294:Src/BLDC_controller.c ****   /* RelationalOperator: '<S69>/LowerRelop1' incorporates:
 295:Src/BLDC_controller.c ****    *  Sum: '<S65>/Sum1'
 296:Src/BLDC_controller.c ****    */
 297:Src/BLDC_controller.c ****   rtb_LowerRelop1_c = ((int16_T)tmp > rtu_satMax);
 348              		.loc 1 297 0
 349 0080 09B2     		sxth	r1, r1
 350              	.LVL48:
 298:Src/BLDC_controller.c **** 
 299:Src/BLDC_controller.c ****   /* RelationalOperator: '<S69>/UpperRelop' incorporates:
 300:Src/BLDC_controller.c ****    *  Sum: '<S65>/Sum1'
 301:Src/BLDC_controller.c ****    */
 302:Src/BLDC_controller.c ****   rtb_UpperRelop_e = ((int16_T)tmp < rtu_satMin);
 303:Src/BLDC_controller.c **** 
 304:Src/BLDC_controller.c ****   /* Switch: '<S69>/Switch1' incorporates:
 305:Src/BLDC_controller.c ****    *  Sum: '<S65>/Sum1'
 306:Src/BLDC_controller.c ****    *  Switch: '<S69>/Switch3'
 307:Src/BLDC_controller.c ****    */
 308:Src/BLDC_controller.c ****   if (rtb_LowerRelop1_c) {
 351              		.loc 1 308 0
 352 0082 9942     		cmp	r1, r3
 353 0084 12DD     		ble	.L29
 309:Src/BLDC_controller.c ****     *rty_out = rtu_satMax;
 354              		.loc 1 309 0
 355 0086 2380     		strh	r3, [r4]	@ movhi
 356              	.L30:
 310:Src/BLDC_controller.c ****   } else if (rtb_UpperRelop_e) {
 311:Src/BLDC_controller.c ****     /* Switch: '<S69>/Switch3' */
 312:Src/BLDC_controller.c ****     *rty_out = rtu_satMin;
 313:Src/BLDC_controller.c ****   } else {
 314:Src/BLDC_controller.c ****     *rty_out = (int16_T)tmp;
 315:Src/BLDC_controller.c ****   }
 316:Src/BLDC_controller.c **** 
 317:Src/BLDC_controller.c ****   /* End of Switch: '<S69>/Switch1' */
 318:Src/BLDC_controller.c **** 
 319:Src/BLDC_controller.c ****   /* Signum: '<S67>/SignDeltaU2' incorporates:
 320:Src/BLDC_controller.c ****    *  Sum: '<S65>/Sum2'
 321:Src/BLDC_controller.c ****    */
 322:Src/BLDC_controller.c ****   if (q0 < 0) {
 357              		.loc 1 322 0
 358 0088 002A     		cmp	r2, #0
 359 008a 15DB     		blt	.L42
ARM GAS  /tmp/ccoxnsnM.s 			page 13


 323:Src/BLDC_controller.c ****     q0 = -1;
 324:Src/BLDC_controller.c ****   } else {
 325:Src/BLDC_controller.c ****     q0 = (q0 > 0);
 360              		.loc 1 325 0
 361 008c 002A     		cmp	r2, #0
 362 008e D4BF     		ite	le
 363 0090 0022     		movle	r2, #0
 364              	.LVL49:
 365 0092 0122     		movgt	r2, #1
 366              	.LVL50:
 367              	.L32:
 326:Src/BLDC_controller.c ****   }
 327:Src/BLDC_controller.c **** 
 328:Src/BLDC_controller.c ****   /* End of Signum: '<S67>/SignDeltaU2' */
 329:Src/BLDC_controller.c **** 
 330:Src/BLDC_controller.c ****   /* Signum: '<S67>/SignDeltaU3' incorporates:
 331:Src/BLDC_controller.c ****    *  Sum: '<S65>/Sum1'
 332:Src/BLDC_controller.c ****    */
 333:Src/BLDC_controller.c ****   if ((int16_T)tmp < 0) {
 368              		.loc 1 333 0
 369 0094 0029     		cmp	r1, #0
 370 0096 12DB     		blt	.L43
 334:Src/BLDC_controller.c ****     tmp_0 = -1;
 335:Src/BLDC_controller.c ****   } else {
 336:Src/BLDC_controller.c ****     tmp_0 = (int16_T)((int16_T)tmp > 0);
 371              		.loc 1 336 0
 372 0098 0029     		cmp	r1, #0
 373 009a D4BF     		ite	le
 374 009c 0020     		movle	r0, #0
 375 009e 0120     		movgt	r0, #1
 376              	.LVL51:
 377              	.L33:
 337:Src/BLDC_controller.c ****   }
 338:Src/BLDC_controller.c **** 
 339:Src/BLDC_controller.c ****   /* End of Signum: '<S67>/SignDeltaU3' */
 340:Src/BLDC_controller.c **** 
 341:Src/BLDC_controller.c ****   /* Update for UnitDelay: '<S65>/UnitDelay1' incorporates:
 342:Src/BLDC_controller.c ****    *  DataTypeConversion: '<S67>/DataTypeConv4'
 343:Src/BLDC_controller.c ****    *  Logic: '<S65>/AND1'
 344:Src/BLDC_controller.c ****    *  Logic: '<S67>/AND1'
 345:Src/BLDC_controller.c ****    *  RelationalOperator: '<S67>/Equal1'
 346:Src/BLDC_controller.c ****    */
 347:Src/BLDC_controller.c ****   localDW->UnitDelay1_DSTATE = ((q0 == tmp_0) && (rtb_LowerRelop1_c ||
 378              		.loc 1 347 0
 379 00a0 8242     		cmp	r2, r0
 380 00a2 0FD0     		beq	.L49
 381 00a4 0023     		movs	r3, #0
 382              	.LVL52:
 383              	.L34:
 384              		.loc 1 347 0 is_stmt 0 discriminator 8
 385 00a6 2B71     		strb	r3, [r5, #4]
 348:Src/BLDC_controller.c ****     rtb_UpperRelop_e));
 349:Src/BLDC_controller.c **** 
 350:Src/BLDC_controller.c ****   /* Update for UnitDelay: '<S68>/UnitDelay' */
 351:Src/BLDC_controller.c ****   localDW->UnitDelay_DSTATE = rtb_Sum1_n;
 386              		.loc 1 351 0 is_stmt 1 discriminator 8
 387 00a8 2F60     		str	r7, [r5]
ARM GAS  /tmp/ccoxnsnM.s 			page 14


 388 00aa F0BD     		pop	{r4, r5, r6, r7, pc}
 389              	.LVL53:
 390              	.L29:
 310:Src/BLDC_controller.c ****     /* Switch: '<S69>/Switch3' */
 391              		.loc 1 310 0
 392 00ac B142     		cmp	r1, r6
 393 00ae 01DA     		bge	.L31
 312:Src/BLDC_controller.c ****   } else {
 394              		.loc 1 312 0
 395 00b0 2680     		strh	r6, [r4]	@ movhi
 396 00b2 E9E7     		b	.L30
 397              	.L31:
 314:Src/BLDC_controller.c ****   }
 398              		.loc 1 314 0
 399 00b4 2180     		strh	r1, [r4]	@ movhi
 400 00b6 E7E7     		b	.L30
 401              	.L42:
 323:Src/BLDC_controller.c ****   } else {
 402              		.loc 1 323 0
 403 00b8 4FF0FF32 		mov	r2, #-1
 404              	.LVL54:
 405 00bc EAE7     		b	.L32
 406              	.LVL55:
 407              	.L43:
 334:Src/BLDC_controller.c ****   } else {
 408              		.loc 1 334 0
 409 00be 4FF0FF30 		mov	r0, #-1
 410 00c2 EDE7     		b	.L33
 411              	.LVL56:
 412              	.L49:
 347:Src/BLDC_controller.c ****     rtb_UpperRelop_e));
 413              		.loc 1 347 0 discriminator 1
 414 00c4 9942     		cmp	r1, r3
 415 00c6 03DC     		bgt	.L45
 347:Src/BLDC_controller.c ****     rtb_UpperRelop_e));
 416              		.loc 1 347 0 is_stmt 0 discriminator 4
 417 00c8 B142     		cmp	r1, r6
 418 00ca 03DB     		blt	.L46
 347:Src/BLDC_controller.c ****     rtb_UpperRelop_e));
 419              		.loc 1 347 0
 420 00cc 0023     		movs	r3, #0
 421              	.LVL57:
 422 00ce EAE7     		b	.L34
 423              	.LVL58:
 424              	.L45:
 425 00d0 0123     		movs	r3, #1
 426              	.LVL59:
 427 00d2 E8E7     		b	.L34
 428              	.LVL60:
 429              	.L46:
 430 00d4 0123     		movs	r3, #1
 431              	.LVL61:
 432 00d6 E6E7     		b	.L34
 433              	.L51:
 434              		.align	2
 435              	.L50:
 436 00d8 0080FFFF 		.word	-32768
ARM GAS  /tmp/ccoxnsnM.s 			page 15


 437              		.cfi_endproc
 438              	.LFE5:
 440              		.section	.text.Low_Pass_Filter_Reset,"ax",%progbits
 441              		.align	1
 442              		.global	Low_Pass_Filter_Reset
 443              		.syntax unified
 444              		.thumb
 445              		.thumb_func
 446              		.fpu softvfp
 448              	Low_Pass_Filter_Reset:
 449              	.LFB6:
 352:Src/BLDC_controller.c **** }
 353:Src/BLDC_controller.c **** 
 354:Src/BLDC_controller.c **** /* System reset for atomic system: '<S41>/Low_Pass_Filter' */
 355:Src/BLDC_controller.c **** void Low_Pass_Filter_Reset(DW_Low_Pass_Filter *localDW)
 356:Src/BLDC_controller.c **** {
 450              		.loc 1 356 0 is_stmt 1
 451              		.cfi_startproc
 452              		@ args = 0, pretend = 0, frame = 0
 453              		@ frame_needed = 0, uses_anonymous_args = 0
 454              		@ link register save eliminated.
 455              	.LVL62:
 357:Src/BLDC_controller.c ****   /* InitializeConditions for UnitDelay: '<S50>/UnitDelay1' */
 358:Src/BLDC_controller.c ****   localDW->UnitDelay1_DSTATE[0] = 0;
 456              		.loc 1 358 0
 457 0000 0023     		movs	r3, #0
 458 0002 0360     		str	r3, [r0]
 359:Src/BLDC_controller.c ****   localDW->UnitDelay1_DSTATE[1] = 0;
 459              		.loc 1 359 0
 460 0004 4360     		str	r3, [r0, #4]
 461 0006 7047     		bx	lr
 462              		.cfi_endproc
 463              	.LFE6:
 465              		.section	.text.Low_Pass_Filter,"ax",%progbits
 466              		.align	1
 467              		.global	Low_Pass_Filter
 468              		.syntax unified
 469              		.thumb
 470              		.thumb_func
 471              		.fpu softvfp
 473              	Low_Pass_Filter:
 474              	.LFB7:
 360:Src/BLDC_controller.c **** }
 361:Src/BLDC_controller.c **** 
 362:Src/BLDC_controller.c **** /* Output and update for atomic system: '<S41>/Low_Pass_Filter' */
 363:Src/BLDC_controller.c **** void Low_Pass_Filter(const int16_T rtu_u[2], uint16_T rtu_coef, int16_T rty_y[2],
 364:Src/BLDC_controller.c ****                      DW_Low_Pass_Filter *localDW)
 365:Src/BLDC_controller.c **** {
 475              		.loc 1 365 0
 476              		.cfi_startproc
 477              		@ args = 0, pretend = 0, frame = 0
 478              		@ frame_needed = 0, uses_anonymous_args = 0
 479              		@ link register save eliminated.
 480              	.LVL63:
 481 0000 30B4     		push	{r4, r5}
 482              	.LCFI1:
 483              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccoxnsnM.s 			page 16


 484              		.cfi_offset 4, -8
 485              		.cfi_offset 5, -4
 366:Src/BLDC_controller.c ****   int32_T rtb_Sum3_g;
 367:Src/BLDC_controller.c **** 
 368:Src/BLDC_controller.c ****   /* Sum: '<S50>/Sum2' incorporates:
 369:Src/BLDC_controller.c ****    *  UnitDelay: '<S50>/UnitDelay1'
 370:Src/BLDC_controller.c ****    */
 371:Src/BLDC_controller.c ****   rtb_Sum3_g = rtu_u[0] - (localDW->UnitDelay1_DSTATE[0] >> 16);
 486              		.loc 1 371 0
 487 0002 B0F90040 		ldrsh	r4, [r0]
 488 0006 1D68     		ldr	r5, [r3]
 489 0008 A4EB2544 		sub	r4, r4, r5, asr #16
 490              	.LVL64:
 372:Src/BLDC_controller.c ****   if (rtb_Sum3_g > 32767) {
 491              		.loc 1 372 0
 492 000c B4F5004F 		cmp	r4, #32768
 493 0010 04DA     		bge	.L56
 373:Src/BLDC_controller.c ****     rtb_Sum3_g = 32767;
 374:Src/BLDC_controller.c ****   } else {
 375:Src/BLDC_controller.c ****     if (rtb_Sum3_g < -32768) {
 494              		.loc 1 375 0
 495 0012 14F5004F 		cmn	r4, #32768
 496 0016 03DA     		bge	.L54
 376:Src/BLDC_controller.c ****       rtb_Sum3_g = -32768;
 497              		.loc 1 376 0
 498 0018 0F4C     		ldr	r4, .L61
 499              	.LVL65:
 500 001a 01E0     		b	.L54
 501              	.LVL66:
 502              	.L56:
 373:Src/BLDC_controller.c ****     rtb_Sum3_g = 32767;
 503              		.loc 1 373 0
 504 001c 47F6FF74 		movw	r4, #32767
 505              	.LVL67:
 506              	.L54:
 377:Src/BLDC_controller.c ****     }
 378:Src/BLDC_controller.c ****   }
 379:Src/BLDC_controller.c **** 
 380:Src/BLDC_controller.c ****   /* Sum: '<S50>/Sum3' incorporates:
 381:Src/BLDC_controller.c ****    *  Product: '<S50>/Divide3'
 382:Src/BLDC_controller.c ****    *  Sum: '<S50>/Sum2'
 383:Src/BLDC_controller.c ****    *  UnitDelay: '<S50>/UnitDelay1'
 384:Src/BLDC_controller.c ****    */
 385:Src/BLDC_controller.c ****   rtb_Sum3_g = rtu_coef * rtb_Sum3_g + localDW->UnitDelay1_DSTATE[0];
 507              		.loc 1 385 0
 508 0020 01FB0454 		mla	r4, r1, r4, r5
 509              	.LVL68:
 386:Src/BLDC_controller.c **** 
 387:Src/BLDC_controller.c ****   /* DataTypeConversion: '<S50>/Data Type Conversion' */
 388:Src/BLDC_controller.c ****   rty_y[0] = (int16_T)(rtb_Sum3_g >> 16);
 510              		.loc 1 388 0
 511 0024 2514     		asrs	r5, r4, #16
 512 0026 1580     		strh	r5, [r2]	@ movhi
 389:Src/BLDC_controller.c **** 
 390:Src/BLDC_controller.c ****   /* Update for UnitDelay: '<S50>/UnitDelay1' */
 391:Src/BLDC_controller.c ****   localDW->UnitDelay1_DSTATE[0] = rtb_Sum3_g;
 513              		.loc 1 391 0
ARM GAS  /tmp/ccoxnsnM.s 			page 17


 514 0028 1C60     		str	r4, [r3]
 392:Src/BLDC_controller.c **** 
 393:Src/BLDC_controller.c ****   /* Sum: '<S50>/Sum2' incorporates:
 394:Src/BLDC_controller.c ****    *  UnitDelay: '<S50>/UnitDelay1'
 395:Src/BLDC_controller.c ****    */
 396:Src/BLDC_controller.c ****   rtb_Sum3_g = rtu_u[1] - (localDW->UnitDelay1_DSTATE[1] >> 16);
 515              		.loc 1 396 0
 516 002a B0F90240 		ldrsh	r4, [r0, #2]
 517              	.LVL69:
 518 002e 5D68     		ldr	r5, [r3, #4]
 519 0030 A4EB2540 		sub	r0, r4, r5, asr #16
 520              	.LVL70:
 397:Src/BLDC_controller.c ****   if (rtb_Sum3_g > 32767) {
 521              		.loc 1 397 0
 522 0034 B0F5004F 		cmp	r0, #32768
 523 0038 04DA     		bge	.L58
 398:Src/BLDC_controller.c ****     rtb_Sum3_g = 32767;
 399:Src/BLDC_controller.c ****   } else {
 400:Src/BLDC_controller.c ****     if (rtb_Sum3_g < -32768) {
 524              		.loc 1 400 0
 525 003a 10F5004F 		cmn	r0, #32768
 526 003e 03DA     		bge	.L55
 401:Src/BLDC_controller.c ****       rtb_Sum3_g = -32768;
 527              		.loc 1 401 0
 528 0040 0548     		ldr	r0, .L61
 529              	.LVL71:
 530 0042 01E0     		b	.L55
 531              	.LVL72:
 532              	.L58:
 398:Src/BLDC_controller.c ****     rtb_Sum3_g = 32767;
 533              		.loc 1 398 0
 534 0044 47F6FF70 		movw	r0, #32767
 535              	.LVL73:
 536              	.L55:
 402:Src/BLDC_controller.c ****     }
 403:Src/BLDC_controller.c ****   }
 404:Src/BLDC_controller.c **** 
 405:Src/BLDC_controller.c ****   /* Sum: '<S50>/Sum3' incorporates:
 406:Src/BLDC_controller.c ****    *  Product: '<S50>/Divide3'
 407:Src/BLDC_controller.c ****    *  Sum: '<S50>/Sum2'
 408:Src/BLDC_controller.c ****    *  UnitDelay: '<S50>/UnitDelay1'
 409:Src/BLDC_controller.c ****    */
 410:Src/BLDC_controller.c ****   rtb_Sum3_g = rtu_coef * rtb_Sum3_g + localDW->UnitDelay1_DSTATE[1];
 537              		.loc 1 410 0
 538 0048 01FB0050 		mla	r0, r1, r0, r5
 539              	.LVL74:
 411:Src/BLDC_controller.c **** 
 412:Src/BLDC_controller.c ****   /* DataTypeConversion: '<S50>/Data Type Conversion' */
 413:Src/BLDC_controller.c ****   rty_y[1] = (int16_T)(rtb_Sum3_g >> 16);
 540              		.loc 1 413 0
 541 004c 0114     		asrs	r1, r0, #16
 542              	.LVL75:
 543 004e 5180     		strh	r1, [r2, #2]	@ movhi
 414:Src/BLDC_controller.c **** 
 415:Src/BLDC_controller.c ****   /* Update for UnitDelay: '<S50>/UnitDelay1' */
 416:Src/BLDC_controller.c ****   localDW->UnitDelay1_DSTATE[1] = rtb_Sum3_g;
 544              		.loc 1 416 0
ARM GAS  /tmp/ccoxnsnM.s 			page 18


 545 0050 5860     		str	r0, [r3, #4]
 417:Src/BLDC_controller.c **** }
 546              		.loc 1 417 0
 547 0052 30BC     		pop	{r4, r5}
 548              	.LCFI2:
 549              		.cfi_restore 5
 550              		.cfi_restore 4
 551              		.cfi_def_cfa_offset 0
 552 0054 7047     		bx	lr
 553              	.L62:
 554 0056 00BF     		.align	2
 555              	.L61:
 556 0058 0080FFFF 		.word	-32768
 557              		.cfi_endproc
 558              	.LFE7:
 560              		.section	.text.I_backCalc_fixdt_Init,"ax",%progbits
 561              		.align	1
 562              		.global	I_backCalc_fixdt_Init
 563              		.syntax unified
 564              		.thumb
 565              		.thumb_func
 566              		.fpu softvfp
 568              	I_backCalc_fixdt_Init:
 569              	.LFB8:
 418:Src/BLDC_controller.c **** 
 419:Src/BLDC_controller.c **** /*
 420:Src/BLDC_controller.c ****  * System initialize for atomic system:
 421:Src/BLDC_controller.c ****  *    '<S73>/I_backCalc_fixdt'
 422:Src/BLDC_controller.c ****  *    '<S73>/I_backCalc_fixdt1'
 423:Src/BLDC_controller.c ****  *    '<S72>/I_backCalc_fixdt'
 424:Src/BLDC_controller.c ****  */
 425:Src/BLDC_controller.c **** void I_backCalc_fixdt_Init(DW_I_backCalc_fixdt *localDW, int32_T rtp_yInit)
 426:Src/BLDC_controller.c **** {
 570              		.loc 1 426 0
 571              		.cfi_startproc
 572              		@ args = 0, pretend = 0, frame = 0
 573              		@ frame_needed = 0, uses_anonymous_args = 0
 574              		@ link register save eliminated.
 575              	.LVL76:
 427:Src/BLDC_controller.c ****   /* InitializeConditions for UnitDelay: '<S80>/UnitDelay' */
 428:Src/BLDC_controller.c ****   localDW->UnitDelay_DSTATE_h = rtp_yInit;
 576              		.loc 1 428 0
 577 0000 4160     		str	r1, [r0, #4]
 578 0002 7047     		bx	lr
 579              		.cfi_endproc
 580              	.LFE8:
 582              		.section	.text.I_backCalc_fixdt,"ax",%progbits
 583              		.align	1
 584              		.global	I_backCalc_fixdt
 585              		.syntax unified
 586              		.thumb
 587              		.thumb_func
 588              		.fpu softvfp
 590              	I_backCalc_fixdt:
 591              	.LFB9:
 429:Src/BLDC_controller.c **** }
 430:Src/BLDC_controller.c **** 
ARM GAS  /tmp/ccoxnsnM.s 			page 19


 431:Src/BLDC_controller.c **** /*
 432:Src/BLDC_controller.c ****  * Output and update for atomic system:
 433:Src/BLDC_controller.c ****  *    '<S73>/I_backCalc_fixdt'
 434:Src/BLDC_controller.c ****  *    '<S73>/I_backCalc_fixdt1'
 435:Src/BLDC_controller.c ****  *    '<S72>/I_backCalc_fixdt'
 436:Src/BLDC_controller.c ****  */
 437:Src/BLDC_controller.c **** void I_backCalc_fixdt(int16_T rtu_err, uint16_T rtu_I, uint16_T rtu_Kb, int16_T
 438:Src/BLDC_controller.c ****                       rtu_satMax, int16_T rtu_satMin, int16_T *rty_out,
 439:Src/BLDC_controller.c ****                       DW_I_backCalc_fixdt *localDW)
 440:Src/BLDC_controller.c **** {
 592              		.loc 1 440 0
 593              		.cfi_startproc
 594              		@ args = 12, pretend = 0, frame = 0
 595              		@ frame_needed = 0, uses_anonymous_args = 0
 596              		@ link register save eliminated.
 597              	.LVL77:
 598 0000 F0B4     		push	{r4, r5, r6, r7}
 599              	.LCFI3:
 600              		.cfi_def_cfa_offset 16
 601              		.cfi_offset 4, -16
 602              		.cfi_offset 5, -12
 603              		.cfi_offset 6, -8
 604              		.cfi_offset 7, -4
 605 0002 BDF91070 		ldrsh	r7, [sp, #16]
 606 0006 059D     		ldr	r5, [sp, #20]
 607 0008 069C     		ldr	r4, [sp, #24]
 441:Src/BLDC_controller.c ****   int32_T rtb_Sum1_e0;
 442:Src/BLDC_controller.c ****   int16_T rtb_DataTypeConversion1_no;
 443:Src/BLDC_controller.c **** 
 444:Src/BLDC_controller.c ****   /* Sum: '<S78>/Sum2' incorporates:
 445:Src/BLDC_controller.c ****    *  Product: '<S78>/Divide2'
 446:Src/BLDC_controller.c ****    *  UnitDelay: '<S78>/UnitDelay'
 447:Src/BLDC_controller.c ****    */
 448:Src/BLDC_controller.c ****   rtb_Sum1_e0 = (rtu_err * rtu_I) >> 4;
 608              		.loc 1 448 0
 609 000a 01FB00F1 		mul	r1, r1, r0
 610              	.LVL78:
 449:Src/BLDC_controller.c ****   if ((rtb_Sum1_e0 < 0) && (localDW->UnitDelay_DSTATE < MIN_int32_T
 611              		.loc 1 449 0
 612 000e 0911     		asrs	r1, r1, #4
 613              	.LVL79:
 614 0010 13D4     		bmi	.L74
 615              	.LVL80:
 616              	.L65:
 450:Src/BLDC_controller.c ****        - rtb_Sum1_e0)) {
 451:Src/BLDC_controller.c ****     rtb_Sum1_e0 = MIN_int32_T;
 452:Src/BLDC_controller.c ****   } else if ((rtb_Sum1_e0 > 0) && (localDW->UnitDelay_DSTATE > MAX_int32_T
 617              		.loc 1 452 0
 618 0012 0029     		cmp	r1, #0
 619 0014 05DD     		ble	.L67
 620              		.loc 1 452 0 is_stmt 0 discriminator 1
 621 0016 2668     		ldr	r6, [r4]
 453:Src/BLDC_controller.c ****               - rtb_Sum1_e0)) {
 622              		.loc 1 453 0 is_stmt 1 discriminator 1
 623 0018 6FF00040 		mvn	r0, #-2147483648
 624 001c 401A     		subs	r0, r0, r1
 452:Src/BLDC_controller.c ****               - rtb_Sum1_e0)) {
ARM GAS  /tmp/ccoxnsnM.s 			page 20


 625              		.loc 1 452 0 discriminator 1
 626 001e 8642     		cmp	r6, r0
 627 0020 13DC     		bgt	.L72
 628              	.L67:
 454:Src/BLDC_controller.c ****     rtb_Sum1_e0 = MAX_int32_T;
 455:Src/BLDC_controller.c ****   } else {
 456:Src/BLDC_controller.c ****     rtb_Sum1_e0 += localDW->UnitDelay_DSTATE;
 629              		.loc 1 456 0
 630 0022 2068     		ldr	r0, [r4]
 631 0024 0144     		add	r1, r1, r0
 632              	.LVL81:
 633              	.L66:
 457:Src/BLDC_controller.c ****   }
 458:Src/BLDC_controller.c **** 
 459:Src/BLDC_controller.c ****   /* End of Sum: '<S78>/Sum2' */
 460:Src/BLDC_controller.c **** 
 461:Src/BLDC_controller.c ****   /* Sum: '<S80>/Sum1' incorporates:
 462:Src/BLDC_controller.c ****    *  UnitDelay: '<S80>/UnitDelay'
 463:Src/BLDC_controller.c ****    */
 464:Src/BLDC_controller.c ****   rtb_Sum1_e0 += localDW->UnitDelay_DSTATE_h;
 634              		.loc 1 464 0
 635 0026 6068     		ldr	r0, [r4, #4]
 636 0028 0144     		add	r1, r1, r0
 637              	.LVL82:
 465:Src/BLDC_controller.c **** 
 466:Src/BLDC_controller.c ****   /* DataTypeConversion: '<S80>/Data Type Conversion1' */
 467:Src/BLDC_controller.c ****   rtb_DataTypeConversion1_no = (int16_T)(rtb_Sum1_e0 >> 12);
 638              		.loc 1 467 0
 639 002a 0813     		asrs	r0, r1, #12
 640 002c 06B2     		sxth	r6, r0
 641              	.LVL83:
 468:Src/BLDC_controller.c **** 
 469:Src/BLDC_controller.c ****   /* Switch: '<S81>/Switch2' incorporates:
 470:Src/BLDC_controller.c ****    *  RelationalOperator: '<S81>/LowerRelop1'
 471:Src/BLDC_controller.c ****    *  RelationalOperator: '<S81>/UpperRelop'
 472:Src/BLDC_controller.c ****    *  Switch: '<S81>/Switch'
 473:Src/BLDC_controller.c ****    */
 474:Src/BLDC_controller.c ****   if (rtb_DataTypeConversion1_no > rtu_satMax) {
 642              		.loc 1 474 0
 643 002e 9E42     		cmp	r6, r3
 644 0030 0EDC     		bgt	.L75
 475:Src/BLDC_controller.c ****     *rty_out = rtu_satMax;
 476:Src/BLDC_controller.c ****   } else if (rtb_DataTypeConversion1_no < rtu_satMin) {
 645              		.loc 1 476 0
 646 0032 BE42     		cmp	r6, r7
 647 0034 16DB     		blt	.L76
 477:Src/BLDC_controller.c ****     /* Switch: '<S81>/Switch' */
 478:Src/BLDC_controller.c ****     *rty_out = rtu_satMin;
 479:Src/BLDC_controller.c ****   } else {
 480:Src/BLDC_controller.c ****     *rty_out = rtb_DataTypeConversion1_no;
 648              		.loc 1 480 0
 649 0036 2E80     		strh	r6, [r5]	@ movhi
 650 0038 0BE0     		b	.L69
 651              	.LVL84:
 652              	.L74:
 449:Src/BLDC_controller.c ****        - rtb_Sum1_e0)) {
 653              		.loc 1 449 0 discriminator 1
ARM GAS  /tmp/ccoxnsnM.s 			page 21


 654 003a 2668     		ldr	r6, [r4]
 450:Src/BLDC_controller.c ****     rtb_Sum1_e0 = MIN_int32_T;
 655              		.loc 1 450 0 discriminator 1
 656 003c C1F10040 		rsb	r0, r1, #-2147483648
 657              	.LVL85:
 449:Src/BLDC_controller.c ****        - rtb_Sum1_e0)) {
 658              		.loc 1 449 0 discriminator 1
 659 0040 8642     		cmp	r6, r0
 660 0042 E6DA     		bge	.L65
 451:Src/BLDC_controller.c ****   } else if ((rtb_Sum1_e0 > 0) && (localDW->UnitDelay_DSTATE > MAX_int32_T
 661              		.loc 1 451 0
 662 0044 4FF00041 		mov	r1, #-2147483648
 663              	.LVL86:
 664 0048 EDE7     		b	.L66
 665              	.LVL87:
 666              	.L72:
 454:Src/BLDC_controller.c ****   } else {
 667              		.loc 1 454 0
 668 004a 6FF00041 		mvn	r1, #-2147483648
 669              	.LVL88:
 670 004e EAE7     		b	.L66
 671              	.LVL89:
 672              	.L75:
 475:Src/BLDC_controller.c ****   } else if (rtb_DataTypeConversion1_no < rtu_satMin) {
 673              		.loc 1 475 0
 674 0050 2B80     		strh	r3, [r5]	@ movhi
 675              	.L69:
 481:Src/BLDC_controller.c ****   }
 482:Src/BLDC_controller.c **** 
 483:Src/BLDC_controller.c ****   /* End of Switch: '<S81>/Switch2' */
 484:Src/BLDC_controller.c **** 
 485:Src/BLDC_controller.c ****   /* Update for UnitDelay: '<S78>/UnitDelay' incorporates:
 486:Src/BLDC_controller.c ****    *  Product: '<S78>/Divide1'
 487:Src/BLDC_controller.c ****    *  Sum: '<S78>/Sum3'
 488:Src/BLDC_controller.c ****    */
 489:Src/BLDC_controller.c ****   localDW->UnitDelay_DSTATE = (int16_T)(*rty_out - rtb_DataTypeConversion1_no) *
 676              		.loc 1 489 0
 677 0052 2B88     		ldrh	r3, [r5]
 678              	.LVL90:
 679 0054 1B1A     		subs	r3, r3, r0
 680 0056 1BB2     		sxth	r3, r3
 681 0058 03FB02F2 		mul	r2, r3, r2
 682              	.LVL91:
 683 005c 2260     		str	r2, [r4]
 490:Src/BLDC_controller.c ****     rtu_Kb;
 491:Src/BLDC_controller.c **** 
 492:Src/BLDC_controller.c ****   /* Update for UnitDelay: '<S80>/UnitDelay' */
 493:Src/BLDC_controller.c ****   localDW->UnitDelay_DSTATE_h = rtb_Sum1_e0;
 684              		.loc 1 493 0
 685 005e 6160     		str	r1, [r4, #4]
 494:Src/BLDC_controller.c **** }
 686              		.loc 1 494 0
 687 0060 F0BC     		pop	{r4, r5, r6, r7}
 688              	.LCFI4:
 689              		.cfi_remember_state
 690              		.cfi_restore 7
 691              		.cfi_restore 6
ARM GAS  /tmp/ccoxnsnM.s 			page 22


 692              		.cfi_restore 5
 693              		.cfi_restore 4
 694              		.cfi_def_cfa_offset 0
 695              	.LVL92:
 696 0062 7047     		bx	lr
 697              	.LVL93:
 698              	.L76:
 699              	.LCFI5:
 700              		.cfi_restore_state
 478:Src/BLDC_controller.c ****   } else {
 701              		.loc 1 478 0
 702 0064 2F80     		strh	r7, [r5]	@ movhi
 703 0066 F4E7     		b	.L69
 704              		.cfi_endproc
 705              	.LFE9:
 707              		.section	.text.Counter_b_Init,"ax",%progbits
 708              		.align	1
 709              		.global	Counter_b_Init
 710              		.syntax unified
 711              		.thumb
 712              		.thumb_func
 713              		.fpu softvfp
 715              	Counter_b_Init:
 716              	.LFB10:
 495:Src/BLDC_controller.c **** 
 496:Src/BLDC_controller.c **** /*
 497:Src/BLDC_controller.c ****  * System initialize for atomic system:
 498:Src/BLDC_controller.c ****  *    '<S21>/Counter'
 499:Src/BLDC_controller.c ****  *    '<S20>/Counter'
 500:Src/BLDC_controller.c ****  */
 501:Src/BLDC_controller.c **** void Counter_b_Init(DW_Counter_l *localDW, uint16_T rtp_z_cntInit)
 502:Src/BLDC_controller.c **** {
 717              		.loc 1 502 0
 718              		.cfi_startproc
 719              		@ args = 0, pretend = 0, frame = 0
 720              		@ frame_needed = 0, uses_anonymous_args = 0
 721              		@ link register save eliminated.
 722              	.LVL94:
 503:Src/BLDC_controller.c ****   /* InitializeConditions for UnitDelay: '<S26>/UnitDelay' */
 504:Src/BLDC_controller.c ****   localDW->UnitDelay_DSTATE = rtp_z_cntInit;
 723              		.loc 1 504 0
 724 0000 0180     		strh	r1, [r0]	@ movhi
 725 0002 7047     		bx	lr
 726              		.cfi_endproc
 727              	.LFE10:
 729              		.section	.text.Counter_i,"ax",%progbits
 730              		.align	1
 731              		.global	Counter_i
 732              		.syntax unified
 733              		.thumb
 734              		.thumb_func
 735              		.fpu softvfp
 737              	Counter_i:
 738              	.LFB11:
 505:Src/BLDC_controller.c **** }
 506:Src/BLDC_controller.c **** 
 507:Src/BLDC_controller.c **** /*
ARM GAS  /tmp/ccoxnsnM.s 			page 23


 508:Src/BLDC_controller.c ****  * Output and update for atomic system:
 509:Src/BLDC_controller.c ****  *    '<S21>/Counter'
 510:Src/BLDC_controller.c ****  *    '<S20>/Counter'
 511:Src/BLDC_controller.c ****  */
 512:Src/BLDC_controller.c **** uint16_T Counter_i(uint16_T rtu_inc, uint16_T rtu_max, boolean_T rtu_rst,
 513:Src/BLDC_controller.c ****                    DW_Counter_l *localDW)
 514:Src/BLDC_controller.c **** {
 739              		.loc 1 514 0
 740              		.cfi_startproc
 741              		@ args = 0, pretend = 0, frame = 0
 742              		@ frame_needed = 0, uses_anonymous_args = 0
 743              		@ link register save eliminated.
 744              	.LVL95:
 515:Src/BLDC_controller.c ****   uint16_T rtu_rst_0;
 516:Src/BLDC_controller.c ****   uint16_T rty_cnt_0;
 517:Src/BLDC_controller.c **** 
 518:Src/BLDC_controller.c ****   /* Switch: '<S26>/Switch1' incorporates:
 519:Src/BLDC_controller.c ****    *  Constant: '<S26>/Constant23'
 520:Src/BLDC_controller.c ****    *  UnitDelay: '<S26>/UnitDelay'
 521:Src/BLDC_controller.c ****    */
 522:Src/BLDC_controller.c ****   if (rtu_rst) {
 745              		.loc 1 522 0
 746 0000 32B9     		cbnz	r2, .L82
 523:Src/BLDC_controller.c ****     rtu_rst_0 = 0U;
 524:Src/BLDC_controller.c ****   } else {
 525:Src/BLDC_controller.c ****     rtu_rst_0 = localDW->UnitDelay_DSTATE;
 747              		.loc 1 525 0
 748 0002 1A88     		ldrh	r2, [r3]
 749              	.LVL96:
 750              	.L79:
 526:Src/BLDC_controller.c ****   }
 527:Src/BLDC_controller.c **** 
 528:Src/BLDC_controller.c ****   /* End of Switch: '<S26>/Switch1' */
 529:Src/BLDC_controller.c **** 
 530:Src/BLDC_controller.c ****   /* Sum: '<S25>/Sum1' */
 531:Src/BLDC_controller.c ****   rty_cnt_0 = (uint16_T)((uint32_T)rtu_inc + rtu_rst_0);
 751              		.loc 1 531 0
 752 0004 1044     		add	r0, r0, r2
 753              	.LVL97:
 754 0006 80B2     		uxth	r0, r0
 755              	.LVL98:
 532:Src/BLDC_controller.c **** 
 533:Src/BLDC_controller.c ****   /* MinMax: '<S25>/MinMax' */
 534:Src/BLDC_controller.c ****   if (rty_cnt_0 < rtu_max) {
 756              		.loc 1 534 0
 757 0008 8842     		cmp	r0, r1
 758 000a 03D3     		bcc	.L83
 535:Src/BLDC_controller.c ****     /* Update for UnitDelay: '<S26>/UnitDelay' */
 536:Src/BLDC_controller.c ****     localDW->UnitDelay_DSTATE = rty_cnt_0;
 537:Src/BLDC_controller.c ****   } else {
 538:Src/BLDC_controller.c ****     /* Update for UnitDelay: '<S26>/UnitDelay' */
 539:Src/BLDC_controller.c ****     localDW->UnitDelay_DSTATE = rtu_max;
 759              		.loc 1 539 0
 760 000c 1980     		strh	r1, [r3]	@ movhi
 540:Src/BLDC_controller.c ****   }
 541:Src/BLDC_controller.c **** 
 542:Src/BLDC_controller.c ****   /* End of MinMax: '<S25>/MinMax' */
ARM GAS  /tmp/ccoxnsnM.s 			page 24


 543:Src/BLDC_controller.c ****   return rty_cnt_0;
 544:Src/BLDC_controller.c **** }
 761              		.loc 1 544 0
 762 000e 7047     		bx	lr
 763              	.LVL99:
 764              	.L82:
 523:Src/BLDC_controller.c ****   } else {
 765              		.loc 1 523 0
 766 0010 0022     		movs	r2, #0
 767              	.LVL100:
 768 0012 F7E7     		b	.L79
 769              	.LVL101:
 770              	.L83:
 536:Src/BLDC_controller.c ****   } else {
 771              		.loc 1 536 0
 772 0014 1880     		strh	r0, [r3]	@ movhi
 773 0016 7047     		bx	lr
 774              		.cfi_endproc
 775              	.LFE11:
 777              		.section	.text.either_edge,"ax",%progbits
 778              		.align	1
 779              		.global	either_edge
 780              		.syntax unified
 781              		.thumb
 782              		.thumb_func
 783              		.fpu softvfp
 785              	either_edge:
 786              	.LFB12:
 545:Src/BLDC_controller.c **** 
 546:Src/BLDC_controller.c **** /*
 547:Src/BLDC_controller.c ****  * Output and update for atomic system:
 548:Src/BLDC_controller.c ****  *    '<S17>/either_edge'
 549:Src/BLDC_controller.c ****  *    '<S3>/either_edge'
 550:Src/BLDC_controller.c ****  */
 551:Src/BLDC_controller.c **** boolean_T either_edge(boolean_T rtu_u, DW_either_edge *localDW)
 552:Src/BLDC_controller.c **** {
 787              		.loc 1 552 0
 788              		.cfi_startproc
 789              		@ args = 0, pretend = 0, frame = 0
 790              		@ frame_needed = 0, uses_anonymous_args = 0
 791              		@ link register save eliminated.
 792              	.LVL102:
 553:Src/BLDC_controller.c ****   boolean_T rty_y_0;
 554:Src/BLDC_controller.c **** 
 555:Src/BLDC_controller.c ****   /* RelationalOperator: '<S22>/Relational Operator' incorporates:
 556:Src/BLDC_controller.c ****    *  UnitDelay: '<S22>/UnitDelay'
 557:Src/BLDC_controller.c ****    */
 558:Src/BLDC_controller.c ****   rty_y_0 = (rtu_u != localDW->UnitDelay_DSTATE);
 793              		.loc 1 558 0
 794 0000 0B78     		ldrb	r3, [r1]	@ zero_extendqisi2
 795              	.LVL103:
 559:Src/BLDC_controller.c **** 
 560:Src/BLDC_controller.c ****   /* Update for UnitDelay: '<S22>/UnitDelay' */
 561:Src/BLDC_controller.c ****   localDW->UnitDelay_DSTATE = rtu_u;
 796              		.loc 1 561 0
 797 0002 0870     		strb	r0, [r1]
 562:Src/BLDC_controller.c ****   return rty_y_0;
ARM GAS  /tmp/ccoxnsnM.s 			page 25


 563:Src/BLDC_controller.c **** }
 798              		.loc 1 563 0
 799 0004 181A     		subs	r0, r3, r0
 800              	.LVL104:
 801 0006 18BF     		it	ne
 802 0008 0120     		movne	r0, #1
 803 000a 7047     		bx	lr
 804              		.cfi_endproc
 805              	.LFE12:
 807              		.section	.text.Debounce_Filter_Init,"ax",%progbits
 808              		.align	1
 809              		.global	Debounce_Filter_Init
 810              		.syntax unified
 811              		.thumb
 812              		.thumb_func
 813              		.fpu softvfp
 815              	Debounce_Filter_Init:
 816              	.LFB13:
 564:Src/BLDC_controller.c **** 
 565:Src/BLDC_controller.c **** /* System initialize for atomic system: '<S3>/Debounce_Filter' */
 566:Src/BLDC_controller.c **** void Debounce_Filter_Init(DW_Debounce_Filter *localDW)
 567:Src/BLDC_controller.c **** {
 817              		.loc 1 567 0
 818              		.cfi_startproc
 819              		@ args = 0, pretend = 0, frame = 0
 820              		@ frame_needed = 0, uses_anonymous_args = 0
 821              	.LVL105:
 822 0000 10B5     		push	{r4, lr}
 823              	.LCFI6:
 824              		.cfi_def_cfa_offset 8
 825              		.cfi_offset 4, -8
 826              		.cfi_offset 14, -4
 827 0002 0446     		mov	r4, r0
 568:Src/BLDC_controller.c ****   /* SystemInitialize for IfAction SubSystem: '<S17>/Qualification' */
 569:Src/BLDC_controller.c **** 
 570:Src/BLDC_controller.c ****   /* SystemInitialize for Atomic SubSystem: '<S21>/Counter' */
 571:Src/BLDC_controller.c ****   Counter_b_Init(&localDW->Counter_i0, 0U);
 828              		.loc 1 571 0
 829 0004 0021     		movs	r1, #0
 830 0006 0430     		adds	r0, r0, #4
 831              	.LVL106:
 832 0008 FFF7FEFF 		bl	Counter_b_Init
 833              	.LVL107:
 572:Src/BLDC_controller.c **** 
 573:Src/BLDC_controller.c ****   /* End of SystemInitialize for SubSystem: '<S21>/Counter' */
 574:Src/BLDC_controller.c **** 
 575:Src/BLDC_controller.c ****   /* End of SystemInitialize for SubSystem: '<S17>/Qualification' */
 576:Src/BLDC_controller.c **** 
 577:Src/BLDC_controller.c ****   /* SystemInitialize for IfAction SubSystem: '<S17>/Dequalification' */
 578:Src/BLDC_controller.c **** 
 579:Src/BLDC_controller.c ****   /* SystemInitialize for Atomic SubSystem: '<S20>/Counter' */
 580:Src/BLDC_controller.c ****   Counter_b_Init(&localDW->Counter_h, 0U);
 834              		.loc 1 580 0
 835 000c 0021     		movs	r1, #0
 836 000e A01C     		adds	r0, r4, #2
 837 0010 FFF7FEFF 		bl	Counter_b_Init
 838              	.LVL108:
ARM GAS  /tmp/ccoxnsnM.s 			page 26


 839 0014 10BD     		pop	{r4, pc}
 840              		.cfi_endproc
 841              	.LFE13:
 843              		.section	.text.Debounce_Filter,"ax",%progbits
 844              		.align	1
 845              		.global	Debounce_Filter
 846              		.syntax unified
 847              		.thumb
 848              		.thumb_func
 849              		.fpu softvfp
 851              	Debounce_Filter:
 852              	.LFB14:
 581:Src/BLDC_controller.c **** 
 582:Src/BLDC_controller.c ****   /* End of SystemInitialize for SubSystem: '<S20>/Counter' */
 583:Src/BLDC_controller.c **** 
 584:Src/BLDC_controller.c ****   /* End of SystemInitialize for SubSystem: '<S17>/Dequalification' */
 585:Src/BLDC_controller.c **** }
 586:Src/BLDC_controller.c **** 
 587:Src/BLDC_controller.c **** /* Output and update for atomic system: '<S3>/Debounce_Filter' */
 588:Src/BLDC_controller.c **** void Debounce_Filter(boolean_T rtu_u, uint16_T rtu_tAcv, uint16_T rtu_tDeacv,
 589:Src/BLDC_controller.c ****                      boolean_T *rty_y, DW_Debounce_Filter *localDW)
 590:Src/BLDC_controller.c **** {
 853              		.loc 1 590 0
 854              		.cfi_startproc
 855              		@ args = 4, pretend = 0, frame = 0
 856              		@ frame_needed = 0, uses_anonymous_args = 0
 857              	.LVL109:
 858 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 859              	.LCFI7:
 860              		.cfi_def_cfa_offset 32
 861              		.cfi_offset 3, -32
 862              		.cfi_offset 4, -28
 863              		.cfi_offset 5, -24
 864              		.cfi_offset 6, -20
 865              		.cfi_offset 7, -16
 866              		.cfi_offset 8, -12
 867              		.cfi_offset 9, -8
 868              		.cfi_offset 14, -4
 869 0004 0646     		mov	r6, r0
 870 0006 8846     		mov	r8, r1
 871 0008 9146     		mov	r9, r2
 872 000a 1D46     		mov	r5, r3
 873 000c 089C     		ldr	r4, [sp, #32]
 591:Src/BLDC_controller.c ****   boolean_T rtb_UnitDelay_o;
 592:Src/BLDC_controller.c ****   uint16_T rtb_Sum1_g3;
 593:Src/BLDC_controller.c ****   boolean_T rtb_RelationalOperator_f;
 594:Src/BLDC_controller.c **** 
 595:Src/BLDC_controller.c ****   /* UnitDelay: '<S17>/UnitDelay' */
 596:Src/BLDC_controller.c ****   rtb_UnitDelay_o = localDW->UnitDelay_DSTATE;
 874              		.loc 1 596 0
 875 000e A779     		ldrb	r7, [r4, #6]	@ zero_extendqisi2
 876              	.LVL110:
 597:Src/BLDC_controller.c **** 
 598:Src/BLDC_controller.c ****   /* Outputs for Atomic SubSystem: '<S17>/either_edge' */
 599:Src/BLDC_controller.c ****   rtb_RelationalOperator_f = either_edge(rtu_u, &localDW->either_edge_k);
 877              		.loc 1 599 0
 878 0010 2146     		mov	r1, r4
ARM GAS  /tmp/ccoxnsnM.s 			page 27


 879              	.LVL111:
 880 0012 FFF7FEFF 		bl	either_edge
 881              	.LVL112:
 600:Src/BLDC_controller.c **** 
 601:Src/BLDC_controller.c ****   /* End of Outputs for SubSystem: '<S17>/either_edge' */
 602:Src/BLDC_controller.c **** 
 603:Src/BLDC_controller.c ****   /* If: '<S17>/If2' incorporates:
 604:Src/BLDC_controller.c ****    *  Constant: '<S20>/Constant6'
 605:Src/BLDC_controller.c ****    *  Constant: '<S21>/Constant6'
 606:Src/BLDC_controller.c ****    *  Inport: '<S19>/yPrev'
 607:Src/BLDC_controller.c ****    *  Logic: '<S17>/Logical Operator1'
 608:Src/BLDC_controller.c ****    *  Logic: '<S17>/Logical Operator2'
 609:Src/BLDC_controller.c ****    *  Logic: '<S17>/Logical Operator3'
 610:Src/BLDC_controller.c ****    *  Logic: '<S17>/Logical Operator4'
 611:Src/BLDC_controller.c ****    */
 612:Src/BLDC_controller.c ****   if (rtu_u && (!rtb_UnitDelay_o)) {
 882              		.loc 1 612 0
 883 0016 06B1     		cbz	r6, .L88
 884              		.loc 1 612 0 is_stmt 0 discriminator 1
 885 0018 37B1     		cbz	r7, .L92
 886              	.L88:
 613:Src/BLDC_controller.c ****     /* Outputs for IfAction SubSystem: '<S17>/Qualification' incorporates:
 614:Src/BLDC_controller.c ****      *  ActionPort: '<S21>/Action Port'
 615:Src/BLDC_controller.c ****      */
 616:Src/BLDC_controller.c **** 
 617:Src/BLDC_controller.c ****     /* Outputs for Atomic SubSystem: '<S21>/Counter' */
 618:Src/BLDC_controller.c ****     rtb_Sum1_g3 = (uint16_T) Counter_i(1U, rtu_tAcv, rtb_RelationalOperator_f,
 619:Src/BLDC_controller.c ****       &localDW->Counter_i0);
 620:Src/BLDC_controller.c **** 
 621:Src/BLDC_controller.c ****     /* End of Outputs for SubSystem: '<S21>/Counter' */
 622:Src/BLDC_controller.c **** 
 623:Src/BLDC_controller.c ****     /* Switch: '<S21>/Switch2' incorporates:
 624:Src/BLDC_controller.c ****      *  Constant: '<S21>/Constant6'
 625:Src/BLDC_controller.c ****      *  RelationalOperator: '<S21>/Relational Operator2'
 626:Src/BLDC_controller.c ****      */
 627:Src/BLDC_controller.c ****     *rty_y = (rtb_Sum1_g3 > rtu_tAcv);
 628:Src/BLDC_controller.c **** 
 629:Src/BLDC_controller.c ****     /* End of Outputs for SubSystem: '<S17>/Qualification' */
 630:Src/BLDC_controller.c ****   } else if ((!rtu_u) && rtb_UnitDelay_o) {
 887              		.loc 1 630 0 is_stmt 1
 888 001a 06B9     		cbnz	r6, .L90
 889              		.loc 1 630 0 is_stmt 0 discriminator 1
 890 001c 87B9     		cbnz	r7, .L93
 891              	.L90:
 631:Src/BLDC_controller.c ****     /* Outputs for IfAction SubSystem: '<S17>/Dequalification' incorporates:
 632:Src/BLDC_controller.c ****      *  ActionPort: '<S20>/Action Port'
 633:Src/BLDC_controller.c ****      */
 634:Src/BLDC_controller.c **** 
 635:Src/BLDC_controller.c ****     /* Outputs for Atomic SubSystem: '<S20>/Counter' */
 636:Src/BLDC_controller.c ****     rtb_Sum1_g3 = (uint16_T) Counter_i(1U, rtu_tDeacv, rtb_RelationalOperator_f,
 637:Src/BLDC_controller.c ****       &localDW->Counter_h);
 638:Src/BLDC_controller.c **** 
 639:Src/BLDC_controller.c ****     /* End of Outputs for SubSystem: '<S20>/Counter' */
 640:Src/BLDC_controller.c **** 
 641:Src/BLDC_controller.c ****     /* Switch: '<S20>/Switch2' incorporates:
 642:Src/BLDC_controller.c ****      *  Constant: '<S20>/Constant6'
 643:Src/BLDC_controller.c ****      *  RelationalOperator: '<S20>/Relational Operator2'
ARM GAS  /tmp/ccoxnsnM.s 			page 28


 644:Src/BLDC_controller.c ****      */
 645:Src/BLDC_controller.c ****     *rty_y = !(rtb_Sum1_g3 > rtu_tDeacv);
 646:Src/BLDC_controller.c **** 
 647:Src/BLDC_controller.c ****     /* End of Outputs for SubSystem: '<S17>/Dequalification' */
 648:Src/BLDC_controller.c ****   } else {
 649:Src/BLDC_controller.c ****     /* Outputs for IfAction SubSystem: '<S17>/Default' incorporates:
 650:Src/BLDC_controller.c ****      *  ActionPort: '<S19>/Action Port'
 651:Src/BLDC_controller.c ****      */
 652:Src/BLDC_controller.c ****     *rty_y = rtb_UnitDelay_o;
 892              		.loc 1 652 0 is_stmt 1
 893 001e 2F70     		strb	r7, [r5]
 894              	.LVL113:
 895              	.L89:
 653:Src/BLDC_controller.c **** 
 654:Src/BLDC_controller.c ****     /* End of Outputs for SubSystem: '<S17>/Default' */
 655:Src/BLDC_controller.c ****   }
 656:Src/BLDC_controller.c **** 
 657:Src/BLDC_controller.c ****   /* End of If: '<S17>/If2' */
 658:Src/BLDC_controller.c **** 
 659:Src/BLDC_controller.c ****   /* Update for UnitDelay: '<S17>/UnitDelay' */
 660:Src/BLDC_controller.c ****   localDW->UnitDelay_DSTATE = *rty_y;
 896              		.loc 1 660 0
 897 0020 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
 898 0022 A371     		strb	r3, [r4, #6]
 899 0024 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 900              	.LVL114:
 901              	.L92:
 618:Src/BLDC_controller.c ****       &localDW->Counter_i0);
 902              		.loc 1 618 0
 903 0028 231D     		adds	r3, r4, #4
 904 002a 0246     		mov	r2, r0
 905 002c 4146     		mov	r1, r8
 906 002e 0120     		movs	r0, #1
 907              	.LVL115:
 908 0030 FFF7FEFF 		bl	Counter_i
 909              	.LVL116:
 627:Src/BLDC_controller.c **** 
 910              		.loc 1 627 0
 911 0034 8045     		cmp	r8, r0
 912 0036 2CBF     		ite	cs
 913 0038 0020     		movcs	r0, #0
 914              	.LVL117:
 915 003a 0120     		movcc	r0, #1
 916 003c 2870     		strb	r0, [r5]
 917 003e EFE7     		b	.L89
 918              	.LVL118:
 919              	.L93:
 636:Src/BLDC_controller.c ****       &localDW->Counter_h);
 920              		.loc 1 636 0
 921 0040 A31C     		adds	r3, r4, #2
 922 0042 0246     		mov	r2, r0
 923 0044 4946     		mov	r1, r9
 924 0046 0120     		movs	r0, #1
 925              	.LVL119:
 926 0048 FFF7FEFF 		bl	Counter_i
 927              	.LVL120:
 645:Src/BLDC_controller.c **** 
ARM GAS  /tmp/ccoxnsnM.s 			page 29


 928              		.loc 1 645 0
 929 004c 8145     		cmp	r9, r0
 930 004e 34BF     		ite	cc
 931 0050 0020     		movcc	r0, #0
 932              	.LVL121:
 933 0052 0120     		movcs	r0, #1
 934 0054 2870     		strb	r0, [r5]
 935 0056 E3E7     		b	.L89
 936              		.cfi_endproc
 937              	.LFE14:
 939              		.section	.text.BLDC_controller_step,"ax",%progbits
 940              		.align	1
 941              		.global	BLDC_controller_step
 942              		.syntax unified
 943              		.thumb
 944              		.thumb_func
 945              		.fpu softvfp
 947              	BLDC_controller_step:
 948              	.LFB15:
 661:Src/BLDC_controller.c **** }
 662:Src/BLDC_controller.c **** 
 663:Src/BLDC_controller.c **** /* Model step function */
 664:Src/BLDC_controller.c **** void BLDC_controller_step(RT_MODEL *const rtM)
 665:Src/BLDC_controller.c **** {
 949              		.loc 1 665 0
 950              		.cfi_startproc
 951              		@ args = 0, pretend = 0, frame = 64
 952              		@ frame_needed = 0, uses_anonymous_args = 0
 953              	.LVL122:
 954 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 955              	.LCFI8:
 956              		.cfi_def_cfa_offset 36
 957              		.cfi_offset 4, -36
 958              		.cfi_offset 5, -32
 959              		.cfi_offset 6, -28
 960              		.cfi_offset 7, -24
 961              		.cfi_offset 8, -20
 962              		.cfi_offset 9, -16
 963              		.cfi_offset 10, -12
 964              		.cfi_offset 11, -8
 965              		.cfi_offset 14, -4
 966 0004 95B0     		sub	sp, sp, #84
 967              	.LCFI9:
 968              		.cfi_def_cfa_offset 120
 666:Src/BLDC_controller.c ****   P *rtP = ((P *) rtM->defaultParam);
 969              		.loc 1 666 0
 970 0006 0568     		ldr	r5, [r0]
 971              	.LVL123:
 667:Src/BLDC_controller.c ****   DW *rtDW = ((DW *) rtM->dwork);
 972              		.loc 1 667 0
 973 0008 C468     		ldr	r4, [r0, #12]
 974              	.LVL124:
 668:Src/BLDC_controller.c ****   ExtU *rtU = (ExtU *) rtM->inputs;
 975              		.loc 1 668 0
 976 000a 4768     		ldr	r7, [r0, #4]
 977              	.LVL125:
 669:Src/BLDC_controller.c ****   ExtY *rtY = (ExtY *) rtM->outputs;
ARM GAS  /tmp/ccoxnsnM.s 			page 30


 978              		.loc 1 669 0
 979 000c D0F80880 		ldr	r8, [r0, #8]
 980              	.LVL126:
 670:Src/BLDC_controller.c ****   uint8_T rtb_Sum;
 671:Src/BLDC_controller.c ****   boolean_T rtb_LogicalOperator;
 672:Src/BLDC_controller.c ****   boolean_T rtb_RelationalOperator9;
 673:Src/BLDC_controller.c ****   int8_T rtb_Sum2_h;
 674:Src/BLDC_controller.c ****   boolean_T rtb_RelationalOperator4_d;
 675:Src/BLDC_controller.c ****   boolean_T rtb_RelationalOperator1_m;
 676:Src/BLDC_controller.c ****   uint8_T rtb_Sum_l;
 677:Src/BLDC_controller.c ****   int16_T rtb_Switch2_k;
 678:Src/BLDC_controller.c ****   int16_T rtb_Abs5;
 679:Src/BLDC_controller.c ****   int16_T rtb_Switch2_fl;
 680:Src/BLDC_controller.c ****   int16_T rtb_Switch1_l;
 681:Src/BLDC_controller.c ****   int16_T rtb_DataTypeConversion2;
 682:Src/BLDC_controller.c ****   int16_T rtb_Saturation1;
 683:Src/BLDC_controller.c ****   int16_T rtb_Switch2_l;
 684:Src/BLDC_controller.c ****   int16_T rtb_Merge;
 685:Src/BLDC_controller.c ****   int16_T rtb_toNegative;
 686:Src/BLDC_controller.c ****   int32_T rtb_DataTypeConversion;
 687:Src/BLDC_controller.c ****   int32_T rtb_Switch1;
 688:Src/BLDC_controller.c ****   int32_T rtb_Sum1;
 689:Src/BLDC_controller.c ****   int32_T rtb_Gain3;
 690:Src/BLDC_controller.c ****   int16_T rtb_TmpSignalConversionAtLow_Pa[2];
 691:Src/BLDC_controller.c ****   int16_T tmp[4];
 692:Src/BLDC_controller.c ****   int8_T UnitDelay3;
 693:Src/BLDC_controller.c ****   int16_T rtb_Merge_f_idx_1;
 694:Src/BLDC_controller.c **** 
 695:Src/BLDC_controller.c ****   /* Outputs for Atomic SubSystem: '<Root>/BLDC_controller' */
 696:Src/BLDC_controller.c ****   /* Sum: '<S10>/Sum' incorporates:
 697:Src/BLDC_controller.c ****    *  Gain: '<S10>/g_Ha'
 698:Src/BLDC_controller.c ****    *  Gain: '<S10>/g_Hb'
 699:Src/BLDC_controller.c ****    *  Inport: '<Root>/b_hallA '
 700:Src/BLDC_controller.c ****    *  Inport: '<Root>/b_hallB'
 701:Src/BLDC_controller.c ****    *  Inport: '<Root>/b_hallC'
 702:Src/BLDC_controller.c ****    */
 703:Src/BLDC_controller.c ****   rtb_Sum = (uint8_T)((uint32_T)(uint8_T)((uint32_T)(uint8_T)(rtU->b_hallA << 2)
 981              		.loc 1 703 0
 982 0010 3B79     		ldrb	r3, [r7, #4]	@ zero_extendqisi2
 983 0012 9E00     		lsls	r6, r3, #2
 984 0014 F6B2     		uxtb	r6, r6
 704:Src/BLDC_controller.c ****     + (uint8_T)(rtU->b_hallB << 1)) + rtU->b_hallC);
 985              		.loc 1 704 0
 986 0016 7A79     		ldrb	r2, [r7, #5]	@ zero_extendqisi2
 987 0018 5100     		lsls	r1, r2, #1
 988 001a C9B2     		uxtb	r1, r1
 703:Src/BLDC_controller.c ****     + (uint8_T)(rtU->b_hallB << 1)) + rtU->b_hallC);
 989              		.loc 1 703 0
 990 001c 0E44     		add	r6, r6, r1
 991 001e F6B2     		uxtb	r6, r6
 992              		.loc 1 704 0
 993 0020 B979     		ldrb	r1, [r7, #6]	@ zero_extendqisi2
 703:Src/BLDC_controller.c ****     + (uint8_T)(rtU->b_hallB << 1)) + rtU->b_hallC);
 994              		.loc 1 703 0
 995 0022 0E44     		add	r6, r6, r1
 996 0024 F6B2     		uxtb	r6, r6
 997              	.LVL127:
ARM GAS  /tmp/ccoxnsnM.s 			page 31


 705:Src/BLDC_controller.c **** 
 706:Src/BLDC_controller.c ****   /* Logic: '<S9>/Logical Operator' incorporates:
 707:Src/BLDC_controller.c ****    *  Inport: '<Root>/b_hallA '
 708:Src/BLDC_controller.c ****    *  Inport: '<Root>/b_hallB'
 709:Src/BLDC_controller.c ****    *  Inport: '<Root>/b_hallC'
 710:Src/BLDC_controller.c ****    *  UnitDelay: '<S9>/UnitDelay1'
 711:Src/BLDC_controller.c ****    *  UnitDelay: '<S9>/UnitDelay2'
 712:Src/BLDC_controller.c ****    *  UnitDelay: '<S9>/UnitDelay3'
 713:Src/BLDC_controller.c ****    */
 714:Src/BLDC_controller.c ****   rtb_LogicalOperator = (boolean_T)((rtU->b_hallA != 0) ^ (rtU->b_hallB != 0) ^
 998              		.loc 1 714 0
 999 0026 0032     		adds	r2, r2, #0
 1000 0028 18BF     		it	ne
 1001 002a 0122     		movne	r2, #1
 715:Src/BLDC_controller.c ****     (rtU->b_hallC != 0) ^ (rtDW->UnitDelay3_DSTATE_fy != 0) ^
 1002              		.loc 1 715 0
 1003 002c 94F893E0 		ldrb	lr, [r4, #147]	@ zero_extendqisi2
 716:Src/BLDC_controller.c ****     (rtDW->UnitDelay1_DSTATE != 0)) ^ (rtDW->UnitDelay2_DSTATE_f != 0);
 1004              		.loc 1 716 0
 1005 0030 94F89400 		ldrb	r0, [r4, #148]	@ zero_extendqisi2
 1006              	.LVL128:
 1007 0034 002B     		cmp	r3, #0
 1008 0036 0CBF     		ite	eq
 1009 0038 1346     		moveq	r3, r2
 1010 003a 82F00103 		eorne	r3, r2, #1
 1011 003e 0029     		cmp	r1, #0
 1012 0040 18BF     		it	ne
 1013 0042 83F00103 		eorne	r3, r3, #1
 1014 0046 BEF1000F 		cmp	lr, #0
 1015 004a 18BF     		it	ne
 1016 004c 83F00103 		eorne	r3, r3, #1
 1017 0050 0028     		cmp	r0, #0
 1018 0052 18BF     		it	ne
 1019 0054 83F00103 		eorne	r3, r3, #1
 1020 0058 94F89510 		ldrb	r1, [r4, #149]	@ zero_extendqisi2
 1021 005c 0031     		adds	r1, r1, #0
 1022 005e 18BF     		it	ne
 1023 0060 0121     		movne	r1, #1
 714:Src/BLDC_controller.c ****     (rtU->b_hallC != 0) ^ (rtDW->UnitDelay3_DSTATE_fy != 0) ^
 1024              		.loc 1 714 0
 1025 0062 81EA0302 		eor	r2, r1, r3
 1026              	.LVL129:
 717:Src/BLDC_controller.c **** 
 718:Src/BLDC_controller.c ****   /* If: '<S12>/If2' incorporates:
 719:Src/BLDC_controller.c ****    *  If: '<S2>/If2'
 720:Src/BLDC_controller.c ****    *  Inport: '<S15>/z_counterRawPrev'
 721:Src/BLDC_controller.c ****    *  UnitDelay: '<S12>/UnitDelay3'
 722:Src/BLDC_controller.c ****    */
 723:Src/BLDC_controller.c ****   if (rtb_LogicalOperator) {
 1027              		.loc 1 723 0
 1028 0066 9942     		cmp	r1, r3
 1029 0068 55D0     		beq	.L95
 724:Src/BLDC_controller.c ****     /* Outputs for IfAction SubSystem: '<S2>/F01_03_Direction_Detection' incorporates:
 725:Src/BLDC_controller.c ****      *  ActionPort: '<S11>/Action Port'
 726:Src/BLDC_controller.c ****      */
 727:Src/BLDC_controller.c ****     /* UnitDelay: '<S11>/UnitDelay3' */
 728:Src/BLDC_controller.c ****     UnitDelay3 = rtDW->Switch2_e;
ARM GAS  /tmp/ccoxnsnM.s 			page 32


 1030              		.loc 1 728 0
 1031 006a 94F98C10 		ldrsb	r1, [r4, #140]
 1032              	.LVL130:
 729:Src/BLDC_controller.c **** 
 730:Src/BLDC_controller.c ****     /* Sum: '<S11>/Sum2' incorporates:
 731:Src/BLDC_controller.c ****      *  Constant: '<S10>/vec_hallToPos'
 732:Src/BLDC_controller.c ****      *  Selector: '<S10>/Selector'
 733:Src/BLDC_controller.c ****      *  UnitDelay: '<S11>/UnitDelay2'
 734:Src/BLDC_controller.c ****      */
 735:Src/BLDC_controller.c ****     rtb_Sum2_h = (int8_T)(rtConstP.vec_hallToPos_Value[rtb_Sum] -
 1033              		.loc 1 735 0
 1034 006e 9B4B     		ldr	r3, .L341
 1035 0070 3344     		add	r3, r3, r6
 1036 0072 93F98807 		ldrsb	r0, [r3, #1928]
 1037 0076 C3B2     		uxtb	r3, r0
 736:Src/BLDC_controller.c ****                           rtDW->UnitDelay2_DSTATE_b);
 1038              		.loc 1 736 0
 1039 0078 94F88DE0 		ldrb	lr, [r4, #141]	@ zero_extendqisi2
 735:Src/BLDC_controller.c ****                           rtDW->UnitDelay2_DSTATE_b);
 1040              		.loc 1 735 0
 1041 007c A3EB0E03 		sub	r3, r3, lr
 1042 0080 5BB2     		sxtb	r3, r3
 1043              	.LVL131:
 737:Src/BLDC_controller.c **** 
 738:Src/BLDC_controller.c ****     /* Switch: '<S11>/Switch2' incorporates:
 739:Src/BLDC_controller.c ****      *  Constant: '<S11>/Constant20'
 740:Src/BLDC_controller.c ****      *  Constant: '<S11>/Constant23'
 741:Src/BLDC_controller.c ****      *  Constant: '<S11>/Constant24'
 742:Src/BLDC_controller.c ****      *  Constant: '<S11>/Constant8'
 743:Src/BLDC_controller.c ****      *  Logic: '<S11>/Logical Operator3'
 744:Src/BLDC_controller.c ****      *  RelationalOperator: '<S11>/Relational Operator1'
 745:Src/BLDC_controller.c ****      *  RelationalOperator: '<S11>/Relational Operator6'
 746:Src/BLDC_controller.c ****      */
 747:Src/BLDC_controller.c ****     if ((rtb_Sum2_h == 1) || (rtb_Sum2_h == -5)) {
 1044              		.loc 1 747 0
 1045 0082 012B     		cmp	r3, #1
 1046 0084 6DD0     		beq	.L96
 1047              		.loc 1 747 0 is_stmt 0 discriminator 1
 1048 0086 13F1050F 		cmn	r3, #5
 1049 008a 6AD0     		beq	.L96
 748:Src/BLDC_controller.c ****       rtDW->Switch2_e = 1;
 749:Src/BLDC_controller.c ****     } else {
 750:Src/BLDC_controller.c ****       rtDW->Switch2_e = -1;
 1050              		.loc 1 750 0 is_stmt 1
 1051 008c FF23     		movs	r3, #255
 1052              	.LVL132:
 1053 008e 84F88C30 		strb	r3, [r4, #140]
 1054              	.L98:
 751:Src/BLDC_controller.c ****     }
 752:Src/BLDC_controller.c **** 
 753:Src/BLDC_controller.c ****     /* End of Switch: '<S11>/Switch2' */
 754:Src/BLDC_controller.c **** 
 755:Src/BLDC_controller.c ****     /* Update for UnitDelay: '<S11>/UnitDelay2' incorporates:
 756:Src/BLDC_controller.c ****      *  Constant: '<S10>/vec_hallToPos'
 757:Src/BLDC_controller.c ****      *  Selector: '<S10>/Selector'
 758:Src/BLDC_controller.c ****      */
 759:Src/BLDC_controller.c ****     rtDW->UnitDelay2_DSTATE_b = rtConstP.vec_hallToPos_Value[rtb_Sum];
ARM GAS  /tmp/ccoxnsnM.s 			page 33


 1055              		.loc 1 759 0
 1056 0092 84F88D00 		strb	r0, [r4, #141]
 760:Src/BLDC_controller.c **** 
 761:Src/BLDC_controller.c ****     /* End of Outputs for SubSystem: '<S2>/F01_03_Direction_Detection' */
 762:Src/BLDC_controller.c **** 
 763:Src/BLDC_controller.c ****     /* Outputs for IfAction SubSystem: '<S12>/Raw_Motor_Speed_Estimation' incorporates:
 764:Src/BLDC_controller.c ****      *  ActionPort: '<S15>/Action Port'
 765:Src/BLDC_controller.c ****      */
 766:Src/BLDC_controller.c ****     rtDW->z_counterRawPrev = rtDW->UnitDelay3_DSTATE;
 1057              		.loc 1 766 0
 1058 0096 B4F97C00 		ldrsh	r0, [r4, #124]
 1059              	.LVL133:
 1060 009a A4F85A00 		strh	r0, [r4, #90]	@ movhi
 767:Src/BLDC_controller.c **** 
 768:Src/BLDC_controller.c ****     /* Sum: '<S15>/Sum7' incorporates:
 769:Src/BLDC_controller.c ****      *  Inport: '<S15>/z_counterRawPrev'
 770:Src/BLDC_controller.c ****      *  UnitDelay: '<S12>/UnitDelay3'
 771:Src/BLDC_controller.c ****      *  UnitDelay: '<S15>/UnitDelay4'
 772:Src/BLDC_controller.c ****      */
 773:Src/BLDC_controller.c ****     rtb_Switch2_k = (int16_T)(rtDW->z_counterRawPrev - rtDW->UnitDelay4_DSTATE);
 1061              		.loc 1 773 0
 1062 009e 1FFA80FE 		uxth	lr, r0
 1063              	.LVL134:
 1064 00a2 B4F87E30 		ldrh	r3, [r4, #126]
 1065 00a6 AEEB0303 		sub	r3, lr, r3
 1066 00aa 9BB2     		uxth	r3, r3
 1067 00ac 0FFA83FC 		sxth	ip, r3
 1068              	.LVL135:
 774:Src/BLDC_controller.c **** 
 775:Src/BLDC_controller.c ****     /* Abs: '<S15>/Abs2' */
 776:Src/BLDC_controller.c ****     if (rtb_Switch2_k < 0) {
 1069              		.loc 1 776 0
 1070 00b0 BCF1000F 		cmp	ip, #0
 1071 00b4 59DB     		blt	.L314
 1072              	.LVL136:
 1073              	.L99:
 777:Src/BLDC_controller.c ****       rtb_Switch1_l = (int16_T)-rtb_Switch2_k;
 778:Src/BLDC_controller.c ****     } else {
 779:Src/BLDC_controller.c ****       rtb_Switch1_l = rtb_Switch2_k;
 780:Src/BLDC_controller.c ****     }
 781:Src/BLDC_controller.c **** 
 782:Src/BLDC_controller.c ****     /* End of Abs: '<S15>/Abs2' */
 783:Src/BLDC_controller.c **** 
 784:Src/BLDC_controller.c ****     /* Relay: '<S15>/dz_cntTrnsDet' */
 785:Src/BLDC_controller.c ****     if (rtb_Switch1_l >= rtP->dz_cntTrnsDetHi) {
 1074              		.loc 1 785 0
 1075 00b6 B5F90430 		ldrsh	r3, [r5, #4]
 1076 00ba 9C45     		cmp	ip, r3
 1077 00bc 59DB     		blt	.L100
 786:Src/BLDC_controller.c ****       rtDW->dz_cntTrnsDet_Mode = true;
 1078              		.loc 1 786 0
 1079 00be 0123     		movs	r3, #1
 1080 00c0 84F8A130 		strb	r3, [r4, #161]
 1081              	.L101:
 787:Src/BLDC_controller.c ****     } else {
 788:Src/BLDC_controller.c ****       if (rtb_Switch1_l <= rtP->dz_cntTrnsDetLo) {
 789:Src/BLDC_controller.c ****         rtDW->dz_cntTrnsDet_Mode = false;
ARM GAS  /tmp/ccoxnsnM.s 			page 34


 790:Src/BLDC_controller.c ****       }
 791:Src/BLDC_controller.c ****     }
 792:Src/BLDC_controller.c **** 
 793:Src/BLDC_controller.c ****     rtDW->dz_cntTrnsDet = rtDW->dz_cntTrnsDet_Mode;
 1082              		.loc 1 793 0
 1083 00c4 94F8A190 		ldrb	r9, [r4, #161]	@ zero_extendqisi2
 1084 00c8 84F89A90 		strb	r9, [r4, #154]
 794:Src/BLDC_controller.c **** 
 795:Src/BLDC_controller.c ****     /* End of Relay: '<S15>/dz_cntTrnsDet' */
 796:Src/BLDC_controller.c **** 
 797:Src/BLDC_controller.c ****     /* RelationalOperator: '<S15>/Relational Operator4' */
 798:Src/BLDC_controller.c ****     rtb_RelationalOperator4_d = (rtDW->Switch2_e != UnitDelay3);
 1085              		.loc 1 798 0
 1086 00cc 94F98C30 		ldrsb	r3, [r4, #140]
 1087 00d0 9942     		cmp	r1, r3
 1088 00d2 14BF     		ite	ne
 1089 00d4 4FF0010C 		movne	ip, #1
 1090              	.LVL137:
 1091 00d8 4FF0000C 		moveq	ip, #0
 1092              	.LVL138:
 799:Src/BLDC_controller.c **** 
 800:Src/BLDC_controller.c ****     /* Switch: '<S15>/Switch3' incorporates:
 801:Src/BLDC_controller.c ****      *  Constant: '<S15>/Constant4'
 802:Src/BLDC_controller.c ****      *  Logic: '<S15>/Logical Operator1'
 803:Src/BLDC_controller.c ****      *  Switch: '<S15>/Switch1'
 804:Src/BLDC_controller.c ****      *  Switch: '<S15>/Switch2'
 805:Src/BLDC_controller.c ****      *  UnitDelay: '<S15>/UnitDelay1'
 806:Src/BLDC_controller.c ****      */
 807:Src/BLDC_controller.c ****     if (rtb_RelationalOperator4_d && rtDW->UnitDelay1_DSTATE_n) {
 1093              		.loc 1 807 0
 1094 00dc 04D0     		beq	.L102
 1095              		.loc 1 807 0 is_stmt 0 discriminator 1
 1096 00de 94F89FA0 		ldrb	r10, [r4, #159]	@ zero_extendqisi2
 1097 00e2 BAF1000F 		cmp	r10, #0
 1098 00e6 6CD1     		bne	.L232
 1099              	.L102:
 808:Src/BLDC_controller.c ****       rtb_Switch1_l = 0;
 809:Src/BLDC_controller.c ****     } else if (rtb_RelationalOperator4_d) {
 1100              		.loc 1 809 0 is_stmt 1
 1101 00e8 9942     		cmp	r1, r3
 1102 00ea 4AD0     		beq	.L104
 810:Src/BLDC_controller.c ****       /* Switch: '<S15>/Switch2' incorporates:
 811:Src/BLDC_controller.c ****        *  UnitDelay: '<S12>/UnitDelay4'
 812:Src/BLDC_controller.c ****        */
 813:Src/BLDC_controller.c ****       rtb_Switch1_l = rtDW->UnitDelay4_DSTATE_e;
 1103              		.loc 1 813 0
 1104 00ec B4F98610 		ldrsh	r1, [r4, #134]
 1105              	.LVL139:
 1106              	.L103:
 814:Src/BLDC_controller.c ****     } else if (rtDW->dz_cntTrnsDet) {
 815:Src/BLDC_controller.c ****       /* Switch: '<S15>/Switch1' incorporates:
 816:Src/BLDC_controller.c ****        *  Constant: '<S15>/cf_speedCoef'
 817:Src/BLDC_controller.c ****        *  Product: '<S15>/Divide14'
 818:Src/BLDC_controller.c ****        *  Switch: '<S15>/Switch2'
 819:Src/BLDC_controller.c ****        */
 820:Src/BLDC_controller.c ****       rtb_Switch1_l = (int16_T)((rtP->cf_speedCoef << 4) /
 821:Src/BLDC_controller.c ****         rtDW->z_counterRawPrev);
ARM GAS  /tmp/ccoxnsnM.s 			page 35


 822:Src/BLDC_controller.c ****     } else {
 823:Src/BLDC_controller.c ****       /* Switch: '<S15>/Switch1' incorporates:
 824:Src/BLDC_controller.c ****        *  Constant: '<S15>/cf_speedCoef'
 825:Src/BLDC_controller.c ****        *  Gain: '<S15>/g_Ha'
 826:Src/BLDC_controller.c ****        *  Product: '<S15>/Divide13'
 827:Src/BLDC_controller.c ****        *  Sum: '<S15>/Sum13'
 828:Src/BLDC_controller.c ****        *  Switch: '<S15>/Switch2'
 829:Src/BLDC_controller.c ****        *  UnitDelay: '<S15>/UnitDelay2'
 830:Src/BLDC_controller.c ****        *  UnitDelay: '<S15>/UnitDelay3'
 831:Src/BLDC_controller.c ****        *  UnitDelay: '<S15>/UnitDelay5'
 832:Src/BLDC_controller.c ****        */
 833:Src/BLDC_controller.c ****       rtb_Switch1_l = (int16_T)(((uint16_T)(rtP->cf_speedCoef << 2) << 4) /
 834:Src/BLDC_controller.c ****         (int16_T)(((rtDW->UnitDelay2_DSTATE + rtDW->UnitDelay3_DSTATE_o) +
 835:Src/BLDC_controller.c ****                    rtDW->UnitDelay5_DSTATE) + rtDW->z_counterRawPrev));
 836:Src/BLDC_controller.c ****     }
 837:Src/BLDC_controller.c **** 
 838:Src/BLDC_controller.c ****     /* End of Switch: '<S15>/Switch3' */
 839:Src/BLDC_controller.c **** 
 840:Src/BLDC_controller.c ****     /* Product: '<S15>/Divide11' */
 841:Src/BLDC_controller.c ****     rtDW->Divide11 = (int16_T)(rtb_Switch1_l * rtDW->Switch2_e);
 1107              		.loc 1 841 0
 1108 00f0 9BB2     		uxth	r3, r3
 1109 00f2 01FB03F3 		mul	r3, r1, r3
 1110 00f6 A4F87A30 		strh	r3, [r4, #122]	@ movhi
 842:Src/BLDC_controller.c **** 
 843:Src/BLDC_controller.c ****     /* Update for UnitDelay: '<S15>/UnitDelay4' */
 844:Src/BLDC_controller.c ****     rtDW->UnitDelay4_DSTATE = rtDW->z_counterRawPrev;
 1111              		.loc 1 844 0
 1112 00fa A4F87E00 		strh	r0, [r4, #126]	@ movhi
 1113              	.LVL140:
 845:Src/BLDC_controller.c **** 
 846:Src/BLDC_controller.c ****     /* Update for UnitDelay: '<S15>/UnitDelay2' incorporates:
 847:Src/BLDC_controller.c ****      *  UnitDelay: '<S15>/UnitDelay3'
 848:Src/BLDC_controller.c ****      */
 849:Src/BLDC_controller.c ****     rtDW->UnitDelay2_DSTATE = rtDW->UnitDelay3_DSTATE_o;
 1114              		.loc 1 849 0
 1115 00fe B4F98230 		ldrsh	r3, [r4, #130]
 1116 0102 A4F88030 		strh	r3, [r4, #128]	@ movhi
 850:Src/BLDC_controller.c **** 
 851:Src/BLDC_controller.c ****     /* Update for UnitDelay: '<S15>/UnitDelay3' incorporates:
 852:Src/BLDC_controller.c ****      *  UnitDelay: '<S15>/UnitDelay5'
 853:Src/BLDC_controller.c ****      */
 854:Src/BLDC_controller.c ****     rtDW->UnitDelay3_DSTATE_o = rtDW->UnitDelay5_DSTATE;
 1117              		.loc 1 854 0
 1118 0106 B4F98430 		ldrsh	r3, [r4, #132]
 1119 010a A4F88230 		strh	r3, [r4, #130]	@ movhi
 855:Src/BLDC_controller.c **** 
 856:Src/BLDC_controller.c ****     /* Update for UnitDelay: '<S15>/UnitDelay5' */
 857:Src/BLDC_controller.c ****     rtDW->UnitDelay5_DSTATE = rtDW->z_counterRawPrev;
 1120              		.loc 1 857 0
 1121 010e A4F88400 		strh	r0, [r4, #132]	@ movhi
 858:Src/BLDC_controller.c **** 
 859:Src/BLDC_controller.c ****     /* Update for UnitDelay: '<S15>/UnitDelay1' */
 860:Src/BLDC_controller.c ****     rtDW->UnitDelay1_DSTATE_n = rtb_RelationalOperator4_d;
 1122              		.loc 1 860 0
 1123 0112 84F89FC0 		strb	ip, [r4, #159]
 1124              	.LVL141:
ARM GAS  /tmp/ccoxnsnM.s 			page 36


 1125              	.L95:
 861:Src/BLDC_controller.c **** 
 862:Src/BLDC_controller.c ****     /* End of Outputs for SubSystem: '<S12>/Raw_Motor_Speed_Estimation' */
 863:Src/BLDC_controller.c ****   }
 864:Src/BLDC_controller.c **** 
 865:Src/BLDC_controller.c ****   /* End of If: '<S12>/If2' */
 866:Src/BLDC_controller.c **** 
 867:Src/BLDC_controller.c ****   /* Outputs for Atomic SubSystem: '<S12>/Counter' */
 868:Src/BLDC_controller.c **** 
 869:Src/BLDC_controller.c ****   /* Constant: '<S12>/Constant6' incorporates:
 870:Src/BLDC_controller.c ****    *  Constant: '<S12>/z_maxCntRst2'
 871:Src/BLDC_controller.c ****    */
 872:Src/BLDC_controller.c ****   rtb_Switch1_l = (int16_T) Counter(1, rtP->z_maxCntRst, rtb_LogicalOperator,
 1126              		.loc 1 872 0
 1127 0116 04F14403 		add	r3, r4, #68
 1128 011a B5F90810 		ldrsh	r1, [r5, #8]
 1129 011e 0120     		movs	r0, #1
 1130 0120 FFF7FEFF 		bl	Counter
 1131              	.LVL142:
 1132 0124 0990     		str	r0, [sp, #36]
 1133              	.LVL143:
 873:Src/BLDC_controller.c ****     &rtDW->Counter_e);
 874:Src/BLDC_controller.c **** 
 875:Src/BLDC_controller.c ****   /* End of Outputs for SubSystem: '<S12>/Counter' */
 876:Src/BLDC_controller.c **** 
 877:Src/BLDC_controller.c ****   /* Switch: '<S12>/Switch2' incorporates:
 878:Src/BLDC_controller.c ****    *  Constant: '<S12>/Constant4'
 879:Src/BLDC_controller.c ****    *  Constant: '<S12>/z_maxCntRst'
 880:Src/BLDC_controller.c ****    *  RelationalOperator: '<S12>/Relational Operator2'
 881:Src/BLDC_controller.c ****    */
 882:Src/BLDC_controller.c ****   if (rtb_Switch1_l > rtP->z_maxCntRst) {
 1134              		.loc 1 882 0
 1135 0126 B5F90830 		ldrsh	r3, [r5, #8]
 1136 012a 9842     		cmp	r0, r3
 1137 012c 4BDC     		bgt	.L233
 883:Src/BLDC_controller.c ****     rtb_Switch2_k = 0;
 884:Src/BLDC_controller.c ****   } else {
 885:Src/BLDC_controller.c ****     rtb_Switch2_k = rtDW->Divide11;
 1138              		.loc 1 885 0
 1139 012e B4F97A30 		ldrsh	r3, [r4, #122]
 1140 0132 0593     		str	r3, [sp, #20]
 1141              	.LVL144:
 1142              	.L106:
 886:Src/BLDC_controller.c ****   }
 887:Src/BLDC_controller.c **** 
 888:Src/BLDC_controller.c ****   /* End of Switch: '<S12>/Switch2' */
 889:Src/BLDC_controller.c **** 
 890:Src/BLDC_controller.c ****   /* Abs: '<S12>/Abs5' */
 891:Src/BLDC_controller.c ****   if (rtb_Switch2_k < 0) {
 1143              		.loc 1 891 0
 1144 0134 059B     		ldr	r3, [sp, #20]
 1145 0136 002B     		cmp	r3, #0
 1146 0138 48DB     		blt	.L315
 892:Src/BLDC_controller.c ****     rtb_Abs5 = (int16_T)-rtb_Switch2_k;
 893:Src/BLDC_controller.c ****   } else {
 894:Src/BLDC_controller.c ****     rtb_Abs5 = rtb_Switch2_k;
 1147              		.loc 1 894 0
ARM GAS  /tmp/ccoxnsnM.s 			page 37


 1148 013a 059B     		ldr	r3, [sp, #20]
 1149 013c 0693     		str	r3, [sp, #24]
 1150              	.L107:
 1151              	.LVL145:
 895:Src/BLDC_controller.c ****   }
 896:Src/BLDC_controller.c **** 
 897:Src/BLDC_controller.c ****   /* End of Abs: '<S12>/Abs5' */
 898:Src/BLDC_controller.c **** 
 899:Src/BLDC_controller.c ****   /* Relay: '<S12>/n_commDeacv' */
 900:Src/BLDC_controller.c ****   if (rtb_Abs5 >= rtP->n_commDeacvHi) {
 1152              		.loc 1 900 0
 1153 013e B5F9D230 		ldrsh	r3, [r5, #210]
 1154 0142 069A     		ldr	r2, [sp, #24]
 1155 0144 9A42     		cmp	r2, r3
 1156 0146 45DB     		blt	.L108
 901:Src/BLDC_controller.c ****     rtDW->n_commDeacv_Mode = true;
 1157              		.loc 1 901 0
 1158 0148 0123     		movs	r3, #1
 1159 014a 84F8A030 		strb	r3, [r4, #160]
 1160              	.L109:
 902:Src/BLDC_controller.c ****   } else {
 903:Src/BLDC_controller.c ****     if (rtb_Abs5 <= rtP->n_commAcvLo) {
 904:Src/BLDC_controller.c ****       rtDW->n_commDeacv_Mode = false;
 905:Src/BLDC_controller.c ****     }
 906:Src/BLDC_controller.c ****   }
 907:Src/BLDC_controller.c **** 
 908:Src/BLDC_controller.c ****   /* Logic: '<S12>/Logical Operator2' incorporates:
 909:Src/BLDC_controller.c ****    *  Logic: '<S12>/Logical Operator1'
 910:Src/BLDC_controller.c ****    *  Relay: '<S12>/n_commDeacv'
 911:Src/BLDC_controller.c ****    */
 912:Src/BLDC_controller.c ****   rtb_LogicalOperator = (rtDW->n_commDeacv_Mode && (!rtDW->dz_cntTrnsDet));
 1161              		.loc 1 912 0
 1162 014e 94F8A030 		ldrb	r3, [r4, #160]	@ zero_extendqisi2
 1163 0152 002B     		cmp	r3, #0
 1164 0154 47D0     		beq	.L235
 1165              		.loc 1 912 0 is_stmt 0 discriminator 1
 1166 0156 94F89A30 		ldrb	r3, [r4, #154]	@ zero_extendqisi2
 1167 015a 002B     		cmp	r3, #0
 1168 015c 7AD0     		beq	.L236
 1169              		.loc 1 912 0
 1170 015e 0023     		movs	r3, #0
 1171 0160 42E0     		b	.L110
 1172              	.LVL146:
 1173              	.L96:
 748:Src/BLDC_controller.c ****     } else {
 1174              		.loc 1 748 0 is_stmt 1
 1175 0162 0123     		movs	r3, #1
 1176              	.LVL147:
 1177 0164 84F88C30 		strb	r3, [r4, #140]
 1178 0168 93E7     		b	.L98
 1179              	.LVL148:
 1180              	.L314:
 777:Src/BLDC_controller.c ****     } else {
 1181              		.loc 1 777 0
 1182 016a 5B42     		negs	r3, r3
 1183 016c 0FFA83FC 		sxth	ip, r3
 1184              	.LVL149:
ARM GAS  /tmp/ccoxnsnM.s 			page 38


 1185 0170 A1E7     		b	.L99
 1186              	.LVL150:
 1187              	.L100:
 788:Src/BLDC_controller.c ****         rtDW->dz_cntTrnsDet_Mode = false;
 1188              		.loc 1 788 0
 1189 0172 B5F90630 		ldrsh	r3, [r5, #6]
 1190 0176 9C45     		cmp	ip, r3
 1191 0178 A4DC     		bgt	.L101
 789:Src/BLDC_controller.c ****       }
 1192              		.loc 1 789 0
 1193 017a 0023     		movs	r3, #0
 1194 017c 84F8A130 		strb	r3, [r4, #161]
 1195 0180 A0E7     		b	.L101
 1196              	.LVL151:
 1197              	.L104:
 814:Src/BLDC_controller.c ****       /* Switch: '<S15>/Switch1' incorporates:
 1198              		.loc 1 814 0
 1199 0182 B9F1000F 		cmp	r9, #0
 1200 0186 05D0     		beq	.L105
 820:Src/BLDC_controller.c ****         rtDW->z_counterRawPrev);
 1201              		.loc 1 820 0
 1202 0188 6989     		ldrh	r1, [r5, #10]
 1203              	.LVL152:
 1204 018a 0901     		lsls	r1, r1, #4
 1205 018c 91FBF0F1 		sdiv	r1, r1, r0
 1206 0190 09B2     		sxth	r1, r1
 1207              	.LVL153:
 1208 0192 ADE7     		b	.L103
 1209              	.LVL154:
 1210              	.L105:
 833:Src/BLDC_controller.c ****         (int16_T)(((rtDW->UnitDelay2_DSTATE + rtDW->UnitDelay3_DSTATE_o) +
 1211              		.loc 1 833 0
 1212 0194 6989     		ldrh	r1, [r5, #10]
 1213              	.LVL155:
 1214 0196 8900     		lsls	r1, r1, #2
 1215 0198 89B2     		uxth	r1, r1
 1216 019a 0901     		lsls	r1, r1, #4
 834:Src/BLDC_controller.c ****                    rtDW->UnitDelay5_DSTATE) + rtDW->z_counterRawPrev));
 1217              		.loc 1 834 0
 1218 019c B4F88090 		ldrh	r9, [r4, #128]
 1219 01a0 B4F882A0 		ldrh	r10, [r4, #130]
 1220 01a4 D144     		add	r9, r9, r10
 1221 01a6 1FFA89F9 		uxth	r9, r9
 835:Src/BLDC_controller.c ****     }
 1222              		.loc 1 835 0
 1223 01aa B4F884A0 		ldrh	r10, [r4, #132]
 834:Src/BLDC_controller.c ****                    rtDW->UnitDelay5_DSTATE) + rtDW->z_counterRawPrev));
 1224              		.loc 1 834 0
 1225 01ae D144     		add	r9, r9, r10
 1226 01b0 1FFA89F9 		uxth	r9, r9
 835:Src/BLDC_controller.c ****     }
 1227              		.loc 1 835 0
 1228 01b4 CE44     		add	lr, lr, r9
 1229              	.LVL156:
 834:Src/BLDC_controller.c ****                    rtDW->UnitDelay5_DSTATE) + rtDW->z_counterRawPrev));
 1230              		.loc 1 834 0
 1231 01b6 0FFA8EFE 		sxth	lr, lr
ARM GAS  /tmp/ccoxnsnM.s 			page 39


 833:Src/BLDC_controller.c ****         (int16_T)(((rtDW->UnitDelay2_DSTATE + rtDW->UnitDelay3_DSTATE_o) +
 1232              		.loc 1 833 0
 1233 01ba 91FBFEF1 		sdiv	r1, r1, lr
 1234 01be 09B2     		sxth	r1, r1
 1235              	.LVL157:
 1236 01c0 96E7     		b	.L103
 1237              	.LVL158:
 1238              	.L232:
 808:Src/BLDC_controller.c ****     } else if (rtb_RelationalOperator4_d) {
 1239              		.loc 1 808 0
 1240 01c2 0021     		movs	r1, #0
 1241              	.LVL159:
 1242 01c4 94E7     		b	.L103
 1243              	.LVL160:
 1244              	.L233:
 883:Src/BLDC_controller.c ****   } else {
 1245              		.loc 1 883 0
 1246 01c6 0023     		movs	r3, #0
 1247 01c8 0593     		str	r3, [sp, #20]
 1248 01ca B3E7     		b	.L106
 1249              	.LVL161:
 1250              	.L315:
 892:Src/BLDC_controller.c ****   } else {
 1251              		.loc 1 892 0
 1252 01cc 5B42     		negs	r3, r3
 1253 01ce 1BB2     		sxth	r3, r3
 1254 01d0 0693     		str	r3, [sp, #24]
 1255              	.LVL162:
 1256 01d2 B4E7     		b	.L107
 1257              	.L108:
 903:Src/BLDC_controller.c ****       rtDW->n_commDeacv_Mode = false;
 1258              		.loc 1 903 0
 1259 01d4 B5F9D030 		ldrsh	r3, [r5, #208]
 1260 01d8 069A     		ldr	r2, [sp, #24]
 1261 01da 9A42     		cmp	r2, r3
 1262 01dc B7DC     		bgt	.L109
 904:Src/BLDC_controller.c ****     }
 1263              		.loc 1 904 0
 1264 01de 0023     		movs	r3, #0
 1265 01e0 84F8A030 		strb	r3, [r4, #160]
 1266 01e4 B3E7     		b	.L109
 1267              	.L235:
 1268              		.loc 1 912 0
 1269 01e6 0023     		movs	r3, #0
 1270              	.L110:
 1271              	.LVL163:
 913:Src/BLDC_controller.c **** 
 914:Src/BLDC_controller.c ****   /* Switch: '<S13>/Switch2' incorporates:
 915:Src/BLDC_controller.c ****    *  Constant: '<S13>/Constant16'
 916:Src/BLDC_controller.c ****    *  Product: '<S13>/Divide1'
 917:Src/BLDC_controller.c ****    *  Product: '<S13>/Divide3'
 918:Src/BLDC_controller.c ****    *  RelationalOperator: '<S13>/Relational Operator7'
 919:Src/BLDC_controller.c ****    *  Sum: '<S13>/Sum3'
 920:Src/BLDC_controller.c ****    *  Switch: '<S13>/Switch3'
 921:Src/BLDC_controller.c ****    */
 922:Src/BLDC_controller.c ****   if (rtb_LogicalOperator) {
 1272              		.loc 1 922 0 discriminator 6
ARM GAS  /tmp/ccoxnsnM.s 			page 40


 1273 01e8 03F0FF02 		and	r2, r3, #255
 1274 01ec 0792     		str	r2, [sp, #28]
 1275 01ee 002B     		cmp	r3, #0
 1276 01f0 37D0     		beq	.L111
 1277              	.LVL164:
 923:Src/BLDC_controller.c ****     /* MinMax: '<S13>/MinMax' */
 924:Src/BLDC_controller.c ****     rtb_Switch2_fl = rtb_Switch1_l;
 925:Src/BLDC_controller.c ****     if (!(rtb_Switch2_fl < rtDW->z_counterRawPrev)) {
 1278              		.loc 1 925 0
 1279 01f2 B4F95A10 		ldrsh	r1, [r4, #90]
 1280 01f6 099B     		ldr	r3, [sp, #36]
 1281              	.LVL165:
 1282 01f8 8B42     		cmp	r3, r1
 1283 01fa 00DB     		blt	.L112
 926:Src/BLDC_controller.c ****       rtb_Switch2_fl = rtDW->z_counterRawPrev;
 1284              		.loc 1 926 0
 1285 01fc 0B46     		mov	r3, r1
 1286              	.L112:
 1287              	.LVL166:
 927:Src/BLDC_controller.c ****     }
 928:Src/BLDC_controller.c **** 
 929:Src/BLDC_controller.c ****     /* End of MinMax: '<S13>/MinMax' */
 930:Src/BLDC_controller.c **** 
 931:Src/BLDC_controller.c ****     /* Switch: '<S13>/Switch3' incorporates:
 932:Src/BLDC_controller.c ****      *  Constant: '<S10>/vec_hallToPos'
 933:Src/BLDC_controller.c ****      *  Constant: '<S13>/Constant16'
 934:Src/BLDC_controller.c ****      *  RelationalOperator: '<S13>/Relational Operator7'
 935:Src/BLDC_controller.c ****      *  Selector: '<S10>/Selector'
 936:Src/BLDC_controller.c ****      *  Sum: '<S13>/Sum1'
 937:Src/BLDC_controller.c ****      */
 938:Src/BLDC_controller.c ****     if (rtDW->Switch2_e == 1) {
 1288              		.loc 1 938 0
 1289 01fe 94F98C20 		ldrsb	r2, [r4, #140]
 1290 0202 012A     		cmp	r2, #1
 1291 0204 28D0     		beq	.L316
 939:Src/BLDC_controller.c ****       rtb_Sum2_h = rtConstP.vec_hallToPos_Value[rtb_Sum];
 940:Src/BLDC_controller.c ****     } else {
 941:Src/BLDC_controller.c ****       rtb_Sum2_h = (int8_T)(rtConstP.vec_hallToPos_Value[rtb_Sum] + 1);
 1292              		.loc 1 941 0
 1293 0206 3548     		ldr	r0, .L341
 1294              	.LVL167:
 1295 0208 3044     		add	r0, r0, r6
 1296 020a 90F88807 		ldrb	r0, [r0, #1928]	@ zero_extendqisi2
 1297 020e 0130     		adds	r0, r0, #1
 1298 0210 40B2     		sxtb	r0, r0
 1299              	.LVL168:
 1300              	.L114:
 942:Src/BLDC_controller.c ****     }
 943:Src/BLDC_controller.c **** 
 944:Src/BLDC_controller.c ****     rtb_Switch2_fl = (int16_T)(((int16_T)((int16_T)((rtb_Switch2_fl << 14) /
 1301              		.loc 1 944 0
 1302 0212 9B03     		lsls	r3, r3, #14
 1303              	.LVL169:
 1304 0214 93FBF1F3 		sdiv	r3, r3, r1
 1305 0218 99B2     		uxth	r1, r3
 945:Src/BLDC_controller.c ****       rtDW->z_counterRawPrev) * rtDW->Switch2_e) + (rtb_Sum2_h << 14)) >> 2);
 1306              		.loc 1 945 0
ARM GAS  /tmp/ccoxnsnM.s 			page 41


 1307 021a 93B2     		uxth	r3, r2
 1308 021c 03FB01F3 		mul	r3, r3, r1
 944:Src/BLDC_controller.c ****       rtDW->z_counterRawPrev) * rtDW->Switch2_e) + (rtb_Sum2_h << 14)) >> 2);
 1309              		.loc 1 944 0
 1310 0220 1BB2     		sxth	r3, r3
 1311              		.loc 1 945 0
 1312 0222 03EB8033 		add	r3, r3, r0, lsl #14
 944:Src/BLDC_controller.c ****       rtDW->z_counterRawPrev) * rtDW->Switch2_e) + (rtb_Sum2_h << 14)) >> 2);
 1313              		.loc 1 944 0
 1314 0226 43F38F03 		sbfx	r3, r3, #2, #16
 1315              	.LVL170:
 1316              	.L115:
 946:Src/BLDC_controller.c ****   } else {
 947:Src/BLDC_controller.c ****     if (rtDW->Switch2_e == 1) {
 948:Src/BLDC_controller.c ****       /* Switch: '<S13>/Switch3' incorporates:
 949:Src/BLDC_controller.c ****        *  Constant: '<S10>/vec_hallToPos'
 950:Src/BLDC_controller.c ****        *  Selector: '<S10>/Selector'
 951:Src/BLDC_controller.c ****        */
 952:Src/BLDC_controller.c ****       rtb_Sum2_h = rtConstP.vec_hallToPos_Value[rtb_Sum];
 953:Src/BLDC_controller.c ****     } else {
 954:Src/BLDC_controller.c ****       /* Switch: '<S13>/Switch3' incorporates:
 955:Src/BLDC_controller.c ****        *  Constant: '<S10>/vec_hallToPos'
 956:Src/BLDC_controller.c ****        *  Selector: '<S10>/Selector'
 957:Src/BLDC_controller.c ****        *  Sum: '<S13>/Sum1'
 958:Src/BLDC_controller.c ****        */
 959:Src/BLDC_controller.c ****       rtb_Sum2_h = (int8_T)(rtConstP.vec_hallToPos_Value[rtb_Sum] + 1);
 960:Src/BLDC_controller.c ****     }
 961:Src/BLDC_controller.c **** 
 962:Src/BLDC_controller.c ****     rtb_Switch2_fl = (int16_T)(rtb_Sum2_h << 12);
 963:Src/BLDC_controller.c ****   }
 964:Src/BLDC_controller.c **** 
 965:Src/BLDC_controller.c ****   /* End of Switch: '<S13>/Switch2' */
 966:Src/BLDC_controller.c **** 
 967:Src/BLDC_controller.c ****   /* MinMax: '<S13>/MinMax1' incorporates:
 968:Src/BLDC_controller.c ****    *  Constant: '<S13>/Constant1'
 969:Src/BLDC_controller.c ****    */
 970:Src/BLDC_controller.c ****   if (!(rtb_Switch2_fl > 0)) {
 1317              		.loc 1 970 0
 1318 022a 002B     		cmp	r3, #0
 1319 022c 2BDD     		ble	.L317
 1320              	.LVL171:
 1321              	.L118:
 971:Src/BLDC_controller.c ****     rtb_Switch2_fl = 0;
 972:Src/BLDC_controller.c ****   }
 973:Src/BLDC_controller.c **** 
 974:Src/BLDC_controller.c ****   /* End of MinMax: '<S13>/MinMax1' */
 975:Src/BLDC_controller.c **** 
 976:Src/BLDC_controller.c ****   /* Product: '<S13>/Divide2' */
 977:Src/BLDC_controller.c ****   rtb_Switch2_fl = (int16_T)((15 * rtb_Switch2_fl) >> 4);
 1322              		.loc 1 977 0
 1323 022e C3EB0313 		rsb	r3, r3, r3, lsl #4
 1324              	.LVL172:
 1325 0232 1B11     		asrs	r3, r3, #4
 1326 0234 0D93     		str	r3, [sp, #52]
 1327 0236 1BB2     		sxth	r3, r3
 1328 0238 0893     		str	r3, [sp, #32]
 1329              	.LVL173:
ARM GAS  /tmp/ccoxnsnM.s 			page 42


 978:Src/BLDC_controller.c **** 
 979:Src/BLDC_controller.c ****   /* DataTypeConversion: '<S1>/Data Type Conversion2' incorporates:
 980:Src/BLDC_controller.c ****    *  Inport: '<Root>/r_inpTgt'
 981:Src/BLDC_controller.c ****    */
 982:Src/BLDC_controller.c ****   if (rtU->r_inpTgt > 2047) {
 1330              		.loc 1 982 0
 1331 023a B7F902A0 		ldrsh	r10, [r7, #2]
 1332 023e BAF5006F 		cmp	r10, #2048
 1333 0242 22DA     		bge	.L239
 983:Src/BLDC_controller.c ****     rtb_DataTypeConversion2 = MAX_int16_T;
 984:Src/BLDC_controller.c ****   } else if (rtU->r_inpTgt <= -2048) {
 1334              		.loc 1 984 0
 1335 0244 1AF5006F 		cmn	r10, #2048
 1336 0248 41DD     		ble	.L240
 985:Src/BLDC_controller.c ****     rtb_DataTypeConversion2 = MIN_int16_T;
 986:Src/BLDC_controller.c ****   } else {
 987:Src/BLDC_controller.c ****     rtb_DataTypeConversion2 = (int16_T)(rtU->r_inpTgt << 4);
 1337              		.loc 1 987 0
 1338 024a 4FEA0A1A 		lsl	r10, r10, #4
 1339 024e 0FFA8AFA 		sxth	r10, r10
 1340              	.LVL174:
 1341 0252 1CE0     		b	.L119
 1342              	.LVL175:
 1343              	.L236:
 912:Src/BLDC_controller.c **** 
 1344              		.loc 1 912 0
 1345 0254 0123     		movs	r3, #1
 1346 0256 C7E7     		b	.L110
 1347              	.LVL176:
 1348              	.L316:
 939:Src/BLDC_controller.c ****     } else {
 1349              		.loc 1 939 0
 1350 0258 2048     		ldr	r0, .L341
 1351              	.LVL177:
 1352 025a 3044     		add	r0, r0, r6
 1353 025c 90F98807 		ldrsb	r0, [r0, #1928]
 1354              	.LVL178:
 1355 0260 D7E7     		b	.L114
 1356              	.LVL179:
 1357              	.L111:
 947:Src/BLDC_controller.c ****       /* Switch: '<S13>/Switch3' incorporates:
 1358              		.loc 1 947 0
 1359 0262 94F98C30 		ldrsb	r3, [r4, #140]
 1360              	.LVL180:
 1361 0266 012B     		cmp	r3, #1
 1362 0268 08D0     		beq	.L318
 959:Src/BLDC_controller.c ****     }
 1363              		.loc 1 959 0
 1364 026a 1C4B     		ldr	r3, .L341
 1365 026c 3344     		add	r3, r3, r6
 1366 026e 93F88837 		ldrb	r3, [r3, #1928]	@ zero_extendqisi2
 1367 0272 0133     		adds	r3, r3, #1
 1368 0274 5BB2     		sxtb	r3, r3
 1369              	.LVL181:
 1370              	.L117:
 962:Src/BLDC_controller.c ****   }
 1371              		.loc 1 962 0
ARM GAS  /tmp/ccoxnsnM.s 			page 43


 1372 0276 1B03     		lsls	r3, r3, #12
 1373              	.LVL182:
 1374 0278 1BB2     		sxth	r3, r3
 1375              	.LVL183:
 1376 027a D6E7     		b	.L115
 1377              	.LVL184:
 1378              	.L318:
 952:Src/BLDC_controller.c ****     } else {
 1379              		.loc 1 952 0
 1380 027c 174B     		ldr	r3, .L341
 1381 027e 3344     		add	r3, r3, r6
 1382 0280 93F98837 		ldrsb	r3, [r3, #1928]
 1383              	.LVL185:
 1384 0284 F7E7     		b	.L117
 1385              	.LVL186:
 1386              	.L317:
 971:Src/BLDC_controller.c ****   }
 1387              		.loc 1 971 0
 1388 0286 0023     		movs	r3, #0
 1389              	.LVL187:
 1390 0288 D1E7     		b	.L118
 1391              	.LVL188:
 1392              	.L239:
 983:Src/BLDC_controller.c ****   } else if (rtU->r_inpTgt <= -2048) {
 1393              		.loc 1 983 0
 1394 028a 47F6FF7A 		movw	r10, #32767
 1395              	.L119:
 1396              	.LVL189:
 988:Src/BLDC_controller.c ****   }
 989:Src/BLDC_controller.c **** 
 990:Src/BLDC_controller.c ****   /* UnitDelay: '<S8>/UnitDelay2' */
 991:Src/BLDC_controller.c ****   rtb_RelationalOperator4_d = rtDW->UnitDelay2_DSTATE_g;
 1397              		.loc 1 991 0
 1398 028e 94F89B30 		ldrb	r3, [r4, #155]	@ zero_extendqisi2
 1399 0292 1A46     		mov	r2, r3
 1400 0294 0B93     		str	r3, [sp, #44]
 1401              	.LVL190:
 992:Src/BLDC_controller.c **** 
 993:Src/BLDC_controller.c ****   /* RelationalOperator: '<S12>/Relational Operator9' incorporates:
 994:Src/BLDC_controller.c ****    *  Constant: '<S12>/n_stdStillDet'
 995:Src/BLDC_controller.c ****    */
 996:Src/BLDC_controller.c ****   rtb_RelationalOperator9 = (rtb_Abs5 < rtP->n_stdStillDet);
 1402              		.loc 1 996 0
 1403 0296 B5F9DAB0 		ldrsh	fp, [r5, #218]
 1404              	.LVL191:
 997:Src/BLDC_controller.c **** 
 998:Src/BLDC_controller.c ****   /* If: '<S1>/If2' incorporates:
 999:Src/BLDC_controller.c ****    *  Constant: '<S1>/b_diagEna'
1000:Src/BLDC_controller.c ****    *  Constant: '<S3>/CTRL_COMM2'
1001:Src/BLDC_controller.c ****    *  Constant: '<S3>/t_errDequal'
1002:Src/BLDC_controller.c ****    *  Constant: '<S3>/t_errQual'
1003:Src/BLDC_controller.c ****    *  Logic: '<S1>/Logical Operator2'
1004:Src/BLDC_controller.c ****    *  RelationalOperator: '<S3>/Relational Operator2'
1005:Src/BLDC_controller.c ****    *  UnitDelay: '<S8>/UnitDelay2'
1006:Src/BLDC_controller.c ****    */
1007:Src/BLDC_controller.c ****   if (rtP->b_diagEna && rtDW->UnitDelay2_DSTATE_g) {
 1405              		.loc 1 1007 0
ARM GAS  /tmp/ccoxnsnM.s 			page 44


 1406 029a 95F8F730 		ldrb	r3, [r5, #247]	@ zero_extendqisi2
 1407 029e 002B     		cmp	r3, #0
 1408 02a0 43D0     		beq	.L120
 1409              		.loc 1 1007 0 is_stmt 0 discriminator 1
 1410 02a2 002A     		cmp	r2, #0
 1411 02a4 41D0     		beq	.L120
1008:Src/BLDC_controller.c ****     /* Outputs for IfAction SubSystem: '<S1>/F02_Diagnostics' incorporates:
1009:Src/BLDC_controller.c ****      *  ActionPort: '<S3>/Action Port'
1010:Src/BLDC_controller.c ****      */
1011:Src/BLDC_controller.c ****     /* Switch: '<S3>/Switch3' incorporates:
1012:Src/BLDC_controller.c ****      *  Abs: '<S3>/Abs4'
1013:Src/BLDC_controller.c ****      *  Constant: '<S3>/CTRL_COMM4'
1014:Src/BLDC_controller.c ****      *  Constant: '<S3>/r_errInpTgtThres'
1015:Src/BLDC_controller.c ****      *  Inport: '<Root>/b_motEna'
1016:Src/BLDC_controller.c ****      *  Logic: '<S3>/Logical Operator1'
1017:Src/BLDC_controller.c ****      *  RelationalOperator: '<S3>/Relational Operator7'
1018:Src/BLDC_controller.c ****      *  S-Function (sfix_bitop): '<S3>/Bitwise Operator1'
1019:Src/BLDC_controller.c ****      *  UnitDelay: '<S3>/UnitDelay'
1020:Src/BLDC_controller.c ****      *  UnitDelay: '<S7>/UnitDelay4'
1021:Src/BLDC_controller.c ****      */
1022:Src/BLDC_controller.c ****     if ((rtY->z_errCode & 4) != 0) {
 1412              		.loc 1 1022 0 is_stmt 1
 1413 02a6 98F80630 		ldrb	r3, [r8, #6]	@ zero_extendqisi2
 1414 02aa 13F0040F 		tst	r3, #4
 1415 02ae 60D1     		bne	.L241
1023:Src/BLDC_controller.c ****       rtb_RelationalOperator1_m = true;
1024:Src/BLDC_controller.c ****     } else {
1025:Src/BLDC_controller.c ****       if (rtDW->UnitDelay4_DSTATE_eu < 0) {
 1416              		.loc 1 1025 0
 1417 02b0 B4F98830 		ldrsh	r3, [r4, #136]
 1418 02b4 002B     		cmp	r3, #0
 1419 02b6 0DDB     		blt	.L319
 1420              	.L122:
 1421              	.LVL192:
1026:Src/BLDC_controller.c ****         /* Abs: '<S3>/Abs4' incorporates:
1027:Src/BLDC_controller.c ****          *  UnitDelay: '<S7>/UnitDelay4'
1028:Src/BLDC_controller.c ****          */
1029:Src/BLDC_controller.c ****         rtb_Merge_f_idx_1 = (int16_T)-rtDW->UnitDelay4_DSTATE_eu;
1030:Src/BLDC_controller.c ****       } else {
1031:Src/BLDC_controller.c ****         /* Abs: '<S3>/Abs4' incorporates:
1032:Src/BLDC_controller.c ****          *  UnitDelay: '<S7>/UnitDelay4'
1033:Src/BLDC_controller.c ****          */
1034:Src/BLDC_controller.c ****         rtb_Merge_f_idx_1 = rtDW->UnitDelay4_DSTATE_eu;
1035:Src/BLDC_controller.c ****       }
1036:Src/BLDC_controller.c **** 
1037:Src/BLDC_controller.c ****       rtb_RelationalOperator1_m = (rtU->b_motEna && rtb_RelationalOperator9 &&
 1422              		.loc 1 1037 0
 1423 02b8 3A78     		ldrb	r2, [r7]	@ zero_extendqisi2
 1424              	.LVL193:
 1425 02ba 9AB1     		cbz	r2, .L242
 1426              		.loc 1 1037 0 is_stmt 0 discriminator 1
 1427 02bc 069A     		ldr	r2, [sp, #24]
 1428 02be 5A45     		cmp	r2, fp
 1429 02c0 53DA     		bge	.L243
1038:Src/BLDC_controller.c ****         (rtb_Merge_f_idx_1 > rtP->r_errInpTgtThres));
 1430              		.loc 1 1038 0 is_stmt 1 discriminator 3
 1431 02c2 B5F9DC20 		ldrsh	r2, [r5, #220]
ARM GAS  /tmp/ccoxnsnM.s 			page 45


1037:Src/BLDC_controller.c ****         (rtb_Merge_f_idx_1 > rtP->r_errInpTgtThres));
 1432              		.loc 1 1037 0 discriminator 3
 1433 02c6 9342     		cmp	r3, r2
 1434 02c8 51DC     		bgt	.L244
1037:Src/BLDC_controller.c ****         (rtb_Merge_f_idx_1 > rtP->r_errInpTgtThres));
 1435              		.loc 1 1037 0 is_stmt 0
 1436 02ca 0023     		movs	r3, #0
 1437              	.LVL194:
 1438 02cc 0BE0     		b	.L123
 1439              	.LVL195:
 1440              	.L240:
 985:Src/BLDC_controller.c ****   } else {
 1441              		.loc 1 985 0 is_stmt 1
 1442 02ce DFF810A0 		ldr	r10, .L341+4
 1443 02d2 DCE7     		b	.L119
 1444              	.LVL196:
 1445              	.L319:
1029:Src/BLDC_controller.c ****       } else {
 1446              		.loc 1 1029 0
 1447 02d4 9BB2     		uxth	r3, r3
 1448 02d6 5B42     		negs	r3, r3
 1449 02d8 1BB2     		sxth	r3, r3
 1450              	.LVL197:
 1451 02da EDE7     		b	.L122
 1452              	.L342:
 1453              		.align	2
 1454              	.L341:
 1455 02dc 00000000 		.word	rtConstP
 1456 02e0 0080FFFF 		.word	-32768
 1457              	.LVL198:
 1458              	.L242:
1037:Src/BLDC_controller.c ****         (rtb_Merge_f_idx_1 > rtP->r_errInpTgtThres));
 1459              		.loc 1 1037 0
 1460 02e4 0023     		movs	r3, #0
 1461              	.LVL199:
 1462              	.L123:
1037:Src/BLDC_controller.c ****         (rtb_Merge_f_idx_1 > rtP->r_errInpTgtThres));
 1463              		.loc 1 1037 0 is_stmt 0 discriminator 8
 1464 02e6 DBB2     		uxtb	r3, r3
 1465              	.LVL200:
 1466              	.L121:
1039:Src/BLDC_controller.c ****     }
1040:Src/BLDC_controller.c **** 
1041:Src/BLDC_controller.c ****     /* End of Switch: '<S3>/Switch3' */
1042:Src/BLDC_controller.c **** 
1043:Src/BLDC_controller.c ****     /* Sum: '<S3>/Sum' incorporates:
1044:Src/BLDC_controller.c ****      *  Constant: '<S3>/CTRL_COMM'
1045:Src/BLDC_controller.c ****      *  Constant: '<S3>/CTRL_COMM1'
1046:Src/BLDC_controller.c ****      *  DataTypeConversion: '<S3>/Data Type Conversion3'
1047:Src/BLDC_controller.c ****      *  Gain: '<S3>/g_Hb'
1048:Src/BLDC_controller.c ****      *  Gain: '<S3>/g_Hb1'
1049:Src/BLDC_controller.c ****      *  RelationalOperator: '<S3>/Relational Operator1'
1050:Src/BLDC_controller.c ****      *  RelationalOperator: '<S3>/Relational Operator3'
1051:Src/BLDC_controller.c ****      */
1052:Src/BLDC_controller.c ****     rtb_Sum_l = (uint8_T)(((uint32_T)((rtb_Sum == 7) << 1) + (rtb_Sum == 0)) +
 1467              		.loc 1 1052 0 is_stmt 1
 1468 02e8 072E     		cmp	r6, #7
ARM GAS  /tmp/ccoxnsnM.s 			page 46


 1469 02ea 44D0     		beq	.L320
 1470 02ec 4FF00009 		mov	r9, #0
 1471              	.L124:
 1472              		.loc 1 1052 0 is_stmt 0 discriminator 4
 1473 02f0 002E     		cmp	r6, #0
 1474 02f2 08BF     		it	eq
 1475 02f4 09F10109 		addeq	r9, r9, #1
1053:Src/BLDC_controller.c ****                           (rtb_RelationalOperator1_m << 2));
 1476              		.loc 1 1053 0 is_stmt 1 discriminator 4
 1477 02f8 9B00     		lsls	r3, r3, #2
 1478              	.LVL201:
 1479 02fa DBB2     		uxtb	r3, r3
1052:Src/BLDC_controller.c ****                           (rtb_RelationalOperator1_m << 2));
 1480              		.loc 1 1052 0 discriminator 4
 1481 02fc 9944     		add	r9, r9, r3
 1482              	.LVL202:
1054:Src/BLDC_controller.c **** 
1055:Src/BLDC_controller.c ****     /* Outputs for Atomic SubSystem: '<S3>/Debounce_Filter' */
1056:Src/BLDC_controller.c ****     Debounce_Filter(rtb_Sum_l != 0, rtP->t_errQual, rtP->t_errDequal,
 1483              		.loc 1 1056 0 discriminator 4
 1484 02fe AA89     		ldrh	r2, [r5, #12]
 1485 0300 E989     		ldrh	r1, [r5, #14]
 1486 0302 19F0FF09 		ands	r9, r9, #255
 1487              	.LVL203:
 1488 0306 04F10203 		add	r3, r4, #2
 1489 030a 0093     		str	r3, [sp]
 1490 030c 04F19903 		add	r3, r4, #153
 1491 0310 14BF     		ite	ne
 1492 0312 0120     		movne	r0, #1
 1493 0314 0020     		moveq	r0, #0
 1494 0316 FFF7FEFF 		bl	Debounce_Filter
 1495              	.LVL204:
1057:Src/BLDC_controller.c ****                     &rtDW->Merge_n, &rtDW->Debounce_Filter_f);
1058:Src/BLDC_controller.c **** 
1059:Src/BLDC_controller.c ****     /* End of Outputs for SubSystem: '<S3>/Debounce_Filter' */
1060:Src/BLDC_controller.c **** 
1061:Src/BLDC_controller.c ****     /* Outputs for Atomic SubSystem: '<S3>/either_edge' */
1062:Src/BLDC_controller.c ****     rtb_RelationalOperator1_m = either_edge(rtDW->Merge_n, &rtDW->either_edge_a);
 1496              		.loc 1 1062 0 discriminator 4
 1497 031a 2146     		mov	r1, r4
 1498 031c 94F89900 		ldrb	r0, [r4, #153]	@ zero_extendqisi2
 1499 0320 FFF7FEFF 		bl	either_edge
 1500              	.LVL205:
1063:Src/BLDC_controller.c **** 
1064:Src/BLDC_controller.c ****     /* End of Outputs for SubSystem: '<S3>/either_edge' */
1065:Src/BLDC_controller.c **** 
1066:Src/BLDC_controller.c ****     /* Switch: '<S3>/Switch1' incorporates:
1067:Src/BLDC_controller.c ****      *  Constant: '<S3>/CTRL_COMM2'
1068:Src/BLDC_controller.c ****      *  Constant: '<S3>/t_errDequal'
1069:Src/BLDC_controller.c ****      *  Constant: '<S3>/t_errQual'
1070:Src/BLDC_controller.c ****      *  RelationalOperator: '<S3>/Relational Operator2'
1071:Src/BLDC_controller.c ****      */
1072:Src/BLDC_controller.c ****     if (rtb_RelationalOperator1_m) {
 1501              		.loc 1 1072 0 discriminator 4
 1502 0324 08B1     		cbz	r0, .L120
1073:Src/BLDC_controller.c ****       /* Outport: '<Root>/z_errCode' */
1074:Src/BLDC_controller.c ****       rtY->z_errCode = rtb_Sum_l;
ARM GAS  /tmp/ccoxnsnM.s 			page 47


 1503              		.loc 1 1074 0
 1504 0326 88F80690 		strb	r9, [r8, #6]
 1505              	.LVL206:
 1506              	.L120:
1075:Src/BLDC_controller.c ****     }
1076:Src/BLDC_controller.c **** 
1077:Src/BLDC_controller.c ****     /* End of Switch: '<S3>/Switch1' */
1078:Src/BLDC_controller.c ****     /* End of Outputs for SubSystem: '<S1>/F02_Diagnostics' */
1079:Src/BLDC_controller.c ****   }
1080:Src/BLDC_controller.c **** 
1081:Src/BLDC_controller.c ****   /* End of If: '<S1>/If2' */
1082:Src/BLDC_controller.c **** 
1083:Src/BLDC_controller.c ****   /* If: '<S1>/If4' incorporates:
1084:Src/BLDC_controller.c ****    *  UnitDelay: '<S8>/UnitDelay2'
1085:Src/BLDC_controller.c ****    */
1086:Src/BLDC_controller.c ****   rtb_Sum2_h = rtDW->If4_ActiveSubsystem;
 1507              		.loc 1 1086 0
 1508 032a 94F98E20 		ldrsb	r2, [r4, #142]
 1509              	.LVL207:
1087:Src/BLDC_controller.c ****   UnitDelay3 = -1;
1088:Src/BLDC_controller.c ****   if (rtDW->UnitDelay2_DSTATE_g) {
 1510              		.loc 1 1088 0
 1511 032e 94F89B30 		ldrb	r3, [r4, #155]	@ zero_extendqisi2
 1512 0332 1BBB     		cbnz	r3, .L246
1087:Src/BLDC_controller.c ****   UnitDelay3 = -1;
 1513              		.loc 1 1087 0
 1514 0334 4FF0FF33 		mov	r3, #-1
 1515              	.L125:
 1516              	.LVL208:
1089:Src/BLDC_controller.c ****     UnitDelay3 = 0;
1090:Src/BLDC_controller.c ****   }
1091:Src/BLDC_controller.c **** 
1092:Src/BLDC_controller.c ****   rtDW->If4_ActiveSubsystem = UnitDelay3;
 1517              		.loc 1 1092 0
 1518 0338 84F88E30 		strb	r3, [r4, #142]
1093:Src/BLDC_controller.c ****   if ((rtb_Sum2_h != UnitDelay3) && (rtb_Sum2_h == 0)) {
 1519              		.loc 1 1093 0
 1520 033c 9342     		cmp	r3, r2
 1521 033e 03D0     		beq	.L126
 1522              		.loc 1 1093 0 is_stmt 0 discriminator 1
 1523 0340 12B9     		cbnz	r2, .L126
1094:Src/BLDC_controller.c ****     /* Disable for If: '<S29>/If2' */
1095:Src/BLDC_controller.c ****     rtDW->If2_ActiveSubsystem = -1;
 1524              		.loc 1 1095 0 is_stmt 1
 1525 0342 FF22     		movs	r2, #255
 1526              	.LVL209:
 1527 0344 84F89020 		strb	r2, [r4, #144]
 1528              	.L126:
1096:Src/BLDC_controller.c ****   }
1097:Src/BLDC_controller.c **** 
1098:Src/BLDC_controller.c ****   if (UnitDelay3 == 0) {
 1529              		.loc 1 1098 0
 1530 0348 002B     		cmp	r3, #0
 1531 034a 40F0C480 		bne	.L127
1099:Src/BLDC_controller.c ****     /* Outputs for IfAction SubSystem: '<S1>/F03_Control_Mode_Manager' incorporates:
1100:Src/BLDC_controller.c ****      *  ActionPort: '<S4>/Action Port'
1101:Src/BLDC_controller.c ****      */
ARM GAS  /tmp/ccoxnsnM.s 			page 48


1102:Src/BLDC_controller.c ****     /* Logic: '<S27>/Logical Operator4' incorporates:
1103:Src/BLDC_controller.c ****      *  Constant: '<S27>/constant2'
1104:Src/BLDC_controller.c ****      *  Constant: '<S27>/constant8'
1105:Src/BLDC_controller.c ****      *  Inport: '<Root>/b_motEna'
1106:Src/BLDC_controller.c ****      *  Inport: '<Root>/z_ctrlModReq'
1107:Src/BLDC_controller.c ****      *  Logic: '<S27>/Logical Operator1'
1108:Src/BLDC_controller.c ****      *  Logic: '<S27>/Logical Operator7'
1109:Src/BLDC_controller.c ****      *  RelationalOperator: '<S27>/Relational Operator10'
1110:Src/BLDC_controller.c ****      *  RelationalOperator: '<S27>/Relational Operator11'
1111:Src/BLDC_controller.c ****      *  RelationalOperator: '<S27>/Relational Operator2'
1112:Src/BLDC_controller.c ****      *  UnitDelay: '<S4>/UnitDelay1'
1113:Src/BLDC_controller.c ****      */
1114:Src/BLDC_controller.c ****     rtb_RelationalOperator1_m = ((!rtU->b_motEna) || rtDW->Merge_n ||
 1532              		.loc 1 1114 0
 1533 034e 3B78     		ldrb	r3, [r7]	@ zero_extendqisi2
 1534              	.LVL210:
1115:Src/BLDC_controller.c ****       (rtU->z_ctrlModReq == 0) || ((rtU->z_ctrlModReq != rtDW->z_ctrlMod) &&
 1535              		.loc 1 1115 0
 1536 0350 B3B1     		cbz	r3, .L247
1114:Src/BLDC_controller.c ****       (rtU->z_ctrlModReq == 0) || ((rtU->z_ctrlModReq != rtDW->z_ctrlMod) &&
 1537              		.loc 1 1114 0
 1538 0352 94F89930 		ldrb	r3, [r4, #153]	@ zero_extendqisi2
 1539 0356 7BBB     		cbnz	r3, .L248
 1540              		.loc 1 1115 0 discriminator 1
 1541 0358 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
1114:Src/BLDC_controller.c ****       (rtU->z_ctrlModReq == 0) || ((rtU->z_ctrlModReq != rtDW->z_ctrlMod) &&
 1542              		.loc 1 1114 0 discriminator 1
 1543 035a 7BB3     		cbz	r3, .L249
 1544              		.loc 1 1115 0
 1545 035c 94F89220 		ldrb	r2, [r4, #146]	@ zero_extendqisi2
 1546 0360 9342     		cmp	r3, r2
 1547 0362 2DD0     		beq	.L250
 1548              		.loc 1 1115 0 is_stmt 0 discriminator 2
 1549 0364 72BB     		cbnz	r2, .L251
 1550              		.loc 1 1115 0
 1551 0366 0023     		movs	r3, #0
 1552 0368 0BE0     		b	.L128
 1553              	.LVL211:
 1554              	.L243:
1037:Src/BLDC_controller.c ****         (rtb_Merge_f_idx_1 > rtP->r_errInpTgtThres));
 1555              		.loc 1 1037 0 is_stmt 1
 1556 036a 0023     		movs	r3, #0
 1557              	.LVL212:
 1558 036c BBE7     		b	.L123
 1559              	.LVL213:
 1560              	.L244:
 1561 036e 0123     		movs	r3, #1
 1562              	.LVL214:
 1563 0370 B9E7     		b	.L123
 1564              	.LVL215:
 1565              	.L241:
1023:Src/BLDC_controller.c ****     } else {
 1566              		.loc 1 1023 0
 1567 0372 0123     		movs	r3, #1
 1568 0374 B8E7     		b	.L121
 1569              	.LVL216:
 1570              	.L320:
ARM GAS  /tmp/ccoxnsnM.s 			page 49


1052:Src/BLDC_controller.c ****                           (rtb_RelationalOperator1_m << 2));
 1571              		.loc 1 1052 0
 1572 0376 4FF00209 		mov	r9, #2
 1573 037a B9E7     		b	.L124
 1574              	.LVL217:
 1575              	.L246:
1089:Src/BLDC_controller.c ****   }
 1576              		.loc 1 1089 0
 1577 037c 0023     		movs	r3, #0
 1578 037e DBE7     		b	.L125
 1579              	.LVL218:
 1580              	.L247:
 1581              		.loc 1 1115 0
 1582 0380 0123     		movs	r3, #1
 1583              	.L128:
1114:Src/BLDC_controller.c ****       (rtU->z_ctrlModReq == 0) || ((rtU->z_ctrlModReq != rtDW->z_ctrlMod) &&
 1584              		.loc 1 1114 0
 1585 0382 DBB2     		uxtb	r3, r3
 1586              	.LVL219:
1116:Src/BLDC_controller.c ****       (rtDW->z_ctrlMod != 0)));
1117:Src/BLDC_controller.c **** 
1118:Src/BLDC_controller.c ****     /* Chart: '<S4>/F03_02_Control_Mode_Manager' incorporates:
1119:Src/BLDC_controller.c ****      *  Constant: '<S27>/constant'
1120:Src/BLDC_controller.c ****      *  Constant: '<S27>/constant1'
1121:Src/BLDC_controller.c ****      *  Constant: '<S27>/constant5'
1122:Src/BLDC_controller.c ****      *  Constant: '<S27>/constant6'
1123:Src/BLDC_controller.c ****      *  Constant: '<S27>/constant7'
1124:Src/BLDC_controller.c ****      *  Inport: '<Root>/z_ctrlModReq'
1125:Src/BLDC_controller.c ****      *  Logic: '<S27>/Logical Operator3'
1126:Src/BLDC_controller.c ****      *  Logic: '<S27>/Logical Operator6'
1127:Src/BLDC_controller.c ****      *  Logic: '<S27>/Logical Operator9'
1128:Src/BLDC_controller.c ****      *  RelationalOperator: '<S27>/Relational Operator1'
1129:Src/BLDC_controller.c ****      *  RelationalOperator: '<S27>/Relational Operator3'
1130:Src/BLDC_controller.c ****      *  RelationalOperator: '<S27>/Relational Operator4'
1131:Src/BLDC_controller.c ****      *  RelationalOperator: '<S27>/Relational Operator5'
1132:Src/BLDC_controller.c ****      *  RelationalOperator: '<S27>/Relational Operator6'
1133:Src/BLDC_controller.c ****      */
1134:Src/BLDC_controller.c ****     if (rtDW->is_active_c1_BLDC_controller == 0U) {
 1587              		.loc 1 1134 0
 1588 0384 94F89620 		ldrb	r2, [r4, #150]	@ zero_extendqisi2
 1589 0388 F2B9     		cbnz	r2, .L129
1135:Src/BLDC_controller.c ****       rtDW->is_active_c1_BLDC_controller = 1U;
 1590              		.loc 1 1135 0
 1591 038a 0123     		movs	r3, #1
 1592              	.LVL220:
 1593 038c 84F89630 		strb	r3, [r4, #150]
1136:Src/BLDC_controller.c ****       rtDW->is_c1_BLDC_controller = IN_OPEN;
 1594              		.loc 1 1136 0
 1595 0390 0223     		movs	r3, #2
 1596 0392 84F89730 		strb	r3, [r4, #151]
1137:Src/BLDC_controller.c ****       rtDW->z_ctrlMod = OPEN_MODE;
 1597              		.loc 1 1137 0
 1598 0396 0023     		movs	r3, #0
 1599 0398 84F89230 		strb	r3, [r4, #146]
 1600              	.L130:
1138:Src/BLDC_controller.c ****     } else if (rtDW->is_c1_BLDC_controller == IN_ACTIVE) {
1139:Src/BLDC_controller.c ****       if (rtb_RelationalOperator1_m) {
ARM GAS  /tmp/ccoxnsnM.s 			page 50


1140:Src/BLDC_controller.c ****         rtDW->is_ACTIVE = IN_NO_ACTIVE_CHILD;
1141:Src/BLDC_controller.c ****         rtDW->is_c1_BLDC_controller = IN_OPEN;
1142:Src/BLDC_controller.c ****         rtDW->z_ctrlMod = OPEN_MODE;
1143:Src/BLDC_controller.c ****       } else {
1144:Src/BLDC_controller.c ****         switch (rtDW->is_ACTIVE) {
1145:Src/BLDC_controller.c ****          case IN_SPEED_MODE:
1146:Src/BLDC_controller.c ****           rtDW->z_ctrlMod = SPD_MODE;
1147:Src/BLDC_controller.c ****           break;
1148:Src/BLDC_controller.c **** 
1149:Src/BLDC_controller.c ****          case IN_TORQUE_MODE:
1150:Src/BLDC_controller.c ****           rtDW->z_ctrlMod = TRQ_MODE;
1151:Src/BLDC_controller.c ****           break;
1152:Src/BLDC_controller.c **** 
1153:Src/BLDC_controller.c ****          default:
1154:Src/BLDC_controller.c ****           rtDW->z_ctrlMod = VLT_MODE;
1155:Src/BLDC_controller.c ****           break;
1156:Src/BLDC_controller.c ****         }
1157:Src/BLDC_controller.c ****       }
1158:Src/BLDC_controller.c ****     } else {
1159:Src/BLDC_controller.c ****       rtDW->z_ctrlMod = OPEN_MODE;
1160:Src/BLDC_controller.c ****       if ((!rtb_RelationalOperator1_m) && ((rtU->z_ctrlModReq == 1) ||
1161:Src/BLDC_controller.c ****            (rtU->z_ctrlModReq == 2) || (rtU->z_ctrlModReq == 3)) &&
1162:Src/BLDC_controller.c ****           rtb_RelationalOperator9) {
1163:Src/BLDC_controller.c ****         rtDW->is_c1_BLDC_controller = IN_ACTIVE;
1164:Src/BLDC_controller.c ****         if (rtU->z_ctrlModReq == 3) {
1165:Src/BLDC_controller.c ****           rtDW->is_ACTIVE = IN_TORQUE_MODE;
1166:Src/BLDC_controller.c ****           rtDW->z_ctrlMod = TRQ_MODE;
1167:Src/BLDC_controller.c ****         } else if (rtU->z_ctrlModReq == 2) {
1168:Src/BLDC_controller.c ****           rtDW->is_ACTIVE = IN_SPEED_MODE;
1169:Src/BLDC_controller.c ****           rtDW->z_ctrlMod = SPD_MODE;
1170:Src/BLDC_controller.c ****         } else {
1171:Src/BLDC_controller.c ****           rtDW->is_ACTIVE = IN_VOLTAGE_MODE;
1172:Src/BLDC_controller.c ****           rtDW->z_ctrlMod = VLT_MODE;
1173:Src/BLDC_controller.c ****         }
1174:Src/BLDC_controller.c ****       }
1175:Src/BLDC_controller.c ****     }
1176:Src/BLDC_controller.c **** 
1177:Src/BLDC_controller.c ****     /* End of Chart: '<S4>/F03_02_Control_Mode_Manager' */
1178:Src/BLDC_controller.c **** 
1179:Src/BLDC_controller.c ****     /* If: '<S29>/If1' incorporates:
1180:Src/BLDC_controller.c ****      *  Constant: '<S1>/z_ctrlTypSel1'
1181:Src/BLDC_controller.c ****      *  DataTypeConversion: '<S1>/Data Type Conversion2'
1182:Src/BLDC_controller.c ****      *  Inport: '<S30>/r_inpTgt'
1183:Src/BLDC_controller.c ****      *  Saturate: '<S29>/Saturation'
1184:Src/BLDC_controller.c ****      */
1185:Src/BLDC_controller.c ****     if (rtP->z_ctrlTypSel == 2) {
 1601              		.loc 1 1185 0
 1602 039c 95F8F630 		ldrb	r3, [r5, #246]	@ zero_extendqisi2
 1603 03a0 022B     		cmp	r3, #2
 1604 03a2 5BD0     		beq	.L321
1186:Src/BLDC_controller.c ****       /* Outputs for IfAction SubSystem: '<S29>/FOC_Control_Type' incorporates:
1187:Src/BLDC_controller.c ****        *  ActionPort: '<S32>/Action Port'
1188:Src/BLDC_controller.c ****        */
1189:Src/BLDC_controller.c ****       /* SignalConversion: '<S32>/TmpSignal ConversionAtSelectorInport1' incorporates:
1190:Src/BLDC_controller.c ****        *  Constant: '<S32>/Vd_max'
1191:Src/BLDC_controller.c ****        *  Constant: '<S32>/constant1'
1192:Src/BLDC_controller.c ****        *  Constant: '<S32>/i_max'
ARM GAS  /tmp/ccoxnsnM.s 			page 51


1193:Src/BLDC_controller.c ****        *  Constant: '<S32>/n_max'
1194:Src/BLDC_controller.c ****        */
1195:Src/BLDC_controller.c ****       tmp[0] = 0;
1196:Src/BLDC_controller.c ****       tmp[1] = rtP->Vd_max;
1197:Src/BLDC_controller.c ****       tmp[2] = rtP->n_max;
1198:Src/BLDC_controller.c ****       tmp[3] = rtP->i_max;
1199:Src/BLDC_controller.c **** 
1200:Src/BLDC_controller.c ****       /* End of Outputs for SubSystem: '<S29>/FOC_Control_Type' */
1201:Src/BLDC_controller.c **** 
1202:Src/BLDC_controller.c ****       /* Saturate: '<S29>/Saturation' incorporates:
1203:Src/BLDC_controller.c ****        *  DataTypeConversion: '<S1>/Data Type Conversion2'
1204:Src/BLDC_controller.c ****        */
1205:Src/BLDC_controller.c ****       if (rtb_DataTypeConversion2 > 16000) {
1206:Src/BLDC_controller.c ****         rtb_Merge = 16000;
1207:Src/BLDC_controller.c ****       } else if (rtb_DataTypeConversion2 < -16000) {
1208:Src/BLDC_controller.c ****         rtb_Merge = -16000;
1209:Src/BLDC_controller.c ****       } else {
1210:Src/BLDC_controller.c ****         rtb_Merge = rtb_DataTypeConversion2;
1211:Src/BLDC_controller.c ****       }
1212:Src/BLDC_controller.c **** 
1213:Src/BLDC_controller.c ****       /* Outputs for IfAction SubSystem: '<S29>/FOC_Control_Type' incorporates:
1214:Src/BLDC_controller.c ****        *  ActionPort: '<S32>/Action Port'
1215:Src/BLDC_controller.c ****        */
1216:Src/BLDC_controller.c ****       /* Product: '<S32>/Divide1' incorporates:
1217:Src/BLDC_controller.c ****        *  Inport: '<Root>/z_ctrlModReq'
1218:Src/BLDC_controller.c ****        *  Product: '<S32>/Divide4'
1219:Src/BLDC_controller.c ****        *  Selector: '<S32>/Selector'
1220:Src/BLDC_controller.c ****        */
1221:Src/BLDC_controller.c ****       rtb_Merge = (int16_T)(((uint16_T)((tmp[rtU->z_ctrlModReq] << 5) / 125) *
1222:Src/BLDC_controller.c ****         rtb_Merge) >> 12);
1223:Src/BLDC_controller.c **** 
1224:Src/BLDC_controller.c ****       /* End of Outputs for SubSystem: '<S29>/FOC_Control_Type' */
1225:Src/BLDC_controller.c ****     } else if (rtb_DataTypeConversion2 > 16000) {
 1605              		.loc 1 1225 0
 1606 03a4 BAF57A5F 		cmp	r10, #16000
 1607 03a8 00F38680 		bgt	.L254
1226:Src/BLDC_controller.c ****       /* Outputs for IfAction SubSystem: '<S29>/Default_Control_Type' incorporates:
1227:Src/BLDC_controller.c ****        *  ActionPort: '<S30>/Action Port'
1228:Src/BLDC_controller.c ****        */
1229:Src/BLDC_controller.c ****       /* Saturate: '<S29>/Saturation' incorporates:
1230:Src/BLDC_controller.c ****        *  Inport: '<S30>/r_inpTgt'
1231:Src/BLDC_controller.c ****        */
1232:Src/BLDC_controller.c ****       rtb_Merge = 16000;
1233:Src/BLDC_controller.c **** 
1234:Src/BLDC_controller.c ****       /* End of Outputs for SubSystem: '<S29>/Default_Control_Type' */
1235:Src/BLDC_controller.c ****     } else if (rtb_DataTypeConversion2 < -16000) {
 1608              		.loc 1 1235 0
 1609 03ac 1AF57A5F 		cmn	r10, #16000
 1610 03b0 80F2A280 		bge	.L255
1236:Src/BLDC_controller.c ****       /* Outputs for IfAction SubSystem: '<S29>/Default_Control_Type' incorporates:
1237:Src/BLDC_controller.c ****        *  ActionPort: '<S30>/Action Port'
1238:Src/BLDC_controller.c ****        */
1239:Src/BLDC_controller.c ****       /* Saturate: '<S29>/Saturation' incorporates:
1240:Src/BLDC_controller.c ****        *  Inport: '<S30>/r_inpTgt'
1241:Src/BLDC_controller.c ****        */
1242:Src/BLDC_controller.c ****       rtb_Merge = -16000;
 1611              		.loc 1 1242 0
ARM GAS  /tmp/ccoxnsnM.s 			page 52


 1612 03b4 974A     		ldr	r2, .L343
 1613 03b6 81E0     		b	.L140
 1614              	.L248:
1115:Src/BLDC_controller.c ****       (rtDW->z_ctrlMod != 0)));
 1615              		.loc 1 1115 0
 1616 03b8 0123     		movs	r3, #1
 1617 03ba E2E7     		b	.L128
 1618              	.L249:
 1619 03bc 0123     		movs	r3, #1
 1620 03be E0E7     		b	.L128
 1621              	.L250:
 1622 03c0 0023     		movs	r3, #0
 1623 03c2 DEE7     		b	.L128
 1624              	.L251:
 1625 03c4 0123     		movs	r3, #1
 1626 03c6 DCE7     		b	.L128
 1627              	.LVL221:
 1628              	.L129:
1138:Src/BLDC_controller.c ****       if (rtb_RelationalOperator1_m) {
 1629              		.loc 1 1138 0
 1630 03c8 94F89720 		ldrb	r2, [r4, #151]	@ zero_extendqisi2
 1631 03cc 012A     		cmp	r2, #1
 1632 03ce 1BD0     		beq	.L322
1159:Src/BLDC_controller.c ****       if ((!rtb_RelationalOperator1_m) && ((rtU->z_ctrlModReq == 1) ||
 1633              		.loc 1 1159 0
 1634 03d0 0022     		movs	r2, #0
 1635 03d2 84F89220 		strb	r2, [r4, #146]
1160:Src/BLDC_controller.c ****            (rtU->z_ctrlModReq == 2) || (rtU->z_ctrlModReq == 3)) &&
 1636              		.loc 1 1160 0
 1637 03d6 002B     		cmp	r3, #0
 1638 03d8 E0D1     		bne	.L130
1160:Src/BLDC_controller.c ****            (rtU->z_ctrlModReq == 2) || (rtU->z_ctrlModReq == 3)) &&
 1639              		.loc 1 1160 0 is_stmt 0 discriminator 1
 1640 03da 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 1641              	.LVL222:
1161:Src/BLDC_controller.c ****           rtb_RelationalOperator9) {
 1642              		.loc 1 1161 0 is_stmt 1 discriminator 1
 1643 03dc 013B     		subs	r3, r3, #1
 1644 03de DBB2     		uxtb	r3, r3
1160:Src/BLDC_controller.c ****            (rtU->z_ctrlModReq == 2) || (rtU->z_ctrlModReq == 3)) &&
 1645              		.loc 1 1160 0 discriminator 1
 1646 03e0 022B     		cmp	r3, #2
 1647 03e2 DBD8     		bhi	.L130
1161:Src/BLDC_controller.c ****           rtb_RelationalOperator9) {
 1648              		.loc 1 1161 0
 1649 03e4 069B     		ldr	r3, [sp, #24]
 1650 03e6 5B45     		cmp	r3, fp
 1651 03e8 D8DA     		bge	.L130
1163:Src/BLDC_controller.c ****         if (rtU->z_ctrlModReq == 3) {
 1652              		.loc 1 1163 0
 1653 03ea 0123     		movs	r3, #1
 1654 03ec 84F89730 		strb	r3, [r4, #151]
1164:Src/BLDC_controller.c ****           rtDW->is_ACTIVE = IN_TORQUE_MODE;
 1655              		.loc 1 1164 0
 1656 03f0 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 1657 03f2 032B     		cmp	r3, #3
 1658 03f4 24D0     		beq	.L323
ARM GAS  /tmp/ccoxnsnM.s 			page 53


1167:Src/BLDC_controller.c ****           rtDW->is_ACTIVE = IN_SPEED_MODE;
 1659              		.loc 1 1167 0
 1660 03f6 022B     		cmp	r3, #2
 1661 03f8 29D0     		beq	.L324
1171:Src/BLDC_controller.c ****           rtDW->z_ctrlMod = VLT_MODE;
 1662              		.loc 1 1171 0
 1663 03fa 0323     		movs	r3, #3
 1664 03fc 84F89830 		strb	r3, [r4, #152]
1172:Src/BLDC_controller.c ****         }
 1665              		.loc 1 1172 0
 1666 0400 0123     		movs	r3, #1
 1667 0402 84F89230 		strb	r3, [r4, #146]
 1668 0406 C9E7     		b	.L130
 1669              	.LVL223:
 1670              	.L322:
1139:Src/BLDC_controller.c ****         rtDW->is_ACTIVE = IN_NO_ACTIVE_CHILD;
 1671              		.loc 1 1139 0
 1672 0408 43B1     		cbz	r3, .L132
1140:Src/BLDC_controller.c ****         rtDW->is_c1_BLDC_controller = IN_OPEN;
 1673              		.loc 1 1140 0
 1674 040a 0023     		movs	r3, #0
 1675              	.LVL224:
 1676 040c 84F89830 		strb	r3, [r4, #152]
1141:Src/BLDC_controller.c ****         rtDW->z_ctrlMod = OPEN_MODE;
 1677              		.loc 1 1141 0
 1678 0410 0222     		movs	r2, #2
 1679 0412 84F89720 		strb	r2, [r4, #151]
1142:Src/BLDC_controller.c ****       } else {
 1680              		.loc 1 1142 0
 1681 0416 84F89230 		strb	r3, [r4, #146]
 1682 041a BFE7     		b	.L130
 1683              	.LVL225:
 1684              	.L132:
1144:Src/BLDC_controller.c ****          case IN_SPEED_MODE:
 1685              		.loc 1 1144 0
 1686 041c 94F89830 		ldrb	r3, [r4, #152]	@ zero_extendqisi2
 1687              	.LVL226:
 1688 0420 012B     		cmp	r3, #1
 1689 0422 05D0     		beq	.L134
 1690 0424 022B     		cmp	r3, #2
 1691 0426 07D0     		beq	.L135
1154:Src/BLDC_controller.c ****           break;
 1692              		.loc 1 1154 0
 1693 0428 0123     		movs	r3, #1
 1694 042a 84F89230 		strb	r3, [r4, #146]
1155:Src/BLDC_controller.c ****         }
 1695              		.loc 1 1155 0
 1696 042e B5E7     		b	.L130
 1697              	.L134:
1146:Src/BLDC_controller.c ****           break;
 1698              		.loc 1 1146 0
 1699 0430 0223     		movs	r3, #2
 1700 0432 84F89230 		strb	r3, [r4, #146]
1147:Src/BLDC_controller.c **** 
 1701              		.loc 1 1147 0
 1702 0436 B1E7     		b	.L130
 1703              	.L135:
ARM GAS  /tmp/ccoxnsnM.s 			page 54


1150:Src/BLDC_controller.c ****           break;
 1704              		.loc 1 1150 0
 1705 0438 0323     		movs	r3, #3
 1706 043a 84F89230 		strb	r3, [r4, #146]
1151:Src/BLDC_controller.c **** 
 1707              		.loc 1 1151 0
 1708 043e ADE7     		b	.L130
 1709              	.L323:
1165:Src/BLDC_controller.c ****           rtDW->z_ctrlMod = TRQ_MODE;
 1710              		.loc 1 1165 0
 1711 0440 0223     		movs	r3, #2
 1712 0442 84F89830 		strb	r3, [r4, #152]
1166:Src/BLDC_controller.c ****         } else if (rtU->z_ctrlModReq == 2) {
 1713              		.loc 1 1166 0
 1714 0446 0323     		movs	r3, #3
 1715 0448 84F89230 		strb	r3, [r4, #146]
 1716 044c A6E7     		b	.L130
 1717              	.L324:
1168:Src/BLDC_controller.c ****           rtDW->z_ctrlMod = SPD_MODE;
 1718              		.loc 1 1168 0
 1719 044e 0123     		movs	r3, #1
 1720 0450 84F89830 		strb	r3, [r4, #152]
1169:Src/BLDC_controller.c ****         } else {
 1721              		.loc 1 1169 0
 1722 0454 0223     		movs	r3, #2
 1723 0456 84F89230 		strb	r3, [r4, #146]
 1724 045a 9FE7     		b	.L130
 1725              	.L321:
1195:Src/BLDC_controller.c ****       tmp[1] = rtP->Vd_max;
 1726              		.loc 1 1195 0
 1727 045c 0023     		movs	r3, #0
 1728 045e ADF84430 		strh	r3, [sp, #68]	@ movhi
1196:Src/BLDC_controller.c ****       tmp[2] = rtP->n_max;
 1729              		.loc 1 1196 0
 1730 0462 B5F91030 		ldrsh	r3, [r5, #16]
 1731 0466 ADF84630 		strh	r3, [sp, #70]	@ movhi
1197:Src/BLDC_controller.c ****       tmp[3] = rtP->i_max;
 1732              		.loc 1 1197 0
 1733 046a B5F9D830 		ldrsh	r3, [r5, #216]
 1734 046e ADF84830 		strh	r3, [sp, #72]	@ movhi
1198:Src/BLDC_controller.c **** 
 1735              		.loc 1 1198 0
 1736 0472 B5F9CC30 		ldrsh	r3, [r5, #204]
 1737 0476 ADF84A30 		strh	r3, [sp, #74]	@ movhi
1205:Src/BLDC_controller.c ****         rtb_Merge = 16000;
 1738              		.loc 1 1205 0
 1739 047a BAF57A5F 		cmp	r10, #16000
 1740 047e 04DC     		bgt	.L252
1207:Src/BLDC_controller.c ****         rtb_Merge = -16000;
 1741              		.loc 1 1207 0
 1742 0480 1AF57A5F 		cmn	r10, #16000
 1743 0484 16DA     		bge	.L253
1208:Src/BLDC_controller.c ****       } else {
 1744              		.loc 1 1208 0
 1745 0486 634A     		ldr	r2, .L343
 1746 0488 01E0     		b	.L139
 1747              	.L252:
ARM GAS  /tmp/ccoxnsnM.s 			page 55


1206:Src/BLDC_controller.c ****       } else if (rtb_DataTypeConversion2 < -16000) {
 1748              		.loc 1 1206 0
 1749 048a 4FF47A52 		mov	r2, #16000
 1750              	.L139:
 1751              	.LVL227:
1221:Src/BLDC_controller.c ****         rtb_Merge) >> 12);
 1752              		.loc 1 1221 0
 1753 048e 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 1754 0490 14A9     		add	r1, sp, #80
 1755 0492 01EB4303 		add	r3, r1, r3, lsl #1
 1756 0496 33F90C3C 		ldrsh	r3, [r3, #-12]
 1757 049a 5B01     		lsls	r3, r3, #5
 1758 049c 5E49     		ldr	r1, .L343+4
 1759 049e 81FB0301 		smull	r0, r1, r1, r3
 1760 04a2 DB17     		asrs	r3, r3, #31
 1761 04a4 C3EBE103 		rsb	r3, r3, r1, asr #3
 1762 04a8 9BB2     		uxth	r3, r3
 1763 04aa 02FB03F3 		mul	r3, r2, r3
 1764 04ae 43F30F32 		sbfx	r2, r3, #12, #16
 1765              	.LVL228:
 1766 04b2 03E0     		b	.L140
 1767              	.LVL229:
 1768              	.L253:
1210:Src/BLDC_controller.c ****       }
 1769              		.loc 1 1210 0
 1770 04b4 5246     		mov	r2, r10
 1771 04b6 EAE7     		b	.L139
 1772              	.L254:
1232:Src/BLDC_controller.c **** 
 1773              		.loc 1 1232 0
 1774 04b8 4FF47A52 		mov	r2, #16000
 1775              	.L140:
 1776              	.LVL230:
1243:Src/BLDC_controller.c **** 
1244:Src/BLDC_controller.c ****       /* End of Outputs for SubSystem: '<S29>/Default_Control_Type' */
1245:Src/BLDC_controller.c ****     } else {
1246:Src/BLDC_controller.c ****       /* Outputs for IfAction SubSystem: '<S29>/Default_Control_Type' incorporates:
1247:Src/BLDC_controller.c ****        *  ActionPort: '<S30>/Action Port'
1248:Src/BLDC_controller.c ****        */
1249:Src/BLDC_controller.c ****       rtb_Merge = rtb_DataTypeConversion2;
1250:Src/BLDC_controller.c **** 
1251:Src/BLDC_controller.c ****       /* End of Outputs for SubSystem: '<S29>/Default_Control_Type' */
1252:Src/BLDC_controller.c ****     }
1253:Src/BLDC_controller.c **** 
1254:Src/BLDC_controller.c ****     /* End of If: '<S29>/If1' */
1255:Src/BLDC_controller.c **** 
1256:Src/BLDC_controller.c ****     /* If: '<S29>/If2' incorporates:
1257:Src/BLDC_controller.c ****      *  Inport: '<S31>/r_inpTgtScaRaw'
1258:Src/BLDC_controller.c ****      */
1259:Src/BLDC_controller.c ****     rtb_Sum2_h = rtDW->If2_ActiveSubsystem;
 1777              		.loc 1 1259 0
 1778 04bc 94F99000 		ldrsb	r0, [r4, #144]
 1779              	.LVL231:
1260:Src/BLDC_controller.c ****     UnitDelay3 = (int8_T)!(rtDW->z_ctrlMod == 0);
 1780              		.loc 1 1260 0
 1781 04c0 94F89230 		ldrb	r3, [r4, #146]	@ zero_extendqisi2
 1782 04c4 0033     		adds	r3, r3, #0
ARM GAS  /tmp/ccoxnsnM.s 			page 56


 1783 04c6 18BF     		it	ne
 1784 04c8 0123     		movne	r3, #1
 1785 04ca 59B2     		sxtb	r1, r3
 1786              	.LVL232:
1261:Src/BLDC_controller.c ****     rtDW->If2_ActiveSubsystem = UnitDelay3;
 1787              		.loc 1 1261 0
 1788 04cc 84F89010 		strb	r1, [r4, #144]
1262:Src/BLDC_controller.c ****     switch (UnitDelay3) {
 1789              		.loc 1 1262 0
 1790 04d0 A3B1     		cbz	r3, .L141
 1791 04d2 002B     		cmp	r3, #0
 1792 04d4 56D1     		bne	.L142
 1793              	.LVL233:
 1794              	.L127:
1263:Src/BLDC_controller.c ****      case 0:
1264:Src/BLDC_controller.c ****       if (UnitDelay3 != rtb_Sum2_h) {
1265:Src/BLDC_controller.c ****         /* SystemReset for IfAction SubSystem: '<S29>/Open_Mode' incorporates:
1266:Src/BLDC_controller.c ****          *  ActionPort: '<S33>/Action Port'
1267:Src/BLDC_controller.c ****          */
1268:Src/BLDC_controller.c ****         /* SystemReset for Atomic SubSystem: '<S33>/rising_edge_init' */
1269:Src/BLDC_controller.c ****         /* SystemReset for If: '<S29>/If2' incorporates:
1270:Src/BLDC_controller.c ****          *  UnitDelay: '<S35>/UnitDelay'
1271:Src/BLDC_controller.c ****          *  UnitDelay: '<S36>/UnitDelay'
1272:Src/BLDC_controller.c ****          */
1273:Src/BLDC_controller.c ****         rtDW->UnitDelay_DSTATE_e = true;
1274:Src/BLDC_controller.c **** 
1275:Src/BLDC_controller.c ****         /* End of SystemReset for SubSystem: '<S33>/rising_edge_init' */
1276:Src/BLDC_controller.c **** 
1277:Src/BLDC_controller.c ****         /* SystemReset for Atomic SubSystem: '<S33>/Rate_Limiter' */
1278:Src/BLDC_controller.c ****         rtDW->UnitDelay_DSTATE = 0;
1279:Src/BLDC_controller.c **** 
1280:Src/BLDC_controller.c ****         /* End of SystemReset for SubSystem: '<S33>/Rate_Limiter' */
1281:Src/BLDC_controller.c ****         /* End of SystemReset for SubSystem: '<S29>/Open_Mode' */
1282:Src/BLDC_controller.c ****       }
1283:Src/BLDC_controller.c **** 
1284:Src/BLDC_controller.c ****       /* Outputs for IfAction SubSystem: '<S29>/Open_Mode' incorporates:
1285:Src/BLDC_controller.c ****        *  ActionPort: '<S33>/Action Port'
1286:Src/BLDC_controller.c ****        */
1287:Src/BLDC_controller.c ****       /* DataTypeConversion: '<S33>/Data Type Conversion' incorporates:
1288:Src/BLDC_controller.c ****        *  UnitDelay: '<S7>/UnitDelay4'
1289:Src/BLDC_controller.c ****        */
1290:Src/BLDC_controller.c ****       rtb_Gain3 = rtDW->UnitDelay4_DSTATE_eu << 12;
1291:Src/BLDC_controller.c ****       rtb_DataTypeConversion = (rtb_Gain3 & 134217728) != 0 ? rtb_Gain3 |
1292:Src/BLDC_controller.c ****         -134217728 : rtb_Gain3 & 134217727;
1293:Src/BLDC_controller.c **** 
1294:Src/BLDC_controller.c ****       /* Outputs for Atomic SubSystem: '<S33>/rising_edge_init' */
1295:Src/BLDC_controller.c ****       /* UnitDelay: '<S35>/UnitDelay' */
1296:Src/BLDC_controller.c ****       rtb_RelationalOperator9 = rtDW->UnitDelay_DSTATE_e;
1297:Src/BLDC_controller.c **** 
1298:Src/BLDC_controller.c ****       /* Update for UnitDelay: '<S35>/UnitDelay' incorporates:
1299:Src/BLDC_controller.c ****        *  Constant: '<S35>/Constant'
1300:Src/BLDC_controller.c ****        */
1301:Src/BLDC_controller.c ****       rtDW->UnitDelay_DSTATE_e = false;
1302:Src/BLDC_controller.c **** 
1303:Src/BLDC_controller.c ****       /* End of Outputs for SubSystem: '<S33>/rising_edge_init' */
1304:Src/BLDC_controller.c **** 
1305:Src/BLDC_controller.c ****       /* Outputs for Atomic SubSystem: '<S33>/Rate_Limiter' */
ARM GAS  /tmp/ccoxnsnM.s 			page 57


1306:Src/BLDC_controller.c ****       /* Switch: '<S36>/Switch1' incorporates:
1307:Src/BLDC_controller.c ****        *  UnitDelay: '<S36>/UnitDelay'
1308:Src/BLDC_controller.c ****        */
1309:Src/BLDC_controller.c ****       if (rtb_RelationalOperator9) {
1310:Src/BLDC_controller.c ****         rtb_Switch1 = rtb_DataTypeConversion;
1311:Src/BLDC_controller.c ****       } else {
1312:Src/BLDC_controller.c ****         rtb_Switch1 = rtDW->UnitDelay_DSTATE;
1313:Src/BLDC_controller.c ****       }
1314:Src/BLDC_controller.c **** 
1315:Src/BLDC_controller.c ****       /* End of Switch: '<S36>/Switch1' */
1316:Src/BLDC_controller.c **** 
1317:Src/BLDC_controller.c ****       /* Sum: '<S34>/Sum1' */
1318:Src/BLDC_controller.c ****       rtb_Gain3 = -rtb_Switch1;
1319:Src/BLDC_controller.c ****       rtb_Sum1 = (rtb_Gain3 & 134217728) != 0 ? rtb_Gain3 | -134217728 :
1320:Src/BLDC_controller.c ****         rtb_Gain3 & 134217727;
1321:Src/BLDC_controller.c **** 
1322:Src/BLDC_controller.c ****       /* Switch: '<S37>/Switch2' incorporates:
1323:Src/BLDC_controller.c ****        *  Constant: '<S33>/dV_openRate'
1324:Src/BLDC_controller.c ****        *  RelationalOperator: '<S37>/LowerRelop1'
1325:Src/BLDC_controller.c ****        */
1326:Src/BLDC_controller.c ****       if (rtb_Sum1 > rtP->dV_openRate) {
1327:Src/BLDC_controller.c ****         rtb_Sum1 = rtP->dV_openRate;
1328:Src/BLDC_controller.c ****       } else {
1329:Src/BLDC_controller.c ****         /* Gain: '<S33>/Gain3' */
1330:Src/BLDC_controller.c ****         rtb_Gain3 = -rtP->dV_openRate;
1331:Src/BLDC_controller.c ****         rtb_Gain3 = (rtb_Gain3 & 134217728) != 0 ? rtb_Gain3 | -134217728 :
1332:Src/BLDC_controller.c ****           rtb_Gain3 & 134217727;
1333:Src/BLDC_controller.c **** 
1334:Src/BLDC_controller.c ****         /* Switch: '<S37>/Switch' incorporates:
1335:Src/BLDC_controller.c ****          *  RelationalOperator: '<S37>/UpperRelop'
1336:Src/BLDC_controller.c ****          */
1337:Src/BLDC_controller.c ****         if (rtb_Sum1 < rtb_Gain3) {
1338:Src/BLDC_controller.c ****           rtb_Sum1 = rtb_Gain3;
1339:Src/BLDC_controller.c ****         }
1340:Src/BLDC_controller.c **** 
1341:Src/BLDC_controller.c ****         /* End of Switch: '<S37>/Switch' */
1342:Src/BLDC_controller.c ****       }
1343:Src/BLDC_controller.c **** 
1344:Src/BLDC_controller.c ****       /* End of Switch: '<S37>/Switch2' */
1345:Src/BLDC_controller.c **** 
1346:Src/BLDC_controller.c ****       /* Sum: '<S34>/Sum2' */
1347:Src/BLDC_controller.c ****       rtb_Gain3 = rtb_Sum1 + rtb_Switch1;
1348:Src/BLDC_controller.c ****       rtb_Switch1 = (rtb_Gain3 & 134217728) != 0 ? rtb_Gain3 | -134217728 :
1349:Src/BLDC_controller.c ****         rtb_Gain3 & 134217727;
1350:Src/BLDC_controller.c **** 
1351:Src/BLDC_controller.c ****       /* Switch: '<S36>/Switch2' */
1352:Src/BLDC_controller.c ****       if (rtb_RelationalOperator9) {
1353:Src/BLDC_controller.c ****         /* Update for UnitDelay: '<S36>/UnitDelay' */
1354:Src/BLDC_controller.c ****         rtDW->UnitDelay_DSTATE = rtb_DataTypeConversion;
1355:Src/BLDC_controller.c ****       } else {
1356:Src/BLDC_controller.c ****         /* Update for UnitDelay: '<S36>/UnitDelay' */
1357:Src/BLDC_controller.c ****         rtDW->UnitDelay_DSTATE = rtb_Switch1;
1358:Src/BLDC_controller.c ****       }
1359:Src/BLDC_controller.c **** 
1360:Src/BLDC_controller.c ****       /* End of Switch: '<S36>/Switch2' */
1361:Src/BLDC_controller.c ****       /* End of Outputs for SubSystem: '<S33>/Rate_Limiter' */
1362:Src/BLDC_controller.c **** 
ARM GAS  /tmp/ccoxnsnM.s 			page 58


1363:Src/BLDC_controller.c ****       /* DataTypeConversion: '<S33>/Data Type Conversion1' */
1364:Src/BLDC_controller.c ****       rtDW->Merge1 = (int16_T)(rtb_Switch1 >> 12);
1365:Src/BLDC_controller.c **** 
1366:Src/BLDC_controller.c ****       /* End of Outputs for SubSystem: '<S29>/Open_Mode' */
1367:Src/BLDC_controller.c ****       break;
1368:Src/BLDC_controller.c **** 
1369:Src/BLDC_controller.c ****      case 1:
1370:Src/BLDC_controller.c ****       /* Outputs for IfAction SubSystem: '<S29>/Default_Mode' incorporates:
1371:Src/BLDC_controller.c ****        *  ActionPort: '<S31>/Action Port'
1372:Src/BLDC_controller.c ****        */
1373:Src/BLDC_controller.c ****       rtDW->Merge1 = rtb_Merge;
1374:Src/BLDC_controller.c **** 
1375:Src/BLDC_controller.c ****       /* End of Outputs for SubSystem: '<S29>/Default_Mode' */
1376:Src/BLDC_controller.c ****       break;
1377:Src/BLDC_controller.c ****     }
1378:Src/BLDC_controller.c **** 
1379:Src/BLDC_controller.c ****     /* End of If: '<S29>/If2' */
1380:Src/BLDC_controller.c ****     /* End of Outputs for SubSystem: '<S1>/F03_Control_Mode_Manager' */
1381:Src/BLDC_controller.c ****   }
1382:Src/BLDC_controller.c **** 
1383:Src/BLDC_controller.c ****   /* End of If: '<S1>/If4' */
1384:Src/BLDC_controller.c **** 
1385:Src/BLDC_controller.c ****   /* UnitDelay: '<S8>/UnitDelay5' */
1386:Src/BLDC_controller.c ****   rtb_RelationalOperator9 = rtDW->UnitDelay5_DSTATE_l;
 1795              		.loc 1 1386 0
 1796 04d6 94F89C30 		ldrb	r3, [r4, #156]	@ zero_extendqisi2
 1797 04da 0A93     		str	r3, [sp, #40]
 1798              	.LVL234:
1387:Src/BLDC_controller.c **** 
1388:Src/BLDC_controller.c ****   /* Saturate: '<S1>/Saturation' incorporates:
1389:Src/BLDC_controller.c ****    *  Inport: '<Root>/i_phaAB'
1390:Src/BLDC_controller.c ****    */
1391:Src/BLDC_controller.c ****   rtb_Gain3 = rtU->i_phaAB << 4;
 1799              		.loc 1 1391 0
 1800 04dc B7F90890 		ldrsh	r9, [r7, #8]
 1801 04e0 4FEA0919 		lsl	r9, r9, #4
 1802              	.LVL235:
1392:Src/BLDC_controller.c ****   if (rtb_Gain3 >= 27200) {
 1803              		.loc 1 1392 0
 1804 04e4 46F63F23 		movw	r3, #27199
 1805 04e8 9945     		cmp	r9, r3
 1806 04ea 4EDC     		bgt	.L257
1393:Src/BLDC_controller.c ****     rtb_Merge = 27200;
1394:Src/BLDC_controller.c ****   } else if (rtb_Gain3 <= -27200) {
 1807              		.loc 1 1394 0
 1808 04ec 4B4B     		ldr	r3, .L343+8
 1809 04ee 9945     		cmp	r9, r3
 1810 04f0 59DB     		blt	.L258
1395:Src/BLDC_controller.c ****     rtb_Merge = -27200;
1396:Src/BLDC_controller.c ****   } else {
1397:Src/BLDC_controller.c ****     rtb_Merge = (int16_T)(rtU->i_phaAB << 4);
 1811              		.loc 1 1397 0
 1812 04f2 0FFA89F9 		sxth	r9, r9
 1813              	.LVL236:
 1814 04f6 4AE0     		b	.L156
 1815              	.LVL237:
 1816              	.L255:
ARM GAS  /tmp/ccoxnsnM.s 			page 59


1249:Src/BLDC_controller.c **** 
 1817              		.loc 1 1249 0
 1818 04f8 5246     		mov	r2, r10
 1819 04fa DFE7     		b	.L140
 1820              	.LVL238:
 1821              	.L141:
1264:Src/BLDC_controller.c ****         /* SystemReset for IfAction SubSystem: '<S29>/Open_Mode' incorporates:
 1822              		.loc 1 1264 0
 1823 04fc 8842     		cmp	r0, r1
 1824 04fe 04D0     		beq	.L143
1273:Src/BLDC_controller.c **** 
 1825              		.loc 1 1273 0
 1826 0500 0123     		movs	r3, #1
 1827 0502 84F89E30 		strb	r3, [r4, #158]
1278:Src/BLDC_controller.c **** 
 1828              		.loc 1 1278 0
 1829 0506 0023     		movs	r3, #0
 1830 0508 E364     		str	r3, [r4, #76]
 1831              	.L143:
1290:Src/BLDC_controller.c ****       rtb_DataTypeConversion = (rtb_Gain3 & 134217728) != 0 ? rtb_Gain3 |
 1832              		.loc 1 1290 0
 1833 050a B4F98820 		ldrsh	r2, [r4, #136]
 1834              	.LVL239:
 1835 050e 1203     		lsls	r2, r2, #12
 1836              	.LVL240:
1292:Src/BLDC_controller.c **** 
 1837              		.loc 1 1292 0
 1838 0510 12F0006F 		tst	r2, #134217728
 1839 0514 26D0     		beq	.L144
1292:Src/BLDC_controller.c **** 
 1840              		.loc 1 1292 0 is_stmt 0 discriminator 1
 1841 0516 42F07842 		orr	r2, r2, #-134217728
 1842              	.LVL241:
 1843              	.L145:
1296:Src/BLDC_controller.c **** 
 1844              		.loc 1 1296 0 is_stmt 1
 1845 051a 94F89E00 		ldrb	r0, [r4, #158]	@ zero_extendqisi2
 1846              	.LVL242:
1301:Src/BLDC_controller.c **** 
 1847              		.loc 1 1301 0
 1848 051e 0023     		movs	r3, #0
 1849 0520 84F89E30 		strb	r3, [r4, #158]
1309:Src/BLDC_controller.c ****         rtb_Switch1 = rtb_DataTypeConversion;
 1850              		.loc 1 1309 0
 1851 0524 08BB     		cbnz	r0, .L256
1312:Src/BLDC_controller.c ****       }
 1852              		.loc 1 1312 0
 1853 0526 E36C     		ldr	r3, [r4, #76]
 1854              	.LVL243:
 1855              	.L146:
1318:Src/BLDC_controller.c ****       rtb_Sum1 = (rtb_Gain3 & 134217728) != 0 ? rtb_Gain3 | -134217728 :
 1856              		.loc 1 1318 0
 1857 0528 5942     		negs	r1, r3
 1858              	.LVL244:
1319:Src/BLDC_controller.c ****         rtb_Gain3 & 134217727;
 1859              		.loc 1 1319 0
 1860 052a 11F0006F 		tst	r1, #134217728
ARM GAS  /tmp/ccoxnsnM.s 			page 60


 1861 052e 1ED0     		beq	.L147
1319:Src/BLDC_controller.c ****         rtb_Gain3 & 134217727;
 1862              		.loc 1 1319 0 is_stmt 0 discriminator 1
 1863 0530 41F0784E 		orr	lr, r1, #-134217728
 1864              	.L148:
 1865              	.LVL245:
1326:Src/BLDC_controller.c ****         rtb_Sum1 = rtP->dV_openRate;
 1866              		.loc 1 1326 0 is_stmt 1 discriminator 4
 1867 0534 2968     		ldr	r1, [r5]
 1868              	.LVL246:
 1869 0536 8E45     		cmp	lr, r1
 1870 0538 08DC     		bgt	.L149
1330:Src/BLDC_controller.c ****         rtb_Gain3 = (rtb_Gain3 & 134217728) != 0 ? rtb_Gain3 | -134217728 :
 1871              		.loc 1 1330 0
 1872 053a 4942     		negs	r1, r1
 1873              	.LVL247:
1331:Src/BLDC_controller.c ****           rtb_Gain3 & 134217727;
 1874              		.loc 1 1331 0
 1875 053c 11F0006F 		tst	r1, #134217728
 1876 0540 18D0     		beq	.L150
1331:Src/BLDC_controller.c ****           rtb_Gain3 & 134217727;
 1877              		.loc 1 1331 0 is_stmt 0 discriminator 1
 1878 0542 41F07841 		orr	r1, r1, #-134217728
 1879              	.LVL248:
 1880              	.L151:
1337:Src/BLDC_controller.c ****           rtb_Sum1 = rtb_Gain3;
 1881              		.loc 1 1337 0 is_stmt 1 discriminator 4
 1882 0546 8E45     		cmp	lr, r1
 1883 0548 00DB     		blt	.L149
1319:Src/BLDC_controller.c ****         rtb_Gain3 & 134217727;
 1884              		.loc 1 1319 0
 1885 054a 7146     		mov	r1, lr
 1886              	.LVL249:
 1887              	.L149:
1347:Src/BLDC_controller.c ****       rtb_Switch1 = (rtb_Gain3 & 134217728) != 0 ? rtb_Gain3 | -134217728 :
 1888              		.loc 1 1347 0
 1889 054c 0B44     		add	r3, r3, r1
 1890              	.LVL250:
1348:Src/BLDC_controller.c ****         rtb_Gain3 & 134217727;
 1891              		.loc 1 1348 0
 1892 054e 13F0006F 		tst	r3, #134217728
 1893 0552 12D0     		beq	.L152
1348:Src/BLDC_controller.c ****         rtb_Gain3 & 134217727;
 1894              		.loc 1 1348 0 is_stmt 0 discriminator 1
 1895 0554 43F07843 		orr	r3, r3, #-134217728
 1896              	.LVL251:
 1897              	.L153:
1352:Src/BLDC_controller.c ****         /* Update for UnitDelay: '<S36>/UnitDelay' */
 1898              		.loc 1 1352 0 is_stmt 1 discriminator 4
 1899 0558 90B1     		cbz	r0, .L154
1354:Src/BLDC_controller.c ****       } else {
 1900              		.loc 1 1354 0
 1901 055a E264     		str	r2, [r4, #76]
 1902              	.L155:
1364:Src/BLDC_controller.c **** 
 1903              		.loc 1 1364 0
 1904 055c 1B13     		asrs	r3, r3, #12
ARM GAS  /tmp/ccoxnsnM.s 			page 61


 1905              	.LVL252:
 1906 055e A4F85C30 		strh	r3, [r4, #92]	@ movhi
1367:Src/BLDC_controller.c **** 
 1907              		.loc 1 1367 0
 1908 0562 B8E7     		b	.L127
 1909              	.LVL253:
 1910              	.L144:
1292:Src/BLDC_controller.c **** 
 1911              		.loc 1 1292 0 discriminator 2
 1912 0564 22F07842 		bic	r2, r2, #-134217728
 1913              	.LVL254:
 1914 0568 D7E7     		b	.L145
 1915              	.LVL255:
 1916              	.L256:
1310:Src/BLDC_controller.c ****       } else {
 1917              		.loc 1 1310 0
 1918 056a 1346     		mov	r3, r2
 1919 056c DCE7     		b	.L146
 1920              	.LVL256:
 1921              	.L147:
1319:Src/BLDC_controller.c ****         rtb_Gain3 & 134217727;
 1922              		.loc 1 1319 0 discriminator 2
 1923 056e 21F0784E 		bic	lr, r1, #-134217728
 1924 0572 DFE7     		b	.L148
 1925              	.LVL257:
 1926              	.L150:
1331:Src/BLDC_controller.c ****           rtb_Gain3 & 134217727;
 1927              		.loc 1 1331 0 discriminator 2
 1928 0574 21F07841 		bic	r1, r1, #-134217728
 1929              	.LVL258:
 1930 0578 E5E7     		b	.L151
 1931              	.LVL259:
 1932              	.L152:
1348:Src/BLDC_controller.c ****         rtb_Gain3 & 134217727;
 1933              		.loc 1 1348 0 discriminator 2
 1934 057a 23F07843 		bic	r3, r3, #-134217728
 1935              	.LVL260:
 1936 057e EBE7     		b	.L153
 1937              	.LVL261:
 1938              	.L154:
1357:Src/BLDC_controller.c ****       }
 1939              		.loc 1 1357 0
 1940 0580 E364     		str	r3, [r4, #76]
 1941 0582 EBE7     		b	.L155
 1942              	.LVL262:
 1943              	.L142:
1373:Src/BLDC_controller.c **** 
 1944              		.loc 1 1373 0
 1945 0584 A4F85C20 		strh	r2, [r4, #92]	@ movhi
1376:Src/BLDC_controller.c ****     }
 1946              		.loc 1 1376 0
 1947 0588 A5E7     		b	.L127
 1948              	.LVL263:
 1949              	.L257:
1393:Src/BLDC_controller.c ****   } else if (rtb_Gain3 <= -27200) {
 1950              		.loc 1 1393 0
 1951 058a 46F64029 		movw	r9, #27200
ARM GAS  /tmp/ccoxnsnM.s 			page 62


 1952              	.LVL264:
 1953              	.L156:
1398:Src/BLDC_controller.c ****   }
1399:Src/BLDC_controller.c **** 
1400:Src/BLDC_controller.c ****   /* End of Saturate: '<S1>/Saturation' */
1401:Src/BLDC_controller.c **** 
1402:Src/BLDC_controller.c ****   /* Saturate: '<S1>/Saturation1' incorporates:
1403:Src/BLDC_controller.c ****    *  Inport: '<Root>/i_phaBC'
1404:Src/BLDC_controller.c ****    */
1405:Src/BLDC_controller.c ****   rtb_Gain3 = rtU->i_phaBC << 4;
 1954              		.loc 1 1405 0
 1955 058e B7F90A30 		ldrsh	r3, [r7, #10]
 1956 0592 1B01     		lsls	r3, r3, #4
 1957              	.LVL265:
1406:Src/BLDC_controller.c ****   if (rtb_Gain3 >= 27200) {
 1958              		.loc 1 1406 0
 1959 0594 46F63F22 		movw	r2, #27199
 1960 0598 9342     		cmp	r3, r2
 1961 059a 07DC     		bgt	.L259
1407:Src/BLDC_controller.c ****     rtb_Saturation1 = 27200;
1408:Src/BLDC_controller.c ****   } else if (rtb_Gain3 <= -27200) {
 1962              		.loc 1 1408 0
 1963 059c 1F4A     		ldr	r2, .L343+8
 1964 059e 9342     		cmp	r3, r2
 1965 05a0 1EDB     		blt	.L260
1409:Src/BLDC_controller.c ****     rtb_Saturation1 = -27200;
1410:Src/BLDC_controller.c ****   } else {
1411:Src/BLDC_controller.c ****     rtb_Saturation1 = (int16_T)(rtU->i_phaBC << 4);
 1966              		.loc 1 1411 0
 1967 05a2 1BB2     		sxth	r3, r3
 1968              	.LVL266:
 1969 05a4 04E0     		b	.L157
 1970              	.LVL267:
 1971              	.L258:
1395:Src/BLDC_controller.c ****   } else {
 1972              		.loc 1 1395 0
 1973 05a6 DFF87890 		ldr	r9, .L343+12
 1974              	.LVL268:
 1975 05aa F0E7     		b	.L156
 1976              	.LVL269:
 1977              	.L259:
1407:Src/BLDC_controller.c ****     rtb_Saturation1 = 27200;
 1978              		.loc 1 1407 0
 1979 05ac 46F64023 		movw	r3, #27200
 1980              	.LVL270:
 1981              	.L157:
1412:Src/BLDC_controller.c ****   }
1413:Src/BLDC_controller.c **** 
1414:Src/BLDC_controller.c ****   /* End of Saturate: '<S1>/Saturation1' */
1415:Src/BLDC_controller.c **** 
1416:Src/BLDC_controller.c ****   /* If: '<S1>/If3' incorporates:
1417:Src/BLDC_controller.c ****    *  Constant: '<S1>/CTRL_COMM2'
1418:Src/BLDC_controller.c ****    *  Constant: '<S1>/b_fieldWeakEna'
1419:Src/BLDC_controller.c ****    *  Constant: '<S1>/z_ctrlTypSel1'
1420:Src/BLDC_controller.c ****    *  Logic: '<S1>/Logical Operator1'
1421:Src/BLDC_controller.c ****    *  RelationalOperator: '<S1>/Relational Operator1'
1422:Src/BLDC_controller.c ****    *  UnitDelay: '<S8>/UnitDelay5'
ARM GAS  /tmp/ccoxnsnM.s 			page 63


1423:Src/BLDC_controller.c ****    */
1424:Src/BLDC_controller.c ****   if (rtP->b_fieldWeakEna && rtDW->UnitDelay5_DSTATE_l && (rtP->z_ctrlTypSel !=
 1982              		.loc 1 1424 0
 1983 05b0 95F8F820 		ldrb	r2, [r5, #248]	@ zero_extendqisi2
 1984 05b4 002A     		cmp	r2, #0
 1985 05b6 5DD0     		beq	.L158
 1986              		.loc 1 1424 0 is_stmt 0 discriminator 1
 1987 05b8 0A9A     		ldr	r2, [sp, #40]
 1988 05ba 002A     		cmp	r2, #0
 1989 05bc 5AD0     		beq	.L158
 1990              		.loc 1 1424 0 discriminator 2
 1991 05be 95F8F620 		ldrb	r2, [r5, #246]	@ zero_extendqisi2
 1992 05c2 002A     		cmp	r2, #0
 1993 05c4 56D0     		beq	.L158
1425:Src/BLDC_controller.c ****        0)) {
1426:Src/BLDC_controller.c ****     /* Outputs for IfAction SubSystem: '<S1>/F04_Field_Weakening' incorporates:
1427:Src/BLDC_controller.c ****      *  ActionPort: '<S5>/Action Port'
1428:Src/BLDC_controller.c ****      */
1429:Src/BLDC_controller.c ****     /* Abs: '<S5>/Abs5' incorporates:
1430:Src/BLDC_controller.c ****      *  DataTypeConversion: '<S1>/Data Type Conversion2'
1431:Src/BLDC_controller.c ****      */
1432:Src/BLDC_controller.c ****     if (rtb_DataTypeConversion2 < 0) {
 1994              		.loc 1 1432 0 is_stmt 1
 1995 05c6 BAF1000F 		cmp	r10, #0
 1996 05ca 0BDB     		blt	.L325
 1997              	.L159:
1433:Src/BLDC_controller.c ****       rtb_DataTypeConversion2 = (int16_T)-rtb_DataTypeConversion2;
1434:Src/BLDC_controller.c ****     }
1435:Src/BLDC_controller.c **** 
1436:Src/BLDC_controller.c ****     /* End of Abs: '<S5>/Abs5' */
1437:Src/BLDC_controller.c **** 
1438:Src/BLDC_controller.c ****     /* Switch: '<S39>/Switch2' incorporates:
1439:Src/BLDC_controller.c ****      *  Constant: '<S5>/r_fieldWeakHi'
1440:Src/BLDC_controller.c ****      *  Constant: '<S5>/r_fieldWeakLo'
1441:Src/BLDC_controller.c ****      *  RelationalOperator: '<S39>/LowerRelop1'
1442:Src/BLDC_controller.c ****      *  RelationalOperator: '<S39>/UpperRelop'
1443:Src/BLDC_controller.c ****      *  Switch: '<S39>/Switch'
1444:Src/BLDC_controller.c ****      */
1445:Src/BLDC_controller.c ****     if (rtb_DataTypeConversion2 > rtP->r_fieldWeakHi) {
 1998              		.loc 1 1445 0
 1999 05cc B5F9DEE0 		ldrsh	lr, [r5, #222]
 2000 05d0 F245     		cmp	r10, lr
 2001 05d2 0CDC     		bgt	.L261
1446:Src/BLDC_controller.c ****       rtb_DataTypeConversion2 = rtP->r_fieldWeakHi;
1447:Src/BLDC_controller.c ****     } else {
1448:Src/BLDC_controller.c ****       if (rtb_DataTypeConversion2 < rtP->r_fieldWeakLo) {
 2002              		.loc 1 1448 0
 2003 05d4 B5F9E0B0 		ldrsh	fp, [r5, #224]
 2004 05d8 DA45     		cmp	r10, fp
 2005 05da 09DB     		blt	.L160
 2006 05dc D346     		mov	fp, r10
 2007 05de 07E0     		b	.L160
 2008              	.LVL271:
 2009              	.L260:
1409:Src/BLDC_controller.c ****   } else {
 2010              		.loc 1 1409 0
 2011 05e0 0F4B     		ldr	r3, .L343+12
ARM GAS  /tmp/ccoxnsnM.s 			page 64


 2012              	.LVL272:
 2013 05e2 E5E7     		b	.L157
 2014              	.LVL273:
 2015              	.L325:
1433:Src/BLDC_controller.c ****       rtb_DataTypeConversion2 = (int16_T)-rtb_DataTypeConversion2;
 2016              		.loc 1 1433 0
 2017 05e4 CAF1000A 		rsb	r10, r10, #0
 2018              	.LVL274:
 2019 05e8 0FFA8AFA 		sxth	r10, r10
 2020              	.LVL275:
 2021 05ec EEE7     		b	.L159
 2022              	.L261:
1446:Src/BLDC_controller.c ****       rtb_DataTypeConversion2 = rtP->r_fieldWeakHi;
 2023              		.loc 1 1446 0
 2024 05ee F346     		mov	fp, lr
 2025              	.L160:
 2026              	.LVL276:
1449:Src/BLDC_controller.c ****         /* Switch: '<S39>/Switch' incorporates:
1450:Src/BLDC_controller.c ****          *  Constant: '<S5>/r_fieldWeakLo'
1451:Src/BLDC_controller.c ****          */
1452:Src/BLDC_controller.c ****         rtb_DataTypeConversion2 = rtP->r_fieldWeakLo;
1453:Src/BLDC_controller.c ****       }
1454:Src/BLDC_controller.c ****     }
1455:Src/BLDC_controller.c **** 
1456:Src/BLDC_controller.c ****     /* End of Switch: '<S39>/Switch2' */
1457:Src/BLDC_controller.c **** 
1458:Src/BLDC_controller.c ****     /* Switch: '<S5>/Switch2' incorporates:
1459:Src/BLDC_controller.c ****      *  Constant: '<S5>/CTRL_COMM2'
1460:Src/BLDC_controller.c ****      *  Constant: '<S5>/a_phaAdvMax'
1461:Src/BLDC_controller.c ****      *  Constant: '<S5>/id_fieldWeakMax'
1462:Src/BLDC_controller.c ****      *  RelationalOperator: '<S5>/Relational Operator1'
1463:Src/BLDC_controller.c ****      */
1464:Src/BLDC_controller.c ****     if (rtP->z_ctrlTypSel == 2) {
 2027              		.loc 1 1464 0
 2028 05f0 022A     		cmp	r2, #2
 2029 05f2 0CD0     		beq	.L326
1465:Src/BLDC_controller.c ****       rtb_Merge_f_idx_1 = rtP->id_fieldWeakMax;
1466:Src/BLDC_controller.c ****     } else {
1467:Src/BLDC_controller.c ****       rtb_Merge_f_idx_1 = rtP->a_phaAdvMax;
 2030              		.loc 1 1467 0
 2031 05f4 B5F9CAA0 		ldrsh	r10, [r5, #202]
 2032              	.LVL277:
 2033              	.L162:
1468:Src/BLDC_controller.c ****     }
1469:Src/BLDC_controller.c **** 
1470:Src/BLDC_controller.c ****     /* End of Switch: '<S5>/Switch2' */
1471:Src/BLDC_controller.c **** 
1472:Src/BLDC_controller.c ****     /* Switch: '<S38>/Switch2' incorporates:
1473:Src/BLDC_controller.c ****      *  Constant: '<S5>/n_fieldWeakAuthHi'
1474:Src/BLDC_controller.c ****      *  Constant: '<S5>/n_fieldWeakAuthLo'
1475:Src/BLDC_controller.c ****      *  RelationalOperator: '<S38>/LowerRelop1'
1476:Src/BLDC_controller.c ****      *  RelationalOperator: '<S38>/UpperRelop'
1477:Src/BLDC_controller.c ****      *  Switch: '<S38>/Switch'
1478:Src/BLDC_controller.c ****      */
1479:Src/BLDC_controller.c ****     if (rtb_Abs5 > rtP->n_fieldWeakAuthHi) {
 2034              		.loc 1 1479 0
 2035 05f8 B5F9D400 		ldrsh	r0, [r5, #212]
ARM GAS  /tmp/ccoxnsnM.s 			page 65


 2036 05fc 0699     		ldr	r1, [sp, #24]
 2037 05fe 8142     		cmp	r1, r0
 2038 0600 10DC     		bgt	.L262
1480:Src/BLDC_controller.c ****       rtb_Switch2_l = rtP->n_fieldWeakAuthHi;
1481:Src/BLDC_controller.c ****     } else if (rtb_Abs5 < rtP->n_fieldWeakAuthLo) {
 2039              		.loc 1 1481 0
 2040 0602 B5F9D620 		ldrsh	r2, [r5, #214]
 2041 0606 9142     		cmp	r1, r2
 2042 0608 0DDB     		blt	.L163
1482:Src/BLDC_controller.c ****       /* Switch: '<S38>/Switch' incorporates:
1483:Src/BLDC_controller.c ****        *  Constant: '<S5>/n_fieldWeakAuthLo'
1484:Src/BLDC_controller.c ****        */
1485:Src/BLDC_controller.c ****       rtb_Switch2_l = rtP->n_fieldWeakAuthLo;
1486:Src/BLDC_controller.c ****     } else {
1487:Src/BLDC_controller.c ****       rtb_Switch2_l = rtb_Abs5;
 2043              		.loc 1 1487 0
 2044 060a 0A46     		mov	r2, r1
 2045 060c 0BE0     		b	.L163
 2046              	.LVL278:
 2047              	.L326:
1465:Src/BLDC_controller.c ****     } else {
 2048              		.loc 1 1465 0
 2049 060e B5F9CEA0 		ldrsh	r10, [r5, #206]
 2050              	.LVL279:
 2051 0612 F1E7     		b	.L162
 2052              	.L344:
 2053              		.align	2
 2054              	.L343:
 2055 0614 80C1FFFF 		.word	-16000
 2056 0618 D34D6210 		.word	274877907
 2057 061c C195FFFF 		.word	-27199
 2058 0620 C095FFFF 		.word	-27200
 2059              	.L262:
1480:Src/BLDC_controller.c ****       rtb_Switch2_l = rtP->n_fieldWeakAuthHi;
 2060              		.loc 1 1480 0
 2061 0624 0246     		mov	r2, r0
 2062              	.L163:
 2063              	.LVL280:
1488:Src/BLDC_controller.c ****     }
1489:Src/BLDC_controller.c **** 
1490:Src/BLDC_controller.c ****     /* End of Switch: '<S38>/Switch2' */
1491:Src/BLDC_controller.c **** 
1492:Src/BLDC_controller.c ****     /* Product: '<S5>/Divide3' incorporates:
1493:Src/BLDC_controller.c ****      *  Constant: '<S5>/n_fieldWeakAuthHi'
1494:Src/BLDC_controller.c ****      *  Constant: '<S5>/n_fieldWeakAuthLo'
1495:Src/BLDC_controller.c ****      *  Constant: '<S5>/r_fieldWeakHi'
1496:Src/BLDC_controller.c ****      *  Constant: '<S5>/r_fieldWeakLo'
1497:Src/BLDC_controller.c ****      *  Product: '<S5>/Divide1'
1498:Src/BLDC_controller.c ****      *  Product: '<S5>/Divide14'
1499:Src/BLDC_controller.c ****      *  Product: '<S5>/Divide2'
1500:Src/BLDC_controller.c ****      *  Sum: '<S5>/Sum1'
1501:Src/BLDC_controller.c ****      *  Sum: '<S5>/Sum2'
1502:Src/BLDC_controller.c ****      *  Sum: '<S5>/Sum3'
1503:Src/BLDC_controller.c ****      *  Sum: '<S5>/Sum4'
1504:Src/BLDC_controller.c ****      */
1505:Src/BLDC_controller.c ****     rtDW->Divide3 = (int16_T)(((uint16_T)(((uint32_T)(uint16_T)(((int16_T)
1506:Src/BLDC_controller.c ****       (rtb_DataTypeConversion2 - rtP->r_fieldWeakLo) << 15) / (int16_T)
ARM GAS  /tmp/ccoxnsnM.s 			page 66


 2064              		.loc 1 1506 0
 2065 0626 B5F8E0C0 		ldrh	ip, [r5, #224]
 2066 062a ABEB0C01 		sub	r1, fp, ip
1505:Src/BLDC_controller.c ****       (rtb_DataTypeConversion2 - rtP->r_fieldWeakLo) << 15) / (int16_T)
 2067              		.loc 1 1505 0
 2068 062e 09B2     		sxth	r1, r1
 2069              		.loc 1 1506 0
 2070 0630 C903     		lsls	r1, r1, #15
1507:Src/BLDC_controller.c ****       (rtP->r_fieldWeakHi - rtP->r_fieldWeakLo)) * (uint16_T)(((int16_T)
 2071              		.loc 1 1507 0
 2072 0632 1FFA8EFE 		uxth	lr, lr
 2073 0636 AEEB0C0E 		sub	lr, lr, ip
1506:Src/BLDC_controller.c ****       (rtP->r_fieldWeakHi - rtP->r_fieldWeakLo)) * (uint16_T)(((int16_T)
 2074              		.loc 1 1506 0
 2075 063a 0FFA8EFE 		sxth	lr, lr
 2076 063e 91FBFEF1 		sdiv	r1, r1, lr
1505:Src/BLDC_controller.c ****       (rtb_DataTypeConversion2 - rtP->r_fieldWeakLo) << 15) / (int16_T)
 2077              		.loc 1 1505 0
 2078 0642 89B2     		uxth	r1, r1
1508:Src/BLDC_controller.c ****       (rtb_Switch2_l - rtP->n_fieldWeakAuthLo) << 15) / (int16_T)
 2079              		.loc 1 1508 0
 2080 0644 B5F8D6E0 		ldrh	lr, [r5, #214]
 2081 0648 A2EB0E02 		sub	r2, r2, lr
 2082              	.LVL281:
1507:Src/BLDC_controller.c ****       (rtP->r_fieldWeakHi - rtP->r_fieldWeakLo)) * (uint16_T)(((int16_T)
 2083              		.loc 1 1507 0
 2084 064c 12B2     		sxth	r2, r2
 2085              		.loc 1 1508 0
 2086 064e D203     		lsls	r2, r2, #15
1509:Src/BLDC_controller.c ****       (rtP->n_fieldWeakAuthHi - rtP->n_fieldWeakAuthLo))) >> 15) *
 2087              		.loc 1 1509 0
 2088 0650 80B2     		uxth	r0, r0
 2089 0652 A0EB0E0E 		sub	lr, r0, lr
1508:Src/BLDC_controller.c ****       (rtb_Switch2_l - rtP->n_fieldWeakAuthLo) << 15) / (int16_T)
 2090              		.loc 1 1508 0
 2091 0656 0FFA8EFE 		sxth	lr, lr
 2092 065a 92FBFEF2 		sdiv	r2, r2, lr
1507:Src/BLDC_controller.c ****       (rtb_Switch2_l - rtP->n_fieldWeakAuthLo) << 15) / (int16_T)
 2093              		.loc 1 1507 0
 2094 065e 92B2     		uxth	r2, r2
 2095 0660 02FB01F2 		mul	r2, r2, r1
1505:Src/BLDC_controller.c ****       (rtb_DataTypeConversion2 - rtP->r_fieldWeakLo) << 15) / (int16_T)
 2096              		.loc 1 1505 0
 2097 0664 C2F3CF32 		ubfx	r2, r2, #15, #16
 2098              		.loc 1 1509 0
 2099 0668 02FB0AFA 		mul	r10, r2, r10
 2100              	.LVL282:
1505:Src/BLDC_controller.c ****       (rtb_DataTypeConversion2 - rtP->r_fieldWeakLo) << 15) / (int16_T)
 2101              		.loc 1 1505 0
 2102 066c 4AF3CF3A 		sbfx	r10, r10, #15, #16
 2103 0670 A4F85EA0 		strh	r10, [r4, #94]	@ movhi
 2104              	.LVL283:
 2105              	.L158:
1510:Src/BLDC_controller.c ****       rtb_Merge_f_idx_1) >> 15);
1511:Src/BLDC_controller.c **** 
1512:Src/BLDC_controller.c ****     /* End of Outputs for SubSystem: '<S1>/F04_Field_Weakening' */
1513:Src/BLDC_controller.c ****   }
ARM GAS  /tmp/ccoxnsnM.s 			page 67


1514:Src/BLDC_controller.c **** 
1515:Src/BLDC_controller.c ****   /* End of If: '<S1>/If3' */
1516:Src/BLDC_controller.c **** 
1517:Src/BLDC_controller.c ****   /* If: '<S1>/If1' incorporates:
1518:Src/BLDC_controller.c ****    *  Constant: '<S1>/z_ctrlTypSel1'
1519:Src/BLDC_controller.c ****    */
1520:Src/BLDC_controller.c ****   rtb_Sum2_h = rtDW->If1_ActiveSubsystem;
 2106              		.loc 1 1520 0
 2107 0674 94F98F20 		ldrsb	r2, [r4, #143]
 2108              	.LVL284:
1521:Src/BLDC_controller.c ****   UnitDelay3 = -1;
1522:Src/BLDC_controller.c ****   if (rtP->z_ctrlTypSel == 2) {
 2109              		.loc 1 1522 0
 2110 0678 95F8F610 		ldrb	r1, [r5, #246]	@ zero_extendqisi2
 2111 067c 0229     		cmp	r1, #2
 2112 067e 46D0     		beq	.L263
1521:Src/BLDC_controller.c ****   UnitDelay3 = -1;
 2113              		.loc 1 1521 0
 2114 0680 4FF0FF3B 		mov	fp, #-1
 2115              	.L164:
 2116              	.LVL285:
1523:Src/BLDC_controller.c ****     UnitDelay3 = 0;
1524:Src/BLDC_controller.c ****   }
1525:Src/BLDC_controller.c **** 
1526:Src/BLDC_controller.c ****   rtDW->If1_ActiveSubsystem = UnitDelay3;
 2117              		.loc 1 1526 0
 2118 0684 84F88FB0 		strb	fp, [r4, #143]
1527:Src/BLDC_controller.c ****   if ((rtb_Sum2_h != UnitDelay3) && (rtb_Sum2_h == 0)) {
 2119              		.loc 1 1527 0
 2120 0688 9345     		cmp	fp, r2
 2121 068a 0ED0     		beq	.L165
 2122              		.loc 1 1527 0 is_stmt 0 discriminator 1
 2123 068c 6AB9     		cbnz	r2, .L165
1528:Src/BLDC_controller.c ****     /* Disable for If: '<S6>/If2' */
1529:Src/BLDC_controller.c ****     if (rtDW->If2_ActiveSubsystem_a == 0) {
1530:Src/BLDC_controller.c ****       /* Disable for Outport: '<S41>/iq' */
1531:Src/BLDC_controller.c ****       rtDW->DataTypeConversion[0] = 0;
1532:Src/BLDC_controller.c **** 
1533:Src/BLDC_controller.c ****       /* Disable for Outport: '<S41>/id' */
1534:Src/BLDC_controller.c ****       rtDW->DataTypeConversion[1] = 0;
1535:Src/BLDC_controller.c ****     }
1536:Src/BLDC_controller.c **** 
1537:Src/BLDC_controller.c ****     rtDW->If2_ActiveSubsystem_a = -1;
 2124              		.loc 1 1537 0 is_stmt 1
 2125 068e FF21     		movs	r1, #255
 2126 0690 84F89110 		strb	r1, [r4, #145]
1538:Src/BLDC_controller.c **** 
1539:Src/BLDC_controller.c ****     /* End of Disable for If: '<S6>/If2' */
1540:Src/BLDC_controller.c **** 
1541:Src/BLDC_controller.c ****     /* Disable for Outport: '<S6>/V_phaABC_FOC' */
1542:Src/BLDC_controller.c ****     rtDW->Gain4[0] = 0;
 2127              		.loc 1 1542 0
 2128 0694 0021     		movs	r1, #0
 2129 0696 A4F85010 		strh	r1, [r4, #80]	@ movhi
1543:Src/BLDC_controller.c ****     rtDW->Gain4[1] = 0;
 2130              		.loc 1 1543 0
 2131 069a A4F85210 		strh	r1, [r4, #82]	@ movhi
ARM GAS  /tmp/ccoxnsnM.s 			page 68


1544:Src/BLDC_controller.c ****     rtDW->Gain4[2] = 0;
 2132              		.loc 1 1544 0
 2133 069e A4F85410 		strh	r1, [r4, #84]	@ movhi
1545:Src/BLDC_controller.c **** 
1546:Src/BLDC_controller.c ****     /* Disable for Outport: '<S6>/r_devSignal1' */
1547:Src/BLDC_controller.c ****     rtDW->DataTypeConversion[0] = 0;
 2134              		.loc 1 1547 0
 2135 06a2 A4F85610 		strh	r1, [r4, #86]	@ movhi
1548:Src/BLDC_controller.c **** 
1549:Src/BLDC_controller.c ****     /* Disable for Outport: '<S6>/r_devSignal2' */
1550:Src/BLDC_controller.c ****     rtDW->DataTypeConversion[1] = 0;
 2136              		.loc 1 1550 0
 2137 06a6 A4F85810 		strh	r1, [r4, #88]	@ movhi
 2138              	.L165:
1551:Src/BLDC_controller.c ****   }
1552:Src/BLDC_controller.c **** 
1553:Src/BLDC_controller.c ****   if (UnitDelay3 == 0) {
 2139              		.loc 1 1553 0
 2140 06aa BBF1000F 		cmp	fp, #0
 2141 06ae 40F02E83 		bne	.L166
1554:Src/BLDC_controller.c ****     if (0 != rtb_Sum2_h) {
 2142              		.loc 1 1554 0
 2143 06b2 12B1     		cbz	r2, .L167
1555:Src/BLDC_controller.c ****       /* InitializeConditions for IfAction SubSystem: '<S1>/F05_Field_Oriented_Control' incorporate
1556:Src/BLDC_controller.c ****        *  ActionPort: '<S6>/Action Port'
1557:Src/BLDC_controller.c ****        */
1558:Src/BLDC_controller.c ****       /* InitializeConditions for If: '<S1>/If1' incorporates:
1559:Src/BLDC_controller.c ****        *  UnitDelay: '<S6>/UnitDelay4'
1560:Src/BLDC_controller.c ****        */
1561:Src/BLDC_controller.c ****       rtDW->UnitDelay4_DSTATE_h = 0;
 2144              		.loc 1 1561 0
 2145 06b4 0022     		movs	r2, #0
 2146              	.LVL286:
 2147 06b6 A4F88A20 		strh	r2, [r4, #138]	@ movhi
 2148              	.L167:
1562:Src/BLDC_controller.c **** 
1563:Src/BLDC_controller.c ****       /* End of InitializeConditions for SubSystem: '<S1>/F05_Field_Oriented_Control' */
1564:Src/BLDC_controller.c ****     }
1565:Src/BLDC_controller.c **** 
1566:Src/BLDC_controller.c ****     /* Outputs for IfAction SubSystem: '<S1>/F05_Field_Oriented_Control' incorporates:
1567:Src/BLDC_controller.c ****      *  ActionPort: '<S6>/Action Port'
1568:Src/BLDC_controller.c ****      */
1569:Src/BLDC_controller.c ****     /* Abs: '<S6>/Abs1' */
1570:Src/BLDC_controller.c ****     if (rtDW->Merge1 < 0) {
 2149              		.loc 1 1570 0
 2150 06ba B4F95C20 		ldrsh	r2, [r4, #92]
 2151 06be 0E92     		str	r2, [sp, #56]
 2152 06c0 002A     		cmp	r2, #0
 2153 06c2 27DB     		blt	.L327
 2154              	.L168:
 2155              	.LVL287:
1571:Src/BLDC_controller.c ****       rtb_Switch2_l = (int16_T)-rtDW->Merge1;
1572:Src/BLDC_controller.c ****     } else {
1573:Src/BLDC_controller.c ****       rtb_Switch2_l = rtDW->Merge1;
1574:Src/BLDC_controller.c ****     }
1575:Src/BLDC_controller.c **** 
1576:Src/BLDC_controller.c ****     /* End of Abs: '<S6>/Abs1' */
ARM GAS  /tmp/ccoxnsnM.s 			page 69


1577:Src/BLDC_controller.c **** 
1578:Src/BLDC_controller.c ****     /* Gain: '<S6>/toNegative' */
1579:Src/BLDC_controller.c ****     rtb_toNegative = (int16_T)-rtDW->Divide3;
 2156              		.loc 1 1579 0
 2157 06c4 B4F85E20 		ldrh	r2, [r4, #94]
 2158 06c8 5242     		negs	r2, r2
 2159 06ca 12B2     		sxth	r2, r2
 2160 06cc 0F92     		str	r2, [sp, #60]
 2161              	.LVL288:
1580:Src/BLDC_controller.c **** 
1581:Src/BLDC_controller.c ****     /* If: '<S40>/If1' incorporates:
1582:Src/BLDC_controller.c ****      *  Constant: '<S40>/b_selPhaABCurrMeas'
1583:Src/BLDC_controller.c ****      */
1584:Src/BLDC_controller.c ****     if (rtP->b_selPhaABCurrMeas) {
 2162              		.loc 1 1584 0
 2163 06ce 95F8F920 		ldrb	r2, [r5, #249]	@ zero_extendqisi2
 2164 06d2 002A     		cmp	r2, #0
 2165 06d4 6CD0     		beq	.L169
1585:Src/BLDC_controller.c ****       /* Outputs for IfAction SubSystem: '<S40>/Clarke_PhasesAB' incorporates:
1586:Src/BLDC_controller.c ****        *  ActionPort: '<S48>/Action Port'
1587:Src/BLDC_controller.c ****        */
1588:Src/BLDC_controller.c ****       /* Gain: '<S48>/Gain4' */
1589:Src/BLDC_controller.c ****       rtb_Gain3 = 18919 * rtb_Merge;
 2166              		.loc 1 1589 0
 2167 06d6 44F6E712 		movw	r2, #18919
 2168 06da 02FB09F1 		mul	r1, r2, r9
 2169              	.LVL289:
1590:Src/BLDC_controller.c **** 
1591:Src/BLDC_controller.c ****       /* Gain: '<S48>/Gain2' */
1592:Src/BLDC_controller.c ****       rtb_DataTypeConversion = 18919 * rtb_Saturation1;
 2170              		.loc 1 1592 0
 2171 06de 02FB03F3 		mul	r3, r2, r3
 2172              	.LVL290:
1593:Src/BLDC_controller.c **** 
1594:Src/BLDC_controller.c ****       /* Sum: '<S48>/Sum1' incorporates:
1595:Src/BLDC_controller.c ****        *  Gain: '<S48>/Gain2'
1596:Src/BLDC_controller.c ****        *  Gain: '<S48>/Gain4'
1597:Src/BLDC_controller.c ****        */
1598:Src/BLDC_controller.c ****       rtb_Gain3 = (((rtb_Gain3 < 0 ? 32767 : 0) + rtb_Gain3) >> 15) + (int16_T)
 2173              		.loc 1 1598 0
 2174 06e2 0029     		cmp	r1, #0
 2175 06e4 1CDB     		blt	.L328
 2176 06e6 4FF0000A 		mov	r10, #0
 2177              	.L170:
 2178              		.loc 1 1598 0 is_stmt 0 discriminator 4
 2179 06ea 8A44     		add	r10, r10, r1
 2180 06ec 4FEAEA3A 		asr	r10, r10, #15
1599:Src/BLDC_controller.c ****         (((rtb_DataTypeConversion < 0 ? 16383 : 0) + rtb_DataTypeConversion) >>
 2181              		.loc 1 1599 0 is_stmt 1 discriminator 4
 2182 06f0 002B     		cmp	r3, #0
 2183 06f2 18DB     		blt	.L329
 2184              		.loc 1 1599 0 is_stmt 0
 2185 06f4 0022     		movs	r2, #0
 2186              	.L171:
 2187              		.loc 1 1599 0 discriminator 4
 2188 06f6 1344     		add	r3, r3, r2
 2189              	.LVL291:
ARM GAS  /tmp/ccoxnsnM.s 			page 70


1598:Src/BLDC_controller.c ****         (((rtb_DataTypeConversion < 0 ? 16383 : 0) + rtb_DataTypeConversion) >>
 2190              		.loc 1 1598 0 is_stmt 1 discriminator 4
 2191 06f8 43F38F33 		sbfx	r3, r3, #14, #16
 2192 06fc 5344     		add	r3, r3, r10
 2193              	.LVL292:
1600:Src/BLDC_controller.c ****          14);
1601:Src/BLDC_controller.c ****       if (rtb_Gain3 > 32767) {
 2194              		.loc 1 1601 0 discriminator 4
 2195 06fe B3F5004F 		cmp	r3, #32768
 2196 0702 13DA     		bge	.L266
1602:Src/BLDC_controller.c ****         rtb_Gain3 = 32767;
1603:Src/BLDC_controller.c ****       } else {
1604:Src/BLDC_controller.c ****         if (rtb_Gain3 < -32768) {
 2197              		.loc 1 1604 0
 2198 0704 13F5004F 		cmn	r3, #32768
 2199 0708 12DA     		bge	.L172
1605:Src/BLDC_controller.c ****           rtb_Gain3 = -32768;
 2200              		.loc 1 1605 0
 2201 070a C64B     		ldr	r3, .L345
 2202              	.LVL293:
 2203 070c 10E0     		b	.L172
 2204              	.LVL294:
 2205              	.L263:
1523:Src/BLDC_controller.c ****   }
 2206              		.loc 1 1523 0
 2207 070e 4FF0000B 		mov	fp, #0
 2208 0712 B7E7     		b	.L164
 2209              	.LVL295:
 2210              	.L327:
1571:Src/BLDC_controller.c ****     } else {
 2211              		.loc 1 1571 0
 2212 0714 BDF83820 		ldrh	r2, [sp, #56]
 2213 0718 5242     		negs	r2, r2
 2214 071a 12B2     		sxth	r2, r2
 2215 071c 0E92     		str	r2, [sp, #56]
 2216              	.LVL296:
 2217 071e D1E7     		b	.L168
 2218              	.LVL297:
 2219              	.L328:
1598:Src/BLDC_controller.c ****         (((rtb_DataTypeConversion < 0 ? 16383 : 0) + rtb_DataTypeConversion) >>
 2220              		.loc 1 1598 0
 2221 0720 47F6FF7A 		movw	r10, #32767
 2222 0724 E1E7     		b	.L170
 2223              	.L329:
1599:Src/BLDC_controller.c ****          14);
 2224              		.loc 1 1599 0
 2225 0726 43F6FF72 		movw	r2, #16383
 2226 072a E4E7     		b	.L171
 2227              	.LVL298:
 2228              	.L266:
1602:Src/BLDC_controller.c ****       } else {
 2229              		.loc 1 1602 0
 2230 072c 47F6FF73 		movw	r3, #32767
 2231              	.LVL299:
 2232              	.L172:
1606:Src/BLDC_controller.c ****         }
1607:Src/BLDC_controller.c ****       }
ARM GAS  /tmp/ccoxnsnM.s 			page 71


1608:Src/BLDC_controller.c **** 
1609:Src/BLDC_controller.c ****       rtb_DataTypeConversion2 = (int16_T)rtb_Gain3;
 2233              		.loc 1 1609 0
 2234 0730 0FFA83FA 		sxth	r10, r3
 2235              	.LVL300:
 2236              	.L173:
1610:Src/BLDC_controller.c **** 
1611:Src/BLDC_controller.c ****       /* End of Sum: '<S48>/Sum1' */
1612:Src/BLDC_controller.c ****       /* End of Outputs for SubSystem: '<S40>/Clarke_PhasesAB' */
1613:Src/BLDC_controller.c ****     } else {
1614:Src/BLDC_controller.c ****       /* Outputs for IfAction SubSystem: '<S40>/Clarke_PhasesBC' incorporates:
1615:Src/BLDC_controller.c ****        *  ActionPort: '<S49>/Action Port'
1616:Src/BLDC_controller.c ****        */
1617:Src/BLDC_controller.c ****       /* Sum: '<S49>/Sum3' */
1618:Src/BLDC_controller.c ****       rtb_Gain3 = rtb_Merge - rtb_Saturation1;
1619:Src/BLDC_controller.c ****       if (rtb_Gain3 > 32767) {
1620:Src/BLDC_controller.c ****         rtb_Gain3 = 32767;
1621:Src/BLDC_controller.c ****       } else {
1622:Src/BLDC_controller.c ****         if (rtb_Gain3 < -32768) {
1623:Src/BLDC_controller.c ****           rtb_Gain3 = -32768;
1624:Src/BLDC_controller.c ****         }
1625:Src/BLDC_controller.c ****       }
1626:Src/BLDC_controller.c **** 
1627:Src/BLDC_controller.c ****       /* Gain: '<S49>/Gain2' incorporates:
1628:Src/BLDC_controller.c ****        *  Sum: '<S49>/Sum3'
1629:Src/BLDC_controller.c ****        */
1630:Src/BLDC_controller.c ****       rtb_Gain3 *= 18919;
1631:Src/BLDC_controller.c ****       rtb_DataTypeConversion2 = (int16_T)(((rtb_Gain3 < 0 ? 32767 : 0) +
1632:Src/BLDC_controller.c ****         rtb_Gain3) >> 15);
1633:Src/BLDC_controller.c **** 
1634:Src/BLDC_controller.c ****       /* Sum: '<S49>/Sum1' */
1635:Src/BLDC_controller.c ****       rtb_Gain3 = -rtb_Merge - rtb_Saturation1;
1636:Src/BLDC_controller.c ****       if (rtb_Gain3 > 32767) {
1637:Src/BLDC_controller.c ****         rtb_Gain3 = 32767;
1638:Src/BLDC_controller.c ****       } else {
1639:Src/BLDC_controller.c ****         if (rtb_Gain3 < -32768) {
1640:Src/BLDC_controller.c ****           rtb_Gain3 = -32768;
1641:Src/BLDC_controller.c ****         }
1642:Src/BLDC_controller.c ****       }
1643:Src/BLDC_controller.c **** 
1644:Src/BLDC_controller.c ****       rtb_Merge = (int16_T)rtb_Gain3;
1645:Src/BLDC_controller.c **** 
1646:Src/BLDC_controller.c ****       /* End of Sum: '<S49>/Sum1' */
1647:Src/BLDC_controller.c ****       /* End of Outputs for SubSystem: '<S40>/Clarke_PhasesBC' */
1648:Src/BLDC_controller.c ****     }
1649:Src/BLDC_controller.c **** 
1650:Src/BLDC_controller.c ****     /* End of If: '<S40>/If1' */
1651:Src/BLDC_controller.c **** 
1652:Src/BLDC_controller.c ****     /* PreLookup: '<S47>/a_elecAngle_XA' */
1653:Src/BLDC_controller.c ****     rtb_Sum_l = plook_u8s16_evencka(rtb_Switch2_fl, 0, 128U, 180U);
 2237              		.loc 1 1653 0
 2238 0734 B423     		movs	r3, #180
 2239 0736 8022     		movs	r2, #128
 2240 0738 0021     		movs	r1, #0
 2241 073a 0898     		ldr	r0, [sp, #32]
 2242 073c FFF7FEFF 		bl	plook_u8s16_evencka
 2243              	.LVL301:
ARM GAS  /tmp/ccoxnsnM.s 			page 72


 2244 0740 0C90     		str	r0, [sp, #48]
 2245              	.LVL302:
1654:Src/BLDC_controller.c **** 
1655:Src/BLDC_controller.c ****     /* If: '<S6>/If2' incorporates:
1656:Src/BLDC_controller.c ****      *  Constant: '<S41>/cf_currFilt'
1657:Src/BLDC_controller.c ****      *  Inport: '<Root>/b_motEna'
1658:Src/BLDC_controller.c ****      */
1659:Src/BLDC_controller.c ****     rtb_Sum2_h = rtDW->If2_ActiveSubsystem_a;
 2246              		.loc 1 1659 0
 2247 0742 94F99130 		ldrsb	r3, [r4, #145]
 2248              	.LVL303:
1660:Src/BLDC_controller.c ****     UnitDelay3 = -1;
1661:Src/BLDC_controller.c ****     if (rtU->b_motEna) {
 2249              		.loc 1 1661 0
 2250 0746 3A78     		ldrb	r2, [r7]	@ zero_extendqisi2
 2251 0748 0AB9     		cbnz	r2, .L177
1660:Src/BLDC_controller.c ****     UnitDelay3 = -1;
 2252              		.loc 1 1660 0
 2253 074a 4FF0FF3B 		mov	fp, #-1
 2254              	.L177:
 2255              	.LVL304:
1662:Src/BLDC_controller.c ****       UnitDelay3 = 0;
1663:Src/BLDC_controller.c ****     }
1664:Src/BLDC_controller.c **** 
1665:Src/BLDC_controller.c ****     rtDW->If2_ActiveSubsystem_a = UnitDelay3;
 2256              		.loc 1 1665 0
 2257 074e 84F891B0 		strb	fp, [r4, #145]
1666:Src/BLDC_controller.c ****     if ((rtb_Sum2_h != UnitDelay3) && (rtb_Sum2_h == 0)) {
 2258              		.loc 1 1666 0
 2259 0752 9B45     		cmp	fp, r3
 2260 0754 05D0     		beq	.L178
 2261              		.loc 1 1666 0 is_stmt 0 discriminator 1
 2262 0756 23B9     		cbnz	r3, .L178
1667:Src/BLDC_controller.c ****       /* Disable for Outport: '<S41>/iq' */
1668:Src/BLDC_controller.c ****       rtDW->DataTypeConversion[0] = 0;
 2263              		.loc 1 1668 0 is_stmt 1
 2264 0758 0022     		movs	r2, #0
 2265 075a A4F85620 		strh	r2, [r4, #86]	@ movhi
1669:Src/BLDC_controller.c **** 
1670:Src/BLDC_controller.c ****       /* Disable for Outport: '<S41>/id' */
1671:Src/BLDC_controller.c ****       rtDW->DataTypeConversion[1] = 0;
 2266              		.loc 1 1671 0
 2267 075e A4F85820 		strh	r2, [r4, #88]	@ movhi
 2268              	.L178:
1672:Src/BLDC_controller.c ****     }
1673:Src/BLDC_controller.c **** 
1674:Src/BLDC_controller.c ****     if (UnitDelay3 == 0) {
 2269              		.loc 1 1674 0
 2270 0762 BBF1000F 		cmp	fp, #0
 2271 0766 77D1     		bne	.L179
1675:Src/BLDC_controller.c ****       if (0 != rtb_Sum2_h) {
 2272              		.loc 1 1675 0
 2273 0768 002B     		cmp	r3, #0
 2274 076a 4ED1     		bne	.L330
 2275              	.LVL305:
 2276              	.L180:
1676:Src/BLDC_controller.c ****         /* SystemReset for IfAction SubSystem: '<S6>/Current_Filtering' incorporates:
ARM GAS  /tmp/ccoxnsnM.s 			page 73


1677:Src/BLDC_controller.c ****          *  ActionPort: '<S41>/Action Port'
1678:Src/BLDC_controller.c ****          */
1679:Src/BLDC_controller.c **** 
1680:Src/BLDC_controller.c ****         /* SystemReset for Atomic SubSystem: '<S41>/Low_Pass_Filter' */
1681:Src/BLDC_controller.c **** 
1682:Src/BLDC_controller.c ****         /* SystemReset for If: '<S6>/If2' */
1683:Src/BLDC_controller.c ****         Low_Pass_Filter_Reset(&rtDW->Low_Pass_Filter_m);
1684:Src/BLDC_controller.c **** 
1685:Src/BLDC_controller.c ****         /* End of SystemReset for SubSystem: '<S41>/Low_Pass_Filter' */
1686:Src/BLDC_controller.c **** 
1687:Src/BLDC_controller.c ****         /* End of SystemReset for SubSystem: '<S6>/Current_Filtering' */
1688:Src/BLDC_controller.c ****       }
1689:Src/BLDC_controller.c **** 
1690:Src/BLDC_controller.c ****       /* Sum: '<S46>/Sum6' incorporates:
1691:Src/BLDC_controller.c ****        *  Interpolation_n-D: '<S47>/r_cos_M1'
1692:Src/BLDC_controller.c ****        *  Interpolation_n-D: '<S47>/r_sin_M1'
1693:Src/BLDC_controller.c ****        *  Product: '<S46>/Divide1'
1694:Src/BLDC_controller.c ****        *  Product: '<S46>/Divide4'
1695:Src/BLDC_controller.c ****        */
1696:Src/BLDC_controller.c ****       rtb_Gain3 = (int16_T)((rtb_DataTypeConversion2 *
 2277              		.loc 1 1696 0
 2278 076c 5046     		mov	r0, r10
1697:Src/BLDC_controller.c ****         rtConstP.r_cos_M1_Table[rtb_Sum_l]) >> 14) - (int16_T)((rtb_Merge *
 2279              		.loc 1 1697 0
 2280 076e DFF8B8C2 		ldr	ip, .L345+4
 2281 0772 0C9A     		ldr	r2, [sp, #48]
 2282 0774 02F53573 		add	r3, r2, #724
 2283 0778 3CF91310 		ldrsh	r1, [ip, r3, lsl #1]
1696:Src/BLDC_controller.c ****         rtConstP.r_cos_M1_Table[rtb_Sum_l]) >> 14) - (int16_T)((rtb_Merge *
 2284              		.loc 1 1696 0
 2285 077c 01FB0AFA 		mul	r10, r1, r10
 2286              	.LVL306:
 2287 0780 4AF38F3A 		sbfx	r10, r10, #14, #16
 2288              		.loc 1 1697 0
 2289 0784 4B46     		mov	r3, r9
1698:Src/BLDC_controller.c ****         rtConstP.r_sin_M1_Table[rtb_Sum_l]) >> 14);
 2290              		.loc 1 1698 0
 2291 0786 02F5077E 		add	lr, r2, #540
 2292 078a 0CEB4E02 		add	r2, ip, lr, lsl #1
 2293 078e B2F90620 		ldrsh	r2, [r2, #6]
1697:Src/BLDC_controller.c ****         rtConstP.r_cos_M1_Table[rtb_Sum_l]) >> 14) - (int16_T)((rtb_Merge *
 2294              		.loc 1 1697 0
 2295 0792 02FB09F9 		mul	r9, r2, r9
 2296              	.LVL307:
 2297 0796 49F38F39 		sbfx	r9, r9, #14, #16
1696:Src/BLDC_controller.c ****         rtConstP.r_cos_M1_Table[rtb_Sum_l]) >> 14) - (int16_T)((rtb_Merge *
 2298              		.loc 1 1696 0
 2299 079a AAEB0909 		sub	r9, r10, r9
 2300              	.LVL308:
1699:Src/BLDC_controller.c ****       if (rtb_Gain3 > 32767) {
 2301              		.loc 1 1699 0
 2302 079e B9F5004F 		cmp	r9, #32768
 2303 07a2 37DA     		bge	.L273
1700:Src/BLDC_controller.c ****         rtb_Gain3 = 32767;
1701:Src/BLDC_controller.c ****       } else {
1702:Src/BLDC_controller.c ****         if (rtb_Gain3 < -32768) {
 2304              		.loc 1 1702 0
ARM GAS  /tmp/ccoxnsnM.s 			page 74


 2305 07a4 19F5004F 		cmn	r9, #32768
 2306 07a8 36DA     		bge	.L181
1703:Src/BLDC_controller.c ****           rtb_Gain3 = -32768;
 2307              		.loc 1 1703 0
 2308 07aa DFF87892 		ldr	r9, .L345
 2309              	.LVL309:
 2310 07ae 33E0     		b	.L181
 2311              	.LVL310:
 2312              	.L169:
1618:Src/BLDC_controller.c ****       if (rtb_Gain3 > 32767) {
 2313              		.loc 1 1618 0
 2314 07b0 4946     		mov	r1, r9
 2315 07b2 1A46     		mov	r2, r3
 2316 07b4 A9EB0303 		sub	r3, r9, r3
 2317              	.LVL311:
1619:Src/BLDC_controller.c ****         rtb_Gain3 = 32767;
 2318              		.loc 1 1619 0
 2319 07b8 B3F5004F 		cmp	r3, #32768
 2320 07bc 04DA     		bge	.L268
1622:Src/BLDC_controller.c ****           rtb_Gain3 = -32768;
 2321              		.loc 1 1622 0
 2322 07be 13F5004F 		cmn	r3, #32768
 2323 07c2 03DA     		bge	.L174
1623:Src/BLDC_controller.c ****         }
 2324              		.loc 1 1623 0
 2325 07c4 974B     		ldr	r3, .L345
 2326              	.LVL312:
 2327 07c6 01E0     		b	.L174
 2328              	.LVL313:
 2329              	.L268:
1620:Src/BLDC_controller.c ****       } else {
 2330              		.loc 1 1620 0
 2331 07c8 47F6FF73 		movw	r3, #32767
 2332              	.LVL314:
 2333              	.L174:
1630:Src/BLDC_controller.c ****       rtb_DataTypeConversion2 = (int16_T)(((rtb_Gain3 < 0 ? 32767 : 0) +
 2334              		.loc 1 1630 0
 2335 07cc 44F6E71A 		movw	r10, #18919
 2336 07d0 0AFB03F3 		mul	r3, r10, r3
 2337              	.LVL315:
1631:Src/BLDC_controller.c ****         rtb_Gain3) >> 15);
 2338              		.loc 1 1631 0
 2339 07d4 002B     		cmp	r3, #0
 2340 07d6 10DB     		blt	.L331
 2341 07d8 4FF0000A 		mov	r10, #0
 2342              	.L175:
1631:Src/BLDC_controller.c ****         rtb_Gain3) >> 15);
 2343              		.loc 1 1631 0 is_stmt 0 discriminator 4
 2344 07dc 5344     		add	r3, r3, r10
 2345              	.LVL316:
 2346 07de 43F3CF3A 		sbfx	r10, r3, #15, #16
 2347              	.LVL317:
1635:Src/BLDC_controller.c ****       if (rtb_Gain3 > 32767) {
 2348              		.loc 1 1635 0 is_stmt 1 discriminator 4
 2349 07e2 C1F10009 		rsb	r9, r1, #0
 2350              	.LVL318:
 2351 07e6 A9EB0202 		sub	r2, r9, r2
ARM GAS  /tmp/ccoxnsnM.s 			page 75


 2352              	.LVL319:
1636:Src/BLDC_controller.c ****         rtb_Gain3 = 32767;
 2353              		.loc 1 1636 0 discriminator 4
 2354 07ea B2F5004F 		cmp	r2, #32768
 2355 07ee 07DA     		bge	.L271
1639:Src/BLDC_controller.c ****           rtb_Gain3 = -32768;
 2356              		.loc 1 1639 0
 2357 07f0 12F5004F 		cmn	r2, #32768
 2358 07f4 06DA     		bge	.L176
1640:Src/BLDC_controller.c ****         }
 2359              		.loc 1 1640 0
 2360 07f6 8B4A     		ldr	r2, .L345
 2361              	.LVL320:
 2362 07f8 04E0     		b	.L176
 2363              	.LVL321:
 2364              	.L331:
1631:Src/BLDC_controller.c ****         rtb_Gain3) >> 15);
 2365              		.loc 1 1631 0
 2366 07fa 47F6FF7A 		movw	r10, #32767
 2367 07fe EDE7     		b	.L175
 2368              	.LVL322:
 2369              	.L271:
1637:Src/BLDC_controller.c ****       } else {
 2370              		.loc 1 1637 0
 2371 0800 47F6FF72 		movw	r2, #32767
 2372              	.LVL323:
 2373              	.L176:
1644:Src/BLDC_controller.c **** 
 2374              		.loc 1 1644 0
 2375 0804 0FFA82F9 		sxth	r9, r2
 2376              	.LVL324:
 2377 0808 94E7     		b	.L173
 2378              	.LVL325:
 2379              	.L330:
1683:Src/BLDC_controller.c **** 
 2380              		.loc 1 1683 0
 2381 080a 04F12400 		add	r0, r4, #36
 2382 080e FFF7FEFF 		bl	Low_Pass_Filter_Reset
 2383              	.LVL326:
 2384 0812 ABE7     		b	.L180
 2385              	.LVL327:
 2386              	.L273:
1700:Src/BLDC_controller.c ****       } else {
 2387              		.loc 1 1700 0
 2388 0814 47F6FF79 		movw	r9, #32767
 2389              	.LVL328:
 2390              	.L181:
1704:Src/BLDC_controller.c ****         }
1705:Src/BLDC_controller.c ****       }
1706:Src/BLDC_controller.c **** 
1707:Src/BLDC_controller.c ****       /* Outputs for IfAction SubSystem: '<S6>/Current_Filtering' incorporates:
1708:Src/BLDC_controller.c ****        *  ActionPort: '<S41>/Action Port'
1709:Src/BLDC_controller.c ****        */
1710:Src/BLDC_controller.c ****       /* SignalConversion: '<S41>/TmpSignal ConversionAtLow_Pass_FilterInport1' incorporates:
1711:Src/BLDC_controller.c ****        *  Sum: '<S46>/Sum6'
1712:Src/BLDC_controller.c ****        */
1713:Src/BLDC_controller.c ****       rtb_TmpSignalConversionAtLow_Pa[0] = (int16_T)rtb_Gain3;
ARM GAS  /tmp/ccoxnsnM.s 			page 76


 2391              		.loc 1 1713 0
 2392 0818 ADF84C90 		strh	r9, [sp, #76]	@ movhi
1714:Src/BLDC_controller.c **** 
1715:Src/BLDC_controller.c ****       /* End of Outputs for SubSystem: '<S6>/Current_Filtering' */
1716:Src/BLDC_controller.c **** 
1717:Src/BLDC_controller.c ****       /* Sum: '<S46>/Sum1' incorporates:
1718:Src/BLDC_controller.c ****        *  Interpolation_n-D: '<S47>/r_cos_M1'
1719:Src/BLDC_controller.c ****        *  Interpolation_n-D: '<S47>/r_sin_M1'
1720:Src/BLDC_controller.c ****        *  Product: '<S46>/Divide2'
1721:Src/BLDC_controller.c ****        *  Product: '<S46>/Divide3'
1722:Src/BLDC_controller.c ****        */
1723:Src/BLDC_controller.c ****       rtb_Gain3 = (int16_T)((rtb_Merge * rtConstP.r_cos_M1_Table[rtb_Sum_l]) >>
 2393              		.loc 1 1723 0
 2394 081c 03FB01F3 		mul	r3, r3, r1
 2395 0820 43F38F33 		sbfx	r3, r3, #14, #16
1724:Src/BLDC_controller.c ****                             14) + (int16_T)((rtb_DataTypeConversion2 *
 2396              		.loc 1 1724 0
 2397 0824 02FB00F2 		mul	r2, r2, r0
 2398 0828 42F38F32 		sbfx	r2, r2, #14, #16
1723:Src/BLDC_controller.c ****                             14) + (int16_T)((rtb_DataTypeConversion2 *
 2399              		.loc 1 1723 0
 2400 082c 1344     		add	r3, r3, r2
 2401              	.LVL329:
1725:Src/BLDC_controller.c ****         rtConstP.r_sin_M1_Table[rtb_Sum_l]) >> 14);
1726:Src/BLDC_controller.c ****       if (rtb_Gain3 > 32767) {
 2402              		.loc 1 1726 0
 2403 082e B3F5004F 		cmp	r3, #32768
 2404 0832 04DA     		bge	.L275
1727:Src/BLDC_controller.c ****         rtb_Gain3 = 32767;
1728:Src/BLDC_controller.c ****       } else {
1729:Src/BLDC_controller.c ****         if (rtb_Gain3 < -32768) {
 2405              		.loc 1 1729 0
 2406 0834 13F5004F 		cmn	r3, #32768
 2407 0838 03DA     		bge	.L182
1730:Src/BLDC_controller.c ****           rtb_Gain3 = -32768;
 2408              		.loc 1 1730 0
 2409 083a 7A4B     		ldr	r3, .L345
 2410              	.LVL330:
 2411 083c 01E0     		b	.L182
 2412              	.LVL331:
 2413              	.L275:
1727:Src/BLDC_controller.c ****         rtb_Gain3 = 32767;
 2414              		.loc 1 1727 0
 2415 083e 47F6FF73 		movw	r3, #32767
 2416              	.LVL332:
 2417              	.L182:
1731:Src/BLDC_controller.c ****         }
1732:Src/BLDC_controller.c ****       }
1733:Src/BLDC_controller.c **** 
1734:Src/BLDC_controller.c ****       /* Outputs for IfAction SubSystem: '<S6>/Current_Filtering' incorporates:
1735:Src/BLDC_controller.c ****        *  ActionPort: '<S41>/Action Port'
1736:Src/BLDC_controller.c ****        */
1737:Src/BLDC_controller.c ****       /* SignalConversion: '<S41>/TmpSignal ConversionAtLow_Pass_FilterInport1' incorporates:
1738:Src/BLDC_controller.c ****        *  Sum: '<S46>/Sum1'
1739:Src/BLDC_controller.c ****        */
1740:Src/BLDC_controller.c ****       rtb_TmpSignalConversionAtLow_Pa[1] = (int16_T)rtb_Gain3;
 2418              		.loc 1 1740 0
ARM GAS  /tmp/ccoxnsnM.s 			page 77


 2419 0842 ADF84E30 		strh	r3, [sp, #78]	@ movhi
1741:Src/BLDC_controller.c **** 
1742:Src/BLDC_controller.c ****       /* Outputs for Atomic SubSystem: '<S41>/Low_Pass_Filter' */
1743:Src/BLDC_controller.c ****       Low_Pass_Filter(rtb_TmpSignalConversionAtLow_Pa, rtP->cf_currFilt,
 2420              		.loc 1 1743 0
 2421 0846 04F12403 		add	r3, r4, #36
 2422              	.LVL333:
 2423 084a 04F15602 		add	r2, r4, #86
 2424 084e B5F8EA10 		ldrh	r1, [r5, #234]
 2425 0852 13A8     		add	r0, sp, #76
 2426 0854 FFF7FEFF 		bl	Low_Pass_Filter
 2427              	.LVL334:
 2428              	.L179:
1744:Src/BLDC_controller.c ****                       rtDW->DataTypeConversion, &rtDW->Low_Pass_Filter_m);
1745:Src/BLDC_controller.c **** 
1746:Src/BLDC_controller.c ****       /* End of Outputs for SubSystem: '<S41>/Low_Pass_Filter' */
1747:Src/BLDC_controller.c **** 
1748:Src/BLDC_controller.c ****       /* End of Outputs for SubSystem: '<S6>/Current_Filtering' */
1749:Src/BLDC_controller.c ****     }
1750:Src/BLDC_controller.c **** 
1751:Src/BLDC_controller.c ****     /* End of If: '<S6>/If2' */
1752:Src/BLDC_controller.c **** 
1753:Src/BLDC_controller.c ****     /* If: '<S6>/If3' incorporates:
1754:Src/BLDC_controller.c ****      *  Constant: '<S45>/Vd_max1'
1755:Src/BLDC_controller.c ****      *  Constant: '<S45>/i_max'
1756:Src/BLDC_controller.c ****      *  UnitDelay: '<S8>/UnitDelay5'
1757:Src/BLDC_controller.c ****      */
1758:Src/BLDC_controller.c ****     if (rtDW->UnitDelay5_DSTATE_l) {
 2429              		.loc 1 1758 0
 2430 0858 94F89C30 		ldrb	r3, [r4, #156]	@ zero_extendqisi2
 2431 085c 002B     		cmp	r3, #0
 2432 085e 58D0     		beq	.L183
1759:Src/BLDC_controller.c ****       /* Outputs for IfAction SubSystem: '<S6>/Motor_Limitations' incorporates:
1760:Src/BLDC_controller.c ****        *  ActionPort: '<S45>/Action Port'
1761:Src/BLDC_controller.c ****        */
1762:Src/BLDC_controller.c ****       rtDW->Vd_max1 = rtP->Vd_max;
 2433              		.loc 1 1762 0
 2434 0860 B5F91030 		ldrsh	r3, [r5, #16]
 2435 0864 A4F86030 		strh	r3, [r4, #96]	@ movhi
1763:Src/BLDC_controller.c **** 
1764:Src/BLDC_controller.c ****       /* Gain: '<S45>/Gain3' incorporates:
1765:Src/BLDC_controller.c ****        *  Constant: '<S45>/Vd_max1'
1766:Src/BLDC_controller.c ****        */
1767:Src/BLDC_controller.c ****       rtDW->Gain3 = (int16_T)-rtDW->Vd_max1;
 2436              		.loc 1 1767 0
 2437 0868 9BB2     		uxth	r3, r3
 2438 086a 5B42     		negs	r3, r3
 2439 086c A4F86230 		strh	r3, [r4, #98]	@ movhi
1768:Src/BLDC_controller.c **** 
1769:Src/BLDC_controller.c ****       /* Interpolation_n-D: '<S45>/Vq_max_M1' incorporates:
1770:Src/BLDC_controller.c ****        *  Abs: '<S45>/Abs5'
1771:Src/BLDC_controller.c ****        *  PreLookup: '<S45>/Vq_max_XA'
1772:Src/BLDC_controller.c ****        *  UnitDelay: '<S6>/UnitDelay4'
1773:Src/BLDC_controller.c ****        */
1774:Src/BLDC_controller.c ****       if (rtDW->UnitDelay4_DSTATE_h < 0) {
 2440              		.loc 1 1774 0
 2441 0870 B4F98A00 		ldrsh	r0, [r4, #138]
ARM GAS  /tmp/ccoxnsnM.s 			page 78


 2442 0874 0028     		cmp	r0, #0
 2443 0876 6ADB     		blt	.L332
 2444              	.L184:
 2445              	.LVL335:
1775:Src/BLDC_controller.c ****         rtb_Merge_f_idx_1 = (int16_T)-rtDW->UnitDelay4_DSTATE_h;
1776:Src/BLDC_controller.c ****       } else {
1777:Src/BLDC_controller.c ****         rtb_Merge_f_idx_1 = rtDW->UnitDelay4_DSTATE_h;
1778:Src/BLDC_controller.c ****       }
1779:Src/BLDC_controller.c **** 
1780:Src/BLDC_controller.c ****       rtDW->Vq_max_M1 = rtP->Vq_max_M1[plook_u8s16_evencka(rtb_Merge_f_idx_1,
 2446              		.loc 1 1780 0
 2447 0878 B5F96E10 		ldrsh	r1, [r5, #110]
1781:Src/BLDC_controller.c ****         rtP->Vq_max_XA[0], (uint16_T)(rtP->Vq_max_XA[1] - rtP->Vq_max_XA[0]),
 2448              		.loc 1 1781 0
 2449 087c B5F87020 		ldrh	r2, [r5, #112]
 2450 0880 8BB2     		uxth	r3, r1
1780:Src/BLDC_controller.c ****         rtP->Vq_max_XA[0], (uint16_T)(rtP->Vq_max_XA[1] - rtP->Vq_max_XA[0]),
 2451              		.loc 1 1780 0
 2452 0882 D21A     		subs	r2, r2, r3
 2453 0884 2D23     		movs	r3, #45
 2454 0886 92B2     		uxth	r2, r2
 2455 0888 FFF7FEFF 		bl	plook_u8s16_evencka
 2456              	.LVL336:
 2457 088c 0830     		adds	r0, r0, #8
 2458 088e 05EB4000 		add	r0, r5, r0, lsl #1
 2459 0892 B0F902A0 		ldrsh	r10, [r0, #2]
 2460 0896 A4F864A0 		strh	r10, [r4, #100]	@ movhi
1782:Src/BLDC_controller.c ****         45U)];
1783:Src/BLDC_controller.c **** 
1784:Src/BLDC_controller.c ****       /* End of Interpolation_n-D: '<S45>/Vq_max_M1' */
1785:Src/BLDC_controller.c **** 
1786:Src/BLDC_controller.c ****       /* Gain: '<S45>/Gain5' */
1787:Src/BLDC_controller.c ****       rtDW->Gain5 = (int16_T)-rtDW->Vq_max_M1;
 2461              		.loc 1 1787 0
 2462 089a 1FFA8AF3 		uxth	r3, r10
 2463 089e 5B42     		negs	r3, r3
 2464 08a0 A4F86630 		strh	r3, [r4, #102]	@ movhi
1788:Src/BLDC_controller.c ****       rtDW->i_max = rtP->i_max;
 2465              		.loc 1 1788 0
 2466 08a4 B5F9CC90 		ldrsh	r9, [r5, #204]
 2467 08a8 A4F86890 		strh	r9, [r4, #104]	@ movhi
1789:Src/BLDC_controller.c **** 
1790:Src/BLDC_controller.c ****       /* Interpolation_n-D: '<S45>/iq_maxSca_M1' incorporates:
1791:Src/BLDC_controller.c ****        *  Constant: '<S45>/i_max'
1792:Src/BLDC_controller.c ****        *  Product: '<S45>/Divide4'
1793:Src/BLDC_controller.c ****        */
1794:Src/BLDC_controller.c ****       rtb_Gain3 = rtDW->Divide3 << 16;
 2468              		.loc 1 1794 0
 2469 08ac B4F95E00 		ldrsh	r0, [r4, #94]
 2470 08b0 0004     		lsls	r0, r0, #16
 2471              	.LVL337:
1795:Src/BLDC_controller.c ****       rtb_Gain3 = (rtb_Gain3 == MIN_int32_T) && (rtDW->i_max == -1) ?
1796:Src/BLDC_controller.c ****         MAX_int32_T : rtb_Gain3 / rtDW->i_max;
 2472              		.loc 1 1796 0
 2473 08b2 B0F1004F 		cmp	r0, #-2147483648
 2474 08b6 4ED0     		beq	.L333
 2475              	.L185:
ARM GAS  /tmp/ccoxnsnM.s 			page 79


 2476              		.loc 1 1796 0 is_stmt 0 discriminator 1
 2477 08b8 90FBF9F0 		sdiv	r0, r0, r9
 2478              	.LVL338:
 2479              	.L186:
1797:Src/BLDC_controller.c ****       if (rtb_Gain3 < 0) {
 2480              		.loc 1 1797 0 is_stmt 1
 2481 08bc 0028     		cmp	r0, #0
 2482 08be 50DB     		blt	.L278
1798:Src/BLDC_controller.c ****         rtb_Gain3 = 0;
1799:Src/BLDC_controller.c ****       } else {
1800:Src/BLDC_controller.c ****         if (rtb_Gain3 > 65535) {
 2483              		.loc 1 1800 0
 2484 08c0 B0F5803F 		cmp	r0, #65536
 2485 08c4 4FDA     		bge	.L279
 2486              	.LVL339:
 2487              	.L187:
1801:Src/BLDC_controller.c ****           rtb_Gain3 = 65535;
1802:Src/BLDC_controller.c ****         }
1803:Src/BLDC_controller.c ****       }
1804:Src/BLDC_controller.c **** 
1805:Src/BLDC_controller.c ****       /* Product: '<S45>/Divide1' incorporates:
1806:Src/BLDC_controller.c ****        *  Interpolation_n-D: '<S45>/iq_maxSca_M1'
1807:Src/BLDC_controller.c ****        *  PreLookup: '<S45>/iq_maxSca_XA'
1808:Src/BLDC_controller.c ****        *  Product: '<S45>/Divide4'
1809:Src/BLDC_controller.c ****        */
1810:Src/BLDC_controller.c ****       rtDW->Divide1_a = (int16_T)
1811:Src/BLDC_controller.c ****         ((rtConstP.iq_maxSca_M1_Table[plook_u8u16_evencka((uint16_T)rtb_Gain3,
 2488              		.loc 1 1811 0
 2489 08c6 3123     		movs	r3, #49
 2490 08c8 40F21F52 		movw	r2, #1311
 2491 08cc 0021     		movs	r1, #0
 2492 08ce 80B2     		uxth	r0, r0
 2493              	.LVL340:
 2494 08d0 FFF7FEFF 		bl	plook_u8u16_evencka
 2495              	.LVL341:
 2496 08d4 00F56270 		add	r0, r0, #904
 2497 08d8 534B     		ldr	r3, .L345+4
 2498 08da 03EB4000 		add	r0, r3, r0, lsl #1
 2499 08de 4388     		ldrh	r3, [r0, #2]
1812:Src/BLDC_controller.c ****            0U, 1311U, 49U)] * rtDW->i_max) >> 16);
 2500              		.loc 1 1812 0
 2501 08e0 09FB03F9 		mul	r9, r9, r3
1810:Src/BLDC_controller.c ****         ((rtConstP.iq_maxSca_M1_Table[plook_u8u16_evencka((uint16_T)rtb_Gain3,
 2502              		.loc 1 1810 0
 2503 08e4 4FEA2949 		asr	r9, r9, #16
 2504 08e8 A4F86A90 		strh	r9, [r4, #106]	@ movhi
1813:Src/BLDC_controller.c **** 
1814:Src/BLDC_controller.c ****       /* Gain: '<S45>/Gain1' */
1815:Src/BLDC_controller.c ****       rtDW->Gain1 = (int16_T)-rtDW->Divide1_a;
 2505              		.loc 1 1815 0
 2506 08ec 1FFA89F0 		uxth	r0, r9
 2507 08f0 4342     		negs	r3, r0
 2508 08f2 1BB2     		sxth	r3, r3
 2509 08f4 A4F86C30 		strh	r3, [r4, #108]	@ movhi
1816:Src/BLDC_controller.c **** 
1817:Src/BLDC_controller.c ****       /* SwitchCase: '<S45>/Switch Case' incorporates:
1818:Src/BLDC_controller.c ****        *  Constant: '<S45>/n_max1'
ARM GAS  /tmp/ccoxnsnM.s 			page 80


1819:Src/BLDC_controller.c ****        *  Constant: '<S72>/Constant1'
1820:Src/BLDC_controller.c ****        *  Constant: '<S72>/cf_KbLimProt'
1821:Src/BLDC_controller.c ****        *  Constant: '<S72>/cf_nKiLimProt'
1822:Src/BLDC_controller.c ****        *  Constant: '<S73>/Constant'
1823:Src/BLDC_controller.c ****        *  Constant: '<S73>/Constant1'
1824:Src/BLDC_controller.c ****        *  Constant: '<S73>/cf_KbLimProt'
1825:Src/BLDC_controller.c ****        *  Constant: '<S73>/cf_iqKiLimProt'
1826:Src/BLDC_controller.c ****        *  Constant: '<S73>/cf_nKiLimProt'
1827:Src/BLDC_controller.c ****        *  Sum: '<S72>/Sum1'
1828:Src/BLDC_controller.c ****        *  Sum: '<S73>/Sum1'
1829:Src/BLDC_controller.c ****        *  Sum: '<S73>/Sum2'
1830:Src/BLDC_controller.c ****        */
1831:Src/BLDC_controller.c ****       switch (rtDW->z_ctrlMod) {
 2510              		.loc 1 1831 0
 2511 08f8 94F89220 		ldrb	r2, [r4, #146]	@ zero_extendqisi2
 2512 08fc 022A     		cmp	r2, #2
 2513 08fe 67D0     		beq	.L189
 2514 0900 032A     		cmp	r2, #3
 2515 0902 79D0     		beq	.L190
 2516 0904 012A     		cmp	r2, #1
 2517 0906 31D0     		beq	.L334
 2518              	.L188:
1832:Src/BLDC_controller.c ****        case 1:
1833:Src/BLDC_controller.c ****         /* Abs: '<S6>/Abs5' */
1834:Src/BLDC_controller.c ****         if (rtDW->DataTypeConversion[0] < 0) {
1835:Src/BLDC_controller.c ****           rtb_Merge_f_idx_1 = (int16_T)-rtDW->DataTypeConversion[0];
1836:Src/BLDC_controller.c ****         } else {
1837:Src/BLDC_controller.c ****           rtb_Merge_f_idx_1 = rtDW->DataTypeConversion[0];
1838:Src/BLDC_controller.c ****         }
1839:Src/BLDC_controller.c **** 
1840:Src/BLDC_controller.c ****         /* End of Abs: '<S6>/Abs5' */
1841:Src/BLDC_controller.c **** 
1842:Src/BLDC_controller.c ****         /* Outputs for IfAction SubSystem: '<S45>/Voltage_Mode_Protection' incorporates:
1843:Src/BLDC_controller.c ****          *  ActionPort: '<S73>/Action Port'
1844:Src/BLDC_controller.c ****          */
1845:Src/BLDC_controller.c **** 
1846:Src/BLDC_controller.c ****         /* Outputs for Atomic SubSystem: '<S73>/I_backCalc_fixdt' */
1847:Src/BLDC_controller.c ****         I_backCalc_fixdt((int16_T)(rtDW->Divide1_a - rtb_Merge_f_idx_1),
1848:Src/BLDC_controller.c ****                          rtP->cf_iqKiLimProt, rtP->cf_KbLimProt, rtb_Switch2_l,
1849:Src/BLDC_controller.c ****                          0, &rtDW->Switch2_c, &rtDW->I_backCalc_fixdt_i);
1850:Src/BLDC_controller.c **** 
1851:Src/BLDC_controller.c ****         /* End of Outputs for SubSystem: '<S73>/I_backCalc_fixdt' */
1852:Src/BLDC_controller.c **** 
1853:Src/BLDC_controller.c ****         /* Outputs for Atomic SubSystem: '<S73>/I_backCalc_fixdt1' */
1854:Src/BLDC_controller.c ****         I_backCalc_fixdt((int16_T)(rtP->n_max - rtb_Abs5), rtP->cf_nKiLimProt,
1855:Src/BLDC_controller.c ****                          rtP->cf_KbLimProt, rtb_Switch2_l, 0, &rtDW->Switch2_l,
1856:Src/BLDC_controller.c ****                          &rtDW->I_backCalc_fixdt1);
1857:Src/BLDC_controller.c **** 
1858:Src/BLDC_controller.c ****         /* End of Outputs for SubSystem: '<S73>/I_backCalc_fixdt1' */
1859:Src/BLDC_controller.c **** 
1860:Src/BLDC_controller.c ****         /* End of Outputs for SubSystem: '<S45>/Voltage_Mode_Protection' */
1861:Src/BLDC_controller.c ****         break;
1862:Src/BLDC_controller.c **** 
1863:Src/BLDC_controller.c ****        case 2:
1864:Src/BLDC_controller.c ****         /* Outputs for IfAction SubSystem: '<S45>/Speed_Mode_Protection' incorporates:
1865:Src/BLDC_controller.c ****          *  ActionPort: '<S71>/Action Port'
1866:Src/BLDC_controller.c ****          */
ARM GAS  /tmp/ccoxnsnM.s 			page 81


1867:Src/BLDC_controller.c ****         /* Switch: '<S74>/Switch2' incorporates:
1868:Src/BLDC_controller.c ****          *  RelationalOperator: '<S74>/LowerRelop1'
1869:Src/BLDC_controller.c ****          *  RelationalOperator: '<S74>/UpperRelop'
1870:Src/BLDC_controller.c ****          *  Switch: '<S74>/Switch'
1871:Src/BLDC_controller.c ****          */
1872:Src/BLDC_controller.c ****         if (rtDW->DataTypeConversion[0] > rtDW->Divide1_a) {
1873:Src/BLDC_controller.c ****           rtb_Merge_f_idx_1 = rtDW->Divide1_a;
1874:Src/BLDC_controller.c ****         } else if (rtDW->DataTypeConversion[0] < rtDW->Gain1) {
1875:Src/BLDC_controller.c ****           /* Switch: '<S74>/Switch' */
1876:Src/BLDC_controller.c ****           rtb_Merge_f_idx_1 = rtDW->Gain1;
1877:Src/BLDC_controller.c ****         } else {
1878:Src/BLDC_controller.c ****           rtb_Merge_f_idx_1 = rtDW->DataTypeConversion[0];
1879:Src/BLDC_controller.c ****         }
1880:Src/BLDC_controller.c **** 
1881:Src/BLDC_controller.c ****         /* End of Switch: '<S74>/Switch2' */
1882:Src/BLDC_controller.c **** 
1883:Src/BLDC_controller.c ****         /* Product: '<S71>/Divide1' incorporates:
1884:Src/BLDC_controller.c ****          *  Constant: '<S71>/cf_iqKiLimProt'
1885:Src/BLDC_controller.c ****          *  Sum: '<S71>/Sum3'
1886:Src/BLDC_controller.c ****          */
1887:Src/BLDC_controller.c ****         rtDW->Divide1 = (int16_T)(rtb_Merge_f_idx_1 - rtDW->DataTypeConversion[0])
1888:Src/BLDC_controller.c ****           * rtP->cf_iqKiLimProt;
1889:Src/BLDC_controller.c **** 
1890:Src/BLDC_controller.c ****         /* End of Outputs for SubSystem: '<S45>/Speed_Mode_Protection' */
1891:Src/BLDC_controller.c ****         break;
1892:Src/BLDC_controller.c **** 
1893:Src/BLDC_controller.c ****        case 3:
1894:Src/BLDC_controller.c ****         /* Outputs for IfAction SubSystem: '<S45>/Torque_Mode_Protection' incorporates:
1895:Src/BLDC_controller.c ****          *  ActionPort: '<S72>/Action Port'
1896:Src/BLDC_controller.c ****          */
1897:Src/BLDC_controller.c **** 
1898:Src/BLDC_controller.c ****         /* Outputs for Atomic SubSystem: '<S72>/I_backCalc_fixdt' */
1899:Src/BLDC_controller.c ****         I_backCalc_fixdt((int16_T)(rtP->n_max - rtb_Abs5), rtP->cf_nKiLimProt,
1900:Src/BLDC_controller.c ****                          rtP->cf_KbLimProt, rtDW->Vq_max_M1, 0, &rtDW->Switch2,
1901:Src/BLDC_controller.c ****                          &rtDW->I_backCalc_fixdt_g);
1902:Src/BLDC_controller.c **** 
1903:Src/BLDC_controller.c ****         /* End of Outputs for SubSystem: '<S72>/I_backCalc_fixdt' */
1904:Src/BLDC_controller.c **** 
1905:Src/BLDC_controller.c ****         /* End of Outputs for SubSystem: '<S45>/Torque_Mode_Protection' */
1906:Src/BLDC_controller.c ****         break;
1907:Src/BLDC_controller.c ****       }
1908:Src/BLDC_controller.c **** 
1909:Src/BLDC_controller.c ****       /* End of SwitchCase: '<S45>/Switch Case' */
1910:Src/BLDC_controller.c **** 
1911:Src/BLDC_controller.c ****       /* Gain: '<S45>/Gain4' */
1912:Src/BLDC_controller.c ****       rtDW->Gain4_c = (int16_T)-rtDW->i_max;
 2519              		.loc 1 1912 0
 2520 0908 B4F86830 		ldrh	r3, [r4, #104]
 2521 090c 5B42     		negs	r3, r3
 2522 090e A4F86E30 		strh	r3, [r4, #110]	@ movhi
 2523              	.L183:
1913:Src/BLDC_controller.c **** 
1914:Src/BLDC_controller.c ****       /* End of Outputs for SubSystem: '<S6>/Motor_Limitations' */
1915:Src/BLDC_controller.c ****     }
1916:Src/BLDC_controller.c **** 
1917:Src/BLDC_controller.c ****     /* End of If: '<S6>/If3' */
1918:Src/BLDC_controller.c **** 
ARM GAS  /tmp/ccoxnsnM.s 			page 82


1919:Src/BLDC_controller.c ****     /* If: '<S6>/If1' incorporates:
1920:Src/BLDC_controller.c ****      *  UnitDelay: '<S8>/UnitDelay6'
1921:Src/BLDC_controller.c ****      */
1922:Src/BLDC_controller.c ****     if (rtDW->UnitDelay6_DSTATE) {
 2524              		.loc 1 1922 0
 2525 0912 94F89D30 		ldrb	r3, [r4, #157]	@ zero_extendqisi2
 2526 0916 002B     		cmp	r3, #0
 2527 0918 00F00081 		beq	.L194
1923:Src/BLDC_controller.c ****       /* Outputs for IfAction SubSystem: '<S6>/FOC' incorporates:
1924:Src/BLDC_controller.c ****        *  ActionPort: '<S42>/Action Port'
1925:Src/BLDC_controller.c ****        */
1926:Src/BLDC_controller.c ****       /* If: '<S42>/If1' incorporates:
1927:Src/BLDC_controller.c ****        *  Constant: '<S54>/cf_idKi1'
1928:Src/BLDC_controller.c ****        *  Constant: '<S54>/cf_idKp1'
1929:Src/BLDC_controller.c ****        *  Constant: '<S54>/constant1'
1930:Src/BLDC_controller.c ****        *  Sum: '<S54>/Sum3'
1931:Src/BLDC_controller.c ****        */
1932:Src/BLDC_controller.c ****       if (rtb_LogicalOperator) {
 2528              		.loc 1 1932 0
 2529 091c 079B     		ldr	r3, [sp, #28]
 2530 091e 002B     		cmp	r3, #0
 2531 0920 00F09F80 		beq	.L195
1933:Src/BLDC_controller.c ****         /* Outputs for IfAction SubSystem: '<S42>/Vd_Calculation' incorporates:
1934:Src/BLDC_controller.c ****          *  ActionPort: '<S54>/Action Port'
1935:Src/BLDC_controller.c ****          */
1936:Src/BLDC_controller.c ****         /* Switch: '<S66>/Switch2' incorporates:
1937:Src/BLDC_controller.c ****          *  RelationalOperator: '<S66>/LowerRelop1'
1938:Src/BLDC_controller.c ****          *  RelationalOperator: '<S66>/UpperRelop'
1939:Src/BLDC_controller.c ****          *  Switch: '<S66>/Switch'
1940:Src/BLDC_controller.c ****          */
1941:Src/BLDC_controller.c ****         if (rtb_toNegative > rtDW->i_max) {
 2532              		.loc 1 1941 0
 2533 0924 B4F96800 		ldrsh	r0, [r4, #104]
 2534 0928 0F9A     		ldr	r2, [sp, #60]
 2535 092a 8242     		cmp	r2, r0
 2536 092c 04DC     		bgt	.L196
1942:Src/BLDC_controller.c ****           rtb_toNegative = rtDW->i_max;
1943:Src/BLDC_controller.c ****         } else {
1944:Src/BLDC_controller.c ****           if (rtb_toNegative < rtDW->Gain4_c) {
 2537              		.loc 1 1944 0
 2538 092e B4F96E00 		ldrsh	r0, [r4, #110]
 2539 0932 8242     		cmp	r2, r0
 2540 0934 00DB     		blt	.L196
1579:Src/BLDC_controller.c **** 
 2541              		.loc 1 1579 0
 2542 0936 1046     		mov	r0, r2
 2543              	.L196:
 2544              	.LVL342:
1945:Src/BLDC_controller.c ****             /* Switch: '<S66>/Switch' */
1946:Src/BLDC_controller.c ****             rtb_toNegative = rtDW->Gain4_c;
1947:Src/BLDC_controller.c ****           }
1948:Src/BLDC_controller.c ****         }
1949:Src/BLDC_controller.c **** 
1950:Src/BLDC_controller.c ****         /* End of Switch: '<S66>/Switch2' */
1951:Src/BLDC_controller.c **** 
1952:Src/BLDC_controller.c ****         /* Sum: '<S54>/Sum3' */
1953:Src/BLDC_controller.c ****         rtb_Gain3 = rtb_toNegative - rtDW->DataTypeConversion[1];
ARM GAS  /tmp/ccoxnsnM.s 			page 83


 2545              		.loc 1 1953 0
 2546 0938 B4F95830 		ldrsh	r3, [r4, #88]
 2547 093c C01A     		subs	r0, r0, r3
 2548              	.LVL343:
1954:Src/BLDC_controller.c ****         if (rtb_Gain3 > 32767) {
 2549              		.loc 1 1954 0
 2550 093e B0F5004F 		cmp	r0, #32768
 2551 0942 73DA     		bge	.L281
1955:Src/BLDC_controller.c ****           rtb_Gain3 = 32767;
1956:Src/BLDC_controller.c ****         } else {
1957:Src/BLDC_controller.c ****           if (rtb_Gain3 < -32768) {
 2552              		.loc 1 1957 0
 2553 0944 10F5004F 		cmn	r0, #32768
 2554 0948 72DA     		bge	.L197
1958:Src/BLDC_controller.c ****             rtb_Gain3 = -32768;
 2555              		.loc 1 1958 0
 2556 094a 3648     		ldr	r0, .L345
 2557              	.LVL344:
 2558 094c 70E0     		b	.L197
 2559              	.LVL345:
 2560              	.L332:
1775:Src/BLDC_controller.c ****       } else {
 2561              		.loc 1 1775 0
 2562 094e 80B2     		uxth	r0, r0
 2563 0950 4042     		negs	r0, r0
 2564 0952 00B2     		sxth	r0, r0
 2565              	.LVL346:
 2566 0954 90E7     		b	.L184
 2567              	.LVL347:
 2568              	.L333:
1795:Src/BLDC_controller.c ****         MAX_int32_T : rtb_Gain3 / rtDW->i_max;
 2569              		.loc 1 1795 0
 2570 0956 B9F1FF3F 		cmp	r9, #-1
 2571 095a ADD1     		bne	.L185
1796:Src/BLDC_controller.c ****       if (rtb_Gain3 < 0) {
 2572              		.loc 1 1796 0
 2573 095c 6FF00040 		mvn	r0, #-2147483648
 2574              	.LVL348:
 2575 0960 ACE7     		b	.L186
 2576              	.LVL349:
 2577              	.L278:
1798:Src/BLDC_controller.c ****       } else {
 2578              		.loc 1 1798 0
 2579 0962 0020     		movs	r0, #0
 2580              	.LVL350:
 2581 0964 AFE7     		b	.L187
 2582              	.LVL351:
 2583              	.L279:
1801:Src/BLDC_controller.c ****         }
 2584              		.loc 1 1801 0
 2585 0966 4FF6FF70 		movw	r0, #65535
 2586              	.LVL352:
 2587 096a ACE7     		b	.L187
 2588              	.L334:
1834:Src/BLDC_controller.c ****           rtb_Merge_f_idx_1 = (int16_T)-rtDW->DataTypeConversion[0];
 2589              		.loc 1 1834 0
 2590 096c B4F95630 		ldrsh	r3, [r4, #86]
ARM GAS  /tmp/ccoxnsnM.s 			page 84


 2591 0970 002B     		cmp	r3, #0
 2592 0972 29DB     		blt	.L335
 2593              	.L192:
 2594              	.LVL353:
1847:Src/BLDC_controller.c ****                          rtP->cf_iqKiLimProt, rtP->cf_KbLimProt, rtb_Switch2_l,
 2595              		.loc 1 1847 0
 2596 0974 C01A     		subs	r0, r0, r3
 2597 0976 B5F8E220 		ldrh	r2, [r5, #226]
 2598 097a B5F8F010 		ldrh	r1, [r5, #240]
 2599 097e 04F11C03 		add	r3, r4, #28
 2600              	.LVL354:
 2601 0982 0293     		str	r3, [sp, #8]
 2602 0984 04F17403 		add	r3, r4, #116
 2603 0988 0193     		str	r3, [sp, #4]
 2604 098a 4FF00009 		mov	r9, #0
 2605 098e CDF80090 		str	r9, [sp]
 2606 0992 DDF838A0 		ldr	r10, [sp, #56]
 2607 0996 5346     		mov	r3, r10
 2608 0998 00B2     		sxth	r0, r0
 2609 099a FFF7FEFF 		bl	I_backCalc_fixdt
 2610              	.LVL355:
1854:Src/BLDC_controller.c ****                          rtP->cf_KbLimProt, rtb_Switch2_l, 0, &rtDW->Switch2_l,
 2611              		.loc 1 1854 0
 2612 099e B5F8D800 		ldrh	r0, [r5, #216]
 2613 09a2 069A     		ldr	r2, [sp, #24]
 2614 09a4 801A     		subs	r0, r0, r2
 2615 09a6 B5F8E220 		ldrh	r2, [r5, #226]
 2616 09aa B5F8F410 		ldrh	r1, [r5, #244]
 2617 09ae 04F11403 		add	r3, r4, #20
 2618 09b2 0293     		str	r3, [sp, #8]
 2619 09b4 04F17203 		add	r3, r4, #114
 2620 09b8 0193     		str	r3, [sp, #4]
 2621 09ba CDF80090 		str	r9, [sp]
 2622 09be 5346     		mov	r3, r10
 2623 09c0 00B2     		sxth	r0, r0
 2624 09c2 FFF7FEFF 		bl	I_backCalc_fixdt
 2625              	.LVL356:
1861:Src/BLDC_controller.c **** 
 2626              		.loc 1 1861 0
 2627 09c6 9FE7     		b	.L188
 2628              	.L335:
1835:Src/BLDC_controller.c ****         } else {
 2629              		.loc 1 1835 0
 2630 09c8 9BB2     		uxth	r3, r3
 2631 09ca 5B42     		negs	r3, r3
 2632 09cc 1BB2     		sxth	r3, r3
 2633              	.LVL357:
 2634 09ce D1E7     		b	.L192
 2635              	.LVL358:
 2636              	.L189:
1872:Src/BLDC_controller.c ****           rtb_Merge_f_idx_1 = rtDW->Divide1_a;
 2637              		.loc 1 1872 0
 2638 09d0 B4F95620 		ldrsh	r2, [r4, #86]
 2639 09d4 9145     		cmp	r9, r2
 2640 09d6 02DB     		blt	.L193
1874:Src/BLDC_controller.c ****           /* Switch: '<S74>/Switch' */
 2641              		.loc 1 1874 0
ARM GAS  /tmp/ccoxnsnM.s 			page 85


 2642 09d8 9342     		cmp	r3, r2
 2643 09da 0BDD     		ble	.L280
1876:Src/BLDC_controller.c ****         } else {
 2644              		.loc 1 1876 0
 2645 09dc 9946     		mov	r9, r3
 2646              	.L193:
 2647              	.LVL359:
1887:Src/BLDC_controller.c ****           * rtP->cf_iqKiLimProt;
 2648              		.loc 1 1887 0
 2649 09de 92B2     		uxth	r2, r2
 2650 09e0 A9EB0209 		sub	r9, r9, r2
 2651              	.LVL360:
 2652 09e4 0FFA89F9 		sxth	r9, r9
1888:Src/BLDC_controller.c **** 
 2653              		.loc 1 1888 0
 2654 09e8 B5F8F030 		ldrh	r3, [r5, #240]
 2655 09ec 03FB09F3 		mul	r3, r3, r9
1887:Src/BLDC_controller.c ****           * rtP->cf_iqKiLimProt;
 2656              		.loc 1 1887 0
 2657 09f0 A364     		str	r3, [r4, #72]
1891:Src/BLDC_controller.c **** 
 2658              		.loc 1 1891 0
 2659 09f2 89E7     		b	.L188
 2660              	.L280:
1878:Src/BLDC_controller.c ****         }
 2661              		.loc 1 1878 0
 2662 09f4 9146     		mov	r9, r2
 2663 09f6 F2E7     		b	.L193
 2664              	.L190:
1899:Src/BLDC_controller.c ****                          rtP->cf_KbLimProt, rtDW->Vq_max_M1, 0, &rtDW->Switch2,
 2665              		.loc 1 1899 0
 2666 09f8 B5F8D800 		ldrh	r0, [r5, #216]
 2667 09fc 069B     		ldr	r3, [sp, #24]
 2668 09fe C01A     		subs	r0, r0, r3
 2669 0a00 B5F8E220 		ldrh	r2, [r5, #226]
 2670 0a04 B5F8F410 		ldrh	r1, [r5, #244]
 2671 0a08 04F10C03 		add	r3, r4, #12
 2672 0a0c 0293     		str	r3, [sp, #8]
 2673 0a0e 04F17003 		add	r3, r4, #112
 2674 0a12 0193     		str	r3, [sp, #4]
 2675 0a14 0023     		movs	r3, #0
 2676 0a16 0093     		str	r3, [sp]
 2677 0a18 5346     		mov	r3, r10
 2678 0a1a 00B2     		sxth	r0, r0
 2679 0a1c FFF7FEFF 		bl	I_backCalc_fixdt
 2680              	.LVL361:
1906:Src/BLDC_controller.c ****       }
 2681              		.loc 1 1906 0
 2682 0a20 72E7     		b	.L188
 2683              	.L346:
 2684 0a22 00BF     		.align	2
 2685              	.L345:
 2686 0a24 0080FFFF 		.word	-32768
 2687 0a28 00000000 		.word	rtConstP
 2688              	.LVL362:
 2689              	.L281:
1955:Src/BLDC_controller.c ****         } else {
ARM GAS  /tmp/ccoxnsnM.s 			page 86


 2690              		.loc 1 1955 0
 2691 0a2c 47F6FF70 		movw	r0, #32767
 2692              	.LVL363:
 2693              	.L197:
1959:Src/BLDC_controller.c ****           }
1960:Src/BLDC_controller.c ****         }
1961:Src/BLDC_controller.c **** 
1962:Src/BLDC_controller.c ****         /* Outputs for Atomic SubSystem: '<S54>/PI_clamp_fixdt' */
1963:Src/BLDC_controller.c ****         PI_clamp_fixdt((int16_T)rtb_Gain3, rtP->cf_idKp, rtP->cf_idKi,
 2694              		.loc 1 1963 0
 2695 0a30 B4F96030 		ldrsh	r3, [r4, #96]
 2696 0a34 B5F8EC20 		ldrh	r2, [r5, #236]
 2697 0a38 B5F8E410 		ldrh	r1, [r5, #228]
 2698 0a3c 04F13C0E 		add	lr, r4, #60
 2699 0a40 CDF80CE0 		str	lr, [sp, #12]
 2700 0a44 04F1780E 		add	lr, r4, #120
 2701 0a48 CDF808E0 		str	lr, [sp, #8]
 2702 0a4c 4FF0000E 		mov	lr, #0
 2703 0a50 CDF804E0 		str	lr, [sp, #4]
 2704 0a54 B4F962E0 		ldrsh	lr, [r4, #98]
 2705 0a58 CDF800E0 		str	lr, [sp]
 2706 0a5c 00B2     		sxth	r0, r0
 2707              	.LVL364:
 2708 0a5e FFF7FEFF 		bl	PI_clamp_fixdt
 2709              	.LVL365:
 2710              	.L195:
1964:Src/BLDC_controller.c ****                        rtDW->Vd_max1, rtDW->Gain3, 0, &rtDW->Switch1,
1965:Src/BLDC_controller.c ****                        &rtDW->PI_clamp_fixdt_k);
1966:Src/BLDC_controller.c **** 
1967:Src/BLDC_controller.c ****         /* End of Outputs for SubSystem: '<S54>/PI_clamp_fixdt' */
1968:Src/BLDC_controller.c **** 
1969:Src/BLDC_controller.c ****         /* End of Outputs for SubSystem: '<S42>/Vd_Calculation' */
1970:Src/BLDC_controller.c ****       }
1971:Src/BLDC_controller.c **** 
1972:Src/BLDC_controller.c ****       /* End of If: '<S42>/If1' */
1973:Src/BLDC_controller.c **** 
1974:Src/BLDC_controller.c ****       /* SwitchCase: '<S42>/Switch Case' incorporates:
1975:Src/BLDC_controller.c ****        *  Constant: '<S52>/cf_nKi'
1976:Src/BLDC_controller.c ****        *  Constant: '<S52>/cf_nKp'
1977:Src/BLDC_controller.c ****        *  Constant: '<S53>/cf_iqKi'
1978:Src/BLDC_controller.c ****        *  Constant: '<S53>/cf_iqKp'
1979:Src/BLDC_controller.c ****        *  Constant: '<S53>/constant2'
1980:Src/BLDC_controller.c ****        *  Inport: '<S51>/r_inpTgtSca'
1981:Src/BLDC_controller.c ****        *  Sum: '<S52>/Sum3'
1982:Src/BLDC_controller.c ****        *  Sum: '<S53>/Sum2'
1983:Src/BLDC_controller.c ****        */
1984:Src/BLDC_controller.c ****       switch (rtDW->z_ctrlMod) {
 2711              		.loc 1 1984 0
 2712 0a62 94F89230 		ldrb	r3, [r4, #146]	@ zero_extendqisi2
 2713 0a66 022B     		cmp	r3, #2
 2714 0a68 32D0     		beq	.L199
 2715 0a6a 032B     		cmp	r3, #3
 2716 0a6c 79D0     		beq	.L200
 2717 0a6e 012B     		cmp	r3, #1
 2718 0a70 04D0     		beq	.L336
1985:Src/BLDC_controller.c ****        case 1:
1986:Src/BLDC_controller.c ****         /* Outputs for IfAction SubSystem: '<S42>/Voltage_Mode' incorporates:
ARM GAS  /tmp/ccoxnsnM.s 			page 87


1987:Src/BLDC_controller.c ****          *  ActionPort: '<S55>/Action Port'
1988:Src/BLDC_controller.c ****          */
1989:Src/BLDC_controller.c ****         /* MinMax: '<S55>/MinMax' */
1990:Src/BLDC_controller.c ****         if (!(rtb_Switch2_l < rtDW->Switch2_c)) {
1991:Src/BLDC_controller.c ****           rtb_Switch2_l = rtDW->Switch2_c;
1992:Src/BLDC_controller.c ****         }
1993:Src/BLDC_controller.c **** 
1994:Src/BLDC_controller.c ****         if (!(rtb_Switch2_l < rtDW->Switch2_l)) {
1995:Src/BLDC_controller.c ****           rtb_Switch2_l = rtDW->Switch2_l;
1996:Src/BLDC_controller.c ****         }
1997:Src/BLDC_controller.c **** 
1998:Src/BLDC_controller.c ****         /* End of MinMax: '<S55>/MinMax' */
1999:Src/BLDC_controller.c **** 
2000:Src/BLDC_controller.c ****         /* Signum: '<S55>/SignDeltaU2' */
2001:Src/BLDC_controller.c ****         if (rtDW->Merge1 < 0) {
2002:Src/BLDC_controller.c ****           rtb_Merge_f_idx_1 = -1;
2003:Src/BLDC_controller.c ****         } else {
2004:Src/BLDC_controller.c ****           rtb_Merge_f_idx_1 = (int16_T)(rtDW->Merge1 > 0);
2005:Src/BLDC_controller.c ****         }
2006:Src/BLDC_controller.c **** 
2007:Src/BLDC_controller.c ****         /* End of Signum: '<S55>/SignDeltaU2' */
2008:Src/BLDC_controller.c **** 
2009:Src/BLDC_controller.c ****         /* Product: '<S55>/Divide1' */
2010:Src/BLDC_controller.c ****         rtb_Merge = (int16_T)(rtb_Switch2_l * rtb_Merge_f_idx_1);
2011:Src/BLDC_controller.c **** 
2012:Src/BLDC_controller.c ****         /* Switch: '<S70>/Switch2' incorporates:
2013:Src/BLDC_controller.c ****          *  RelationalOperator: '<S70>/LowerRelop1'
2014:Src/BLDC_controller.c ****          *  RelationalOperator: '<S70>/UpperRelop'
2015:Src/BLDC_controller.c ****          *  Switch: '<S70>/Switch'
2016:Src/BLDC_controller.c ****          */
2017:Src/BLDC_controller.c ****         if (rtb_Merge > rtDW->Vq_max_M1) {
2018:Src/BLDC_controller.c ****           /* SignalConversion: '<S55>/Signal Conversion2' */
2019:Src/BLDC_controller.c ****           rtDW->Merge = rtDW->Vq_max_M1;
2020:Src/BLDC_controller.c ****         } else if (rtb_Merge < rtDW->Gain5) {
2021:Src/BLDC_controller.c ****           /* Switch: '<S70>/Switch' incorporates:
2022:Src/BLDC_controller.c ****            *  SignalConversion: '<S55>/Signal Conversion2'
2023:Src/BLDC_controller.c ****            */
2024:Src/BLDC_controller.c ****           rtDW->Merge = rtDW->Gain5;
2025:Src/BLDC_controller.c ****         } else {
2026:Src/BLDC_controller.c ****           /* SignalConversion: '<S55>/Signal Conversion2' incorporates:
2027:Src/BLDC_controller.c ****            *  Switch: '<S70>/Switch'
2028:Src/BLDC_controller.c ****            */
2029:Src/BLDC_controller.c ****           rtDW->Merge = rtb_Merge;
2030:Src/BLDC_controller.c ****         }
2031:Src/BLDC_controller.c **** 
2032:Src/BLDC_controller.c ****         /* End of Switch: '<S70>/Switch2' */
2033:Src/BLDC_controller.c ****         /* End of Outputs for SubSystem: '<S42>/Voltage_Mode' */
2034:Src/BLDC_controller.c ****         break;
2035:Src/BLDC_controller.c **** 
2036:Src/BLDC_controller.c ****        case 2:
2037:Src/BLDC_controller.c ****         /* Outputs for IfAction SubSystem: '<S42>/Speed_Mode' incorporates:
2038:Src/BLDC_controller.c ****          *  ActionPort: '<S52>/Action Port'
2039:Src/BLDC_controller.c ****          */
2040:Src/BLDC_controller.c ****         /* Sum: '<S52>/Sum3' */
2041:Src/BLDC_controller.c ****         rtb_Gain3 = rtDW->Merge1 - rtb_Switch2_k;
2042:Src/BLDC_controller.c ****         if (rtb_Gain3 > 32767) {
2043:Src/BLDC_controller.c ****           rtb_Gain3 = 32767;
ARM GAS  /tmp/ccoxnsnM.s 			page 88


2044:Src/BLDC_controller.c ****         } else {
2045:Src/BLDC_controller.c ****           if (rtb_Gain3 < -32768) {
2046:Src/BLDC_controller.c ****             rtb_Gain3 = -32768;
2047:Src/BLDC_controller.c ****           }
2048:Src/BLDC_controller.c ****         }
2049:Src/BLDC_controller.c **** 
2050:Src/BLDC_controller.c ****         /* Outputs for Atomic SubSystem: '<S52>/PI_clamp_fixdt' */
2051:Src/BLDC_controller.c ****         PI_clamp_fixdt((int16_T)rtb_Gain3, rtP->cf_nKp, rtP->cf_nKi,
2052:Src/BLDC_controller.c ****                        rtDW->Vq_max_M1, rtDW->Gain5, rtDW->Divide1, &rtDW->Merge,
2053:Src/BLDC_controller.c ****                        &rtDW->PI_clamp_fixdt_o);
2054:Src/BLDC_controller.c **** 
2055:Src/BLDC_controller.c ****         /* End of Outputs for SubSystem: '<S52>/PI_clamp_fixdt' */
2056:Src/BLDC_controller.c **** 
2057:Src/BLDC_controller.c ****         /* End of Outputs for SubSystem: '<S42>/Speed_Mode' */
2058:Src/BLDC_controller.c ****         break;
2059:Src/BLDC_controller.c **** 
2060:Src/BLDC_controller.c ****        case 3:
2061:Src/BLDC_controller.c ****         /* Outputs for IfAction SubSystem: '<S42>/Torque_Mode' incorporates:
2062:Src/BLDC_controller.c ****          *  ActionPort: '<S53>/Action Port'
2063:Src/BLDC_controller.c ****          */
2064:Src/BLDC_controller.c ****         /* Gain: '<S53>/Gain4' */
2065:Src/BLDC_controller.c ****         rtb_Merge = (int16_T)-rtDW->Switch2;
2066:Src/BLDC_controller.c **** 
2067:Src/BLDC_controller.c ****         /* Switch: '<S61>/Switch2' incorporates:
2068:Src/BLDC_controller.c ****          *  RelationalOperator: '<S61>/LowerRelop1'
2069:Src/BLDC_controller.c ****          *  RelationalOperator: '<S61>/UpperRelop'
2070:Src/BLDC_controller.c ****          *  Switch: '<S61>/Switch'
2071:Src/BLDC_controller.c ****          */
2072:Src/BLDC_controller.c ****         if (rtDW->Merge1 > rtDW->Divide1_a) {
2073:Src/BLDC_controller.c ****           rtb_Merge_f_idx_1 = rtDW->Divide1_a;
2074:Src/BLDC_controller.c ****         } else if (rtDW->Merge1 < rtDW->Gain1) {
2075:Src/BLDC_controller.c ****           /* Switch: '<S61>/Switch' */
2076:Src/BLDC_controller.c ****           rtb_Merge_f_idx_1 = rtDW->Gain1;
2077:Src/BLDC_controller.c ****         } else {
2078:Src/BLDC_controller.c ****           rtb_Merge_f_idx_1 = rtDW->Merge1;
2079:Src/BLDC_controller.c ****         }
2080:Src/BLDC_controller.c **** 
2081:Src/BLDC_controller.c ****         /* End of Switch: '<S61>/Switch2' */
2082:Src/BLDC_controller.c **** 
2083:Src/BLDC_controller.c ****         /* Sum: '<S53>/Sum2' */
2084:Src/BLDC_controller.c ****         rtb_Gain3 = rtb_Merge_f_idx_1 - rtDW->DataTypeConversion[0];
2085:Src/BLDC_controller.c ****         if (rtb_Gain3 > 32767) {
2086:Src/BLDC_controller.c ****           rtb_Gain3 = 32767;
2087:Src/BLDC_controller.c ****         } else {
2088:Src/BLDC_controller.c ****           if (rtb_Gain3 < -32768) {
2089:Src/BLDC_controller.c ****             rtb_Gain3 = -32768;
2090:Src/BLDC_controller.c ****           }
2091:Src/BLDC_controller.c ****         }
2092:Src/BLDC_controller.c **** 
2093:Src/BLDC_controller.c ****         /* MinMax: '<S53>/MinMax1' */
2094:Src/BLDC_controller.c ****         if (rtDW->Vq_max_M1 < rtDW->Switch2) {
2095:Src/BLDC_controller.c ****           rtb_Merge_f_idx_1 = rtDW->Vq_max_M1;
2096:Src/BLDC_controller.c ****         } else {
2097:Src/BLDC_controller.c ****           rtb_Merge_f_idx_1 = rtDW->Switch2;
2098:Src/BLDC_controller.c ****         }
2099:Src/BLDC_controller.c **** 
2100:Src/BLDC_controller.c ****         /* End of MinMax: '<S53>/MinMax1' */
ARM GAS  /tmp/ccoxnsnM.s 			page 89


2101:Src/BLDC_controller.c **** 
2102:Src/BLDC_controller.c ****         /* MinMax: '<S53>/MinMax2' */
2103:Src/BLDC_controller.c ****         if (!(rtb_Merge > rtDW->Gain5)) {
2104:Src/BLDC_controller.c ****           rtb_Merge = rtDW->Gain5;
2105:Src/BLDC_controller.c ****         }
2106:Src/BLDC_controller.c **** 
2107:Src/BLDC_controller.c ****         /* End of MinMax: '<S53>/MinMax2' */
2108:Src/BLDC_controller.c **** 
2109:Src/BLDC_controller.c ****         /* Outputs for Atomic SubSystem: '<S53>/PI_clamp_fixdt' */
2110:Src/BLDC_controller.c ****         PI_clamp_fixdt((int16_T)rtb_Gain3, rtP->cf_iqKp, rtP->cf_iqKi,
2111:Src/BLDC_controller.c ****                        rtb_Merge_f_idx_1, rtb_Merge, 0, &rtDW->Merge,
2112:Src/BLDC_controller.c ****                        &rtDW->PI_clamp_fixdt_a);
2113:Src/BLDC_controller.c **** 
2114:Src/BLDC_controller.c ****         /* End of Outputs for SubSystem: '<S53>/PI_clamp_fixdt' */
2115:Src/BLDC_controller.c **** 
2116:Src/BLDC_controller.c ****         /* End of Outputs for SubSystem: '<S42>/Torque_Mode' */
2117:Src/BLDC_controller.c ****         break;
2118:Src/BLDC_controller.c **** 
2119:Src/BLDC_controller.c ****        default:
2120:Src/BLDC_controller.c ****         /* Outputs for IfAction SubSystem: '<S42>/Open_Mode' incorporates:
2121:Src/BLDC_controller.c ****          *  ActionPort: '<S51>/Action Port'
2122:Src/BLDC_controller.c ****          */
2123:Src/BLDC_controller.c ****         rtDW->Merge = rtDW->Merge1;
 2719              		.loc 1 2123 0
 2720 0a72 B4F95C30 		ldrsh	r3, [r4, #92]
 2721 0a76 A4F87630 		strh	r3, [r4, #118]	@ movhi
2124:Src/BLDC_controller.c **** 
2125:Src/BLDC_controller.c ****         /* End of Outputs for SubSystem: '<S42>/Open_Mode' */
2126:Src/BLDC_controller.c ****         break;
 2722              		.loc 1 2126 0
 2723 0a7a 4FE0     		b	.L194
 2724              	.L336:
1990:Src/BLDC_controller.c ****           rtb_Switch2_l = rtDW->Switch2_c;
 2725              		.loc 1 1990 0
 2726 0a7c B4F97420 		ldrsh	r2, [r4, #116]
 2727 0a80 0E99     		ldr	r1, [sp, #56]
 2728 0a82 9142     		cmp	r1, r2
 2729 0a84 00DA     		bge	.L202
 2730 0a86 0A46     		mov	r2, r1
 2731              	.L202:
 2732              	.LVL366:
1994:Src/BLDC_controller.c ****           rtb_Switch2_l = rtDW->Switch2_l;
 2733              		.loc 1 1994 0
 2734 0a88 B4F97230 		ldrsh	r3, [r4, #114]
 2735 0a8c 9A42     		cmp	r2, r3
 2736 0a8e 00DA     		bge	.L203
 2737 0a90 1346     		mov	r3, r2
 2738              	.L203:
 2739              	.LVL367:
2001:Src/BLDC_controller.c ****           rtb_Merge_f_idx_1 = -1;
 2740              		.loc 1 2001 0
 2741 0a92 B4F95C20 		ldrsh	r2, [r4, #92]
 2742 0a96 002A     		cmp	r2, #0
 2743 0a98 0DDB     		blt	.L283
2004:Src/BLDC_controller.c ****         }
 2744              		.loc 1 2004 0
 2745 0a9a 002A     		cmp	r2, #0
ARM GAS  /tmp/ccoxnsnM.s 			page 90


 2746 0a9c D4BF     		ite	le
 2747 0a9e 0022     		movle	r2, #0
 2748 0aa0 0122     		movgt	r2, #1
 2749              	.LVL368:
 2750              	.L204:
2010:Src/BLDC_controller.c **** 
 2751              		.loc 1 2010 0
 2752 0aa2 03FB02F3 		mul	r3, r3, r2
 2753              	.LVL369:
 2754 0aa6 1BB2     		sxth	r3, r3
 2755              	.LVL370:
2017:Src/BLDC_controller.c ****           /* SignalConversion: '<S55>/Signal Conversion2' */
 2756              		.loc 1 2017 0
 2757 0aa8 B4F96420 		ldrsh	r2, [r4, #100]
 2758              	.LVL371:
 2759 0aac 9342     		cmp	r3, r2
 2760 0aae 05DD     		ble	.L205
2019:Src/BLDC_controller.c ****         } else if (rtb_Merge < rtDW->Gain5) {
 2761              		.loc 1 2019 0
 2762 0ab0 A4F87620 		strh	r2, [r4, #118]	@ movhi
 2763 0ab4 32E0     		b	.L194
 2764              	.LVL372:
 2765              	.L283:
2002:Src/BLDC_controller.c ****         } else {
 2766              		.loc 1 2002 0
 2767 0ab6 4FF0FF32 		mov	r2, #-1
 2768 0aba F2E7     		b	.L204
 2769              	.LVL373:
 2770              	.L205:
2020:Src/BLDC_controller.c ****           /* Switch: '<S70>/Switch' incorporates:
 2771              		.loc 1 2020 0
 2772 0abc B4F96620 		ldrsh	r2, [r4, #102]
 2773 0ac0 9342     		cmp	r3, r2
 2774 0ac2 02DA     		bge	.L206
2024:Src/BLDC_controller.c ****         } else {
 2775              		.loc 1 2024 0
 2776 0ac4 A4F87620 		strh	r2, [r4, #118]	@ movhi
 2777 0ac8 28E0     		b	.L194
 2778              	.L206:
2029:Src/BLDC_controller.c ****         }
 2779              		.loc 1 2029 0
 2780 0aca A4F87630 		strh	r3, [r4, #118]	@ movhi
 2781 0ace 25E0     		b	.L194
 2782              	.LVL374:
 2783              	.L199:
2041:Src/BLDC_controller.c ****         if (rtb_Gain3 > 32767) {
 2784              		.loc 1 2041 0
 2785 0ad0 B4F95C00 		ldrsh	r0, [r4, #92]
 2786 0ad4 059B     		ldr	r3, [sp, #20]
 2787 0ad6 C01A     		subs	r0, r0, r3
 2788              	.LVL375:
2042:Src/BLDC_controller.c ****           rtb_Gain3 = 32767;
 2789              		.loc 1 2042 0
 2790 0ad8 B0F5004F 		cmp	r0, #32768
 2791 0adc 04DA     		bge	.L284
2045:Src/BLDC_controller.c ****             rtb_Gain3 = -32768;
 2792              		.loc 1 2045 0
ARM GAS  /tmp/ccoxnsnM.s 			page 91


 2793 0ade 10F5004F 		cmn	r0, #32768
 2794 0ae2 03DA     		bge	.L207
2046:Src/BLDC_controller.c ****           }
 2795              		.loc 1 2046 0
 2796 0ae4 BD48     		ldr	r0, .L347
 2797              	.LVL376:
 2798 0ae6 01E0     		b	.L207
 2799              	.LVL377:
 2800              	.L284:
2043:Src/BLDC_controller.c ****         } else {
 2801              		.loc 1 2043 0
 2802 0ae8 47F6FF70 		movw	r0, #32767
 2803              	.LVL378:
 2804              	.L207:
2051:Src/BLDC_controller.c ****                        rtDW->Vq_max_M1, rtDW->Gain5, rtDW->Divide1, &rtDW->Merge,
 2805              		.loc 1 2051 0
 2806 0aec B4F964C0 		ldrsh	ip, [r4, #100]
 2807 0af0 B5F8F220 		ldrh	r2, [r5, #242]
 2808 0af4 B5F8E810 		ldrh	r1, [r5, #232]
 2809 0af8 04F1340E 		add	lr, r4, #52
 2810 0afc CDF80CE0 		str	lr, [sp, #12]
 2811 0b00 04F1760E 		add	lr, r4, #118
 2812 0b04 CDF808E0 		str	lr, [sp, #8]
 2813 0b08 A36C     		ldr	r3, [r4, #72]
 2814 0b0a 0193     		str	r3, [sp, #4]
 2815 0b0c B4F966E0 		ldrsh	lr, [r4, #102]
 2816 0b10 CDF800E0 		str	lr, [sp]
 2817 0b14 6346     		mov	r3, ip
 2818 0b16 00B2     		sxth	r0, r0
 2819              	.LVL379:
 2820 0b18 FFF7FEFF 		bl	PI_clamp_fixdt
 2821              	.LVL380:
 2822              	.L194:
2127:Src/BLDC_controller.c ****       }
2128:Src/BLDC_controller.c **** 
2129:Src/BLDC_controller.c ****       /* End of SwitchCase: '<S42>/Switch Case' */
2130:Src/BLDC_controller.c ****       /* End of Outputs for SubSystem: '<S6>/FOC' */
2131:Src/BLDC_controller.c ****     }
2132:Src/BLDC_controller.c **** 
2133:Src/BLDC_controller.c ****     /* End of If: '<S6>/If1' */
2134:Src/BLDC_controller.c **** 
2135:Src/BLDC_controller.c ****     /* Sum: '<S44>/Sum6' incorporates:
2136:Src/BLDC_controller.c ****      *  Interpolation_n-D: '<S47>/r_cos_M1'
2137:Src/BLDC_controller.c ****      *  Interpolation_n-D: '<S47>/r_sin_M1'
2138:Src/BLDC_controller.c ****      *  Product: '<S44>/Divide1'
2139:Src/BLDC_controller.c ****      *  Product: '<S44>/Divide4'
2140:Src/BLDC_controller.c ****      */
2141:Src/BLDC_controller.c ****     rtb_Gain3 = (int16_T)((rtDW->Switch1 * rtConstP.r_cos_M1_Table[rtb_Sum_l]) >>
 2823              		.loc 1 2141 0
 2824 0b1c B4F97800 		ldrsh	r0, [r4, #120]
 2825 0b20 DFF8BCE2 		ldr	lr, .L347+4
 2826 0b24 0C9B     		ldr	r3, [sp, #48]
 2827 0b26 03F53573 		add	r3, r3, #724
 2828 0b2a 3EF913C0 		ldrsh	ip, [lr, r3, lsl #1]
 2829 0b2e 0CFB00F2 		mul	r2, ip, r0
 2830 0b32 42F38F32 		sbfx	r2, r2, #14, #16
2142:Src/BLDC_controller.c ****                           14) - (int16_T)((rtDW->Merge *
ARM GAS  /tmp/ccoxnsnM.s 			page 92


 2831              		.loc 1 2142 0
 2832 0b36 B4F97610 		ldrsh	r1, [r4, #118]
2143:Src/BLDC_controller.c ****       rtConstP.r_sin_M1_Table[rtb_Sum_l]) >> 14);
 2833              		.loc 1 2143 0
 2834 0b3a 0C9B     		ldr	r3, [sp, #48]
 2835 0b3c 03F50773 		add	r3, r3, #540
 2836 0b40 0EEB4303 		add	r3, lr, r3, lsl #1
 2837 0b44 B3F906E0 		ldrsh	lr, [r3, #6]
2142:Src/BLDC_controller.c ****                           14) - (int16_T)((rtDW->Merge *
 2838              		.loc 1 2142 0
 2839 0b48 0EFB01F3 		mul	r3, lr, r1
 2840 0b4c 43F38F33 		sbfx	r3, r3, #14, #16
2141:Src/BLDC_controller.c ****                           14) - (int16_T)((rtDW->Merge *
 2841              		.loc 1 2141 0
 2842 0b50 D21A     		subs	r2, r2, r3
 2843              	.LVL381:
2144:Src/BLDC_controller.c ****     if (rtb_Gain3 > 32767) {
 2844              		.loc 1 2144 0
 2845 0b52 B2F5004F 		cmp	r2, #32768
 2846 0b56 41DA     		bge	.L289
2145:Src/BLDC_controller.c ****       rtb_Gain3 = 32767;
2146:Src/BLDC_controller.c ****     } else {
2147:Src/BLDC_controller.c ****       if (rtb_Gain3 < -32768) {
 2847              		.loc 1 2147 0
 2848 0b58 12F5004F 		cmn	r2, #32768
 2849 0b5c 40DA     		bge	.L212
2148:Src/BLDC_controller.c ****         rtb_Gain3 = -32768;
 2850              		.loc 1 2148 0
 2851 0b5e 9F4A     		ldr	r2, .L347
 2852              	.LVL382:
 2853 0b60 3EE0     		b	.L212
 2854              	.LVL383:
 2855              	.L200:
2065:Src/BLDC_controller.c **** 
 2856              		.loc 1 2065 0
 2857 0b62 B4F97030 		ldrsh	r3, [r4, #112]
 2858 0b66 9AB2     		uxth	r2, r3
 2859 0b68 5242     		negs	r2, r2
 2860 0b6a 12B2     		sxth	r2, r2
 2861              	.LVL384:
2072:Src/BLDC_controller.c ****           rtb_Merge_f_idx_1 = rtDW->Divide1_a;
 2862              		.loc 1 2072 0
 2863 0b6c B4F95C10 		ldrsh	r1, [r4, #92]
 2864 0b70 B4F96A00 		ldrsh	r0, [r4, #106]
 2865 0b74 8142     		cmp	r1, r0
 2866 0b76 04DC     		bgt	.L208
2074:Src/BLDC_controller.c ****           /* Switch: '<S61>/Switch' */
 2867              		.loc 1 2074 0
 2868 0b78 B4F96C00 		ldrsh	r0, [r4, #108]
 2869 0b7c 8142     		cmp	r1, r0
 2870 0b7e 00DB     		blt	.L208
2078:Src/BLDC_controller.c ****         }
 2871              		.loc 1 2078 0
 2872 0b80 0846     		mov	r0, r1
 2873              	.L208:
 2874              	.LVL385:
2084:Src/BLDC_controller.c ****         if (rtb_Gain3 > 32767) {
ARM GAS  /tmp/ccoxnsnM.s 			page 93


 2875              		.loc 1 2084 0
 2876 0b82 B4F95610 		ldrsh	r1, [r4, #86]
 2877 0b86 401A     		subs	r0, r0, r1
 2878              	.LVL386:
2085:Src/BLDC_controller.c ****           rtb_Gain3 = 32767;
 2879              		.loc 1 2085 0
 2880 0b88 B0F5004F 		cmp	r0, #32768
 2881 0b8c 04DA     		bge	.L287
2088:Src/BLDC_controller.c ****             rtb_Gain3 = -32768;
 2882              		.loc 1 2088 0
 2883 0b8e 10F5004F 		cmn	r0, #32768
 2884 0b92 03DA     		bge	.L209
2089:Src/BLDC_controller.c ****           }
 2885              		.loc 1 2089 0
 2886 0b94 9148     		ldr	r0, .L347
 2887              	.LVL387:
 2888 0b96 01E0     		b	.L209
 2889              	.LVL388:
 2890              	.L287:
2086:Src/BLDC_controller.c ****         } else {
 2891              		.loc 1 2086 0
 2892 0b98 47F6FF70 		movw	r0, #32767
 2893              	.LVL389:
 2894              	.L209:
2094:Src/BLDC_controller.c ****           rtb_Merge_f_idx_1 = rtDW->Vq_max_M1;
 2895              		.loc 1 2094 0
 2896 0b9c B4F96410 		ldrsh	r1, [r4, #100]
 2897 0ba0 8B42     		cmp	r3, r1
 2898 0ba2 00DD     		ble	.L210
2095:Src/BLDC_controller.c ****         } else {
 2899              		.loc 1 2095 0
 2900 0ba4 0B46     		mov	r3, r1
 2901              	.L210:
 2902              	.LVL390:
2103:Src/BLDC_controller.c ****           rtb_Merge = rtDW->Gain5;
 2903              		.loc 1 2103 0
 2904 0ba6 B4F966E0 		ldrsh	lr, [r4, #102]
 2905 0baa 7245     		cmp	r2, lr
 2906 0bac 00DD     		ble	.L211
2065:Src/BLDC_controller.c **** 
 2907              		.loc 1 2065 0
 2908 0bae 9646     		mov	lr, r2
 2909              	.L211:
 2910              	.LVL391:
2110:Src/BLDC_controller.c ****                        rtb_Merge_f_idx_1, rtb_Merge, 0, &rtDW->Merge,
 2911              		.loc 1 2110 0
 2912 0bb0 B5F8EE20 		ldrh	r2, [r5, #238]
 2913 0bb4 B5F8E610 		ldrh	r1, [r5, #230]
 2914 0bb8 04F12C0C 		add	ip, r4, #44
 2915 0bbc CDF80CC0 		str	ip, [sp, #12]
 2916 0bc0 04F1760C 		add	ip, r4, #118
 2917 0bc4 CDF808C0 		str	ip, [sp, #8]
 2918 0bc8 4FF0000C 		mov	ip, #0
 2919 0bcc CDF804C0 		str	ip, [sp, #4]
 2920 0bd0 CDF800E0 		str	lr, [sp]
 2921 0bd4 00B2     		sxth	r0, r0
 2922              	.LVL392:
ARM GAS  /tmp/ccoxnsnM.s 			page 94


 2923 0bd6 FFF7FEFF 		bl	PI_clamp_fixdt
 2924              	.LVL393:
2117:Src/BLDC_controller.c **** 
 2925              		.loc 1 2117 0
 2926 0bda 9FE7     		b	.L194
 2927              	.LVL394:
 2928              	.L289:
2145:Src/BLDC_controller.c ****     } else {
 2929              		.loc 1 2145 0
 2930 0bdc 47F6FF72 		movw	r2, #32767
 2931              	.LVL395:
 2932              	.L212:
2149:Src/BLDC_controller.c ****       }
2150:Src/BLDC_controller.c ****     }
2151:Src/BLDC_controller.c **** 
2152:Src/BLDC_controller.c ****     /* Sum: '<S44>/Sum1' incorporates:
2153:Src/BLDC_controller.c ****      *  Interpolation_n-D: '<S47>/r_cos_M1'
2154:Src/BLDC_controller.c ****      *  Interpolation_n-D: '<S47>/r_sin_M1'
2155:Src/BLDC_controller.c ****      *  Product: '<S44>/Divide2'
2156:Src/BLDC_controller.c ****      *  Product: '<S44>/Divide3'
2157:Src/BLDC_controller.c ****      */
2158:Src/BLDC_controller.c ****     rtb_DataTypeConversion = (int16_T)((rtDW->Switch1 *
 2933              		.loc 1 2158 0
 2934 0be0 0EFB00FE 		mul	lr, lr, r0
 2935 0be4 4EF38F3E 		sbfx	lr, lr, #14, #16
2159:Src/BLDC_controller.c ****       rtConstP.r_sin_M1_Table[rtb_Sum_l]) >> 14) + (int16_T)((rtDW->Merge *
 2936              		.loc 1 2159 0
 2937 0be8 01FB0CF1 		mul	r1, r1, ip
 2938 0bec 41F38F31 		sbfx	r1, r1, #14, #16
2158:Src/BLDC_controller.c ****       rtConstP.r_sin_M1_Table[rtb_Sum_l]) >> 14) + (int16_T)((rtDW->Merge *
 2939              		.loc 1 2158 0
 2940 0bf0 7144     		add	r1, r1, lr
 2941              	.LVL396:
2160:Src/BLDC_controller.c ****       rtConstP.r_cos_M1_Table[rtb_Sum_l]) >> 14);
2161:Src/BLDC_controller.c ****     if (rtb_DataTypeConversion > 32767) {
 2942              		.loc 1 2161 0
 2943 0bf2 B1F5004F 		cmp	r1, #32768
 2944 0bf6 04DA     		bge	.L291
2162:Src/BLDC_controller.c ****       rtb_DataTypeConversion = 32767;
2163:Src/BLDC_controller.c ****     } else {
2164:Src/BLDC_controller.c ****       if (rtb_DataTypeConversion < -32768) {
 2945              		.loc 1 2164 0
 2946 0bf8 11F5004F 		cmn	r1, #32768
 2947 0bfc 03DA     		bge	.L213
2165:Src/BLDC_controller.c ****         rtb_DataTypeConversion = -32768;
 2948              		.loc 1 2165 0
 2949 0bfe 7749     		ldr	r1, .L347
 2950              	.LVL397:
 2951 0c00 01E0     		b	.L213
 2952              	.LVL398:
 2953              	.L291:
2162:Src/BLDC_controller.c ****       rtb_DataTypeConversion = 32767;
 2954              		.loc 1 2162 0
 2955 0c02 47F6FF71 		movw	r1, #32767
 2956              	.LVL399:
 2957              	.L213:
2166:Src/BLDC_controller.c ****       }
ARM GAS  /tmp/ccoxnsnM.s 			page 95


2167:Src/BLDC_controller.c ****     }
2168:Src/BLDC_controller.c **** 
2169:Src/BLDC_controller.c ****     /* Gain: '<S43>/Gain1' incorporates:
2170:Src/BLDC_controller.c ****      *  Sum: '<S44>/Sum1'
2171:Src/BLDC_controller.c ****      */
2172:Src/BLDC_controller.c ****     rtb_DataTypeConversion *= 14189;
 2958              		.loc 1 2172 0
 2959 0c06 43F26D7E 		movw	lr, #14189
 2960 0c0a 0EFB01F1 		mul	r1, lr, r1
 2961              	.LVL400:
2173:Src/BLDC_controller.c **** 
2174:Src/BLDC_controller.c ****     /* Sum: '<S43>/Sum6' incorporates:
2175:Src/BLDC_controller.c ****      *  Gain: '<S43>/Gain1'
2176:Src/BLDC_controller.c ****      *  Gain: '<S43>/Gain3'
2177:Src/BLDC_controller.c ****      *  Sum: '<S44>/Sum6'
2178:Src/BLDC_controller.c ****      */
2179:Src/BLDC_controller.c ****     rtb_DataTypeConversion = (((rtb_DataTypeConversion < 0 ? 16383 : 0) +
 2962              		.loc 1 2179 0
 2963 0c0e 0029     		cmp	r1, #0
 2964 0c10 12DB     		blt	.L337
 2965 0c12 0023     		movs	r3, #0
 2966              	.L214:
 2967              		.loc 1 2179 0 is_stmt 0 discriminator 4
 2968 0c14 03EB010E 		add	lr, r3, r1
2180:Src/BLDC_controller.c ****       rtb_DataTypeConversion) >> 14) - ((int16_T)(((int16_T)rtb_Gain3 < 0) +
 2969              		.loc 1 2180 0 is_stmt 1 discriminator 4
 2970 0c18 11B2     		sxth	r1, r2
 2971              	.LVL401:
2181:Src/BLDC_controller.c ****       (int16_T)rtb_Gain3) >> 1);
 2972              		.loc 1 2181 0 discriminator 4
 2973 0c1a 93B2     		uxth	r3, r2
2180:Src/BLDC_controller.c ****       rtb_DataTypeConversion) >> 14) - ((int16_T)(((int16_T)rtb_Gain3 < 0) +
 2974              		.loc 1 2180 0 discriminator 4
 2975 0c1c 03EBD173 		add	r3, r3, r1, lsr #31
 2976              		.loc 1 2181 0 discriminator 4
 2977 0c20 43F34E03 		sbfx	r3, r3, #1, #15
2179:Src/BLDC_controller.c ****       rtb_DataTypeConversion) >> 14) - ((int16_T)(((int16_T)rtb_Gain3 < 0) +
 2978              		.loc 1 2179 0 discriminator 4
 2979 0c24 C3EBAE33 		rsb	r3, r3, lr, asr #14
 2980              	.LVL402:
2182:Src/BLDC_controller.c ****     if (rtb_DataTypeConversion > 32767) {
 2981              		.loc 1 2182 0 discriminator 4
 2982 0c28 B3F5004F 		cmp	r3, #32768
 2983 0c2c 07DA     		bge	.L294
2183:Src/BLDC_controller.c ****       rtb_DataTypeConversion = 32767;
2184:Src/BLDC_controller.c ****     } else {
2185:Src/BLDC_controller.c ****       if (rtb_DataTypeConversion < -32768) {
 2984              		.loc 1 2185 0
 2985 0c2e 13F5004F 		cmn	r3, #32768
 2986 0c32 06DA     		bge	.L215
2186:Src/BLDC_controller.c ****         rtb_DataTypeConversion = -32768;
 2987              		.loc 1 2186 0
 2988 0c34 694B     		ldr	r3, .L347
 2989              	.LVL403:
 2990 0c36 04E0     		b	.L215
 2991              	.LVL404:
 2992              	.L337:
ARM GAS  /tmp/ccoxnsnM.s 			page 96


2179:Src/BLDC_controller.c ****       rtb_DataTypeConversion) >> 14) - ((int16_T)(((int16_T)rtb_Gain3 < 0) +
 2993              		.loc 1 2179 0
 2994 0c38 43F6FF73 		movw	r3, #16383
 2995 0c3c EAE7     		b	.L214
 2996              	.LVL405:
 2997              	.L294:
2183:Src/BLDC_controller.c ****       rtb_DataTypeConversion = 32767;
 2998              		.loc 1 2183 0
 2999 0c3e 47F6FF73 		movw	r3, #32767
 3000              	.LVL406:
 3001              	.L215:
2187:Src/BLDC_controller.c ****       }
2188:Src/BLDC_controller.c ****     }
2189:Src/BLDC_controller.c **** 
2190:Src/BLDC_controller.c ****     /* Sum: '<S43>/Sum2' incorporates:
2191:Src/BLDC_controller.c ****      *  Sum: '<S43>/Sum6'
2192:Src/BLDC_controller.c ****      *  Sum: '<S44>/Sum6'
2193:Src/BLDC_controller.c ****      */
2194:Src/BLDC_controller.c ****     rtb_Switch1 = -(int16_T)rtb_Gain3 - (int16_T)rtb_DataTypeConversion;
 3002              		.loc 1 2194 0
 3003 0c42 4A42     		negs	r2, r1
 3004              	.LVL407:
 3005 0c44 1BB2     		sxth	r3, r3
 3006              	.LVL408:
 3007 0c46 9E46     		mov	lr, r3
 3008 0c48 D21A     		subs	r2, r2, r3
 3009              	.LVL409:
2195:Src/BLDC_controller.c ****     if (rtb_Switch1 > 32767) {
 3010              		.loc 1 2195 0
 3011 0c4a B2F5004F 		cmp	r2, #32768
 3012 0c4e 04DA     		bge	.L296
2196:Src/BLDC_controller.c ****       rtb_Switch1 = 32767;
2197:Src/BLDC_controller.c ****     } else {
2198:Src/BLDC_controller.c ****       if (rtb_Switch1 < -32768) {
 3013              		.loc 1 2198 0
 3014 0c50 12F5004F 		cmn	r2, #32768
 3015 0c54 03DA     		bge	.L216
2199:Src/BLDC_controller.c ****         rtb_Switch1 = -32768;
 3016              		.loc 1 2199 0
 3017 0c56 614A     		ldr	r2, .L347
 3018              	.LVL410:
 3019 0c58 01E0     		b	.L216
 3020              	.LVL411:
 3021              	.L296:
2196:Src/BLDC_controller.c ****       rtb_Switch1 = 32767;
 3022              		.loc 1 2196 0
 3023 0c5a 47F6FF72 		movw	r2, #32767
 3024              	.LVL412:
 3025              	.L216:
2200:Src/BLDC_controller.c ****       }
2201:Src/BLDC_controller.c ****     }
2202:Src/BLDC_controller.c **** 
2203:Src/BLDC_controller.c ****     /* MinMax: '<S43>/MinMax1' incorporates:
2204:Src/BLDC_controller.c ****      *  Sum: '<S43>/Sum2'
2205:Src/BLDC_controller.c ****      *  Sum: '<S43>/Sum6'
2206:Src/BLDC_controller.c ****      *  Sum: '<S44>/Sum6'
2207:Src/BLDC_controller.c ****      */
ARM GAS  /tmp/ccoxnsnM.s 			page 97


2208:Src/BLDC_controller.c ****     rtb_Switch2_l = (int16_T)rtb_Gain3;
2209:Src/BLDC_controller.c ****     if (!((int16_T)rtb_Gain3 < (int16_T)rtb_DataTypeConversion)) {
 3026              		.loc 1 2209 0
 3027 0c5e 9942     		cmp	r1, r3
 3028 0c60 13DA     		bge	.L298
2208:Src/BLDC_controller.c ****     if (!((int16_T)rtb_Gain3 < (int16_T)rtb_DataTypeConversion)) {
 3029              		.loc 1 2208 0
 3030 0c62 8C46     		mov	ip, r1
 3031              	.L217:
 3032              	.LVL413:
2210:Src/BLDC_controller.c ****       rtb_Switch2_l = (int16_T)rtb_DataTypeConversion;
2211:Src/BLDC_controller.c ****     }
2212:Src/BLDC_controller.c **** 
2213:Src/BLDC_controller.c ****     if (!(rtb_Switch2_l < (int16_T)rtb_Switch1)) {
 3033              		.loc 1 2213 0
 3034 0c64 12B2     		sxth	r2, r2
 3035              	.LVL414:
 3036 0c66 9445     		cmp	ip, r2
 3037 0c68 00DB     		blt	.L218
2214:Src/BLDC_controller.c ****       rtb_Switch2_l = (int16_T)rtb_Switch1;
 3038              		.loc 1 2214 0
 3039 0c6a 9446     		mov	ip, r2
 3040              	.LVL415:
 3041              	.L218:
2215:Src/BLDC_controller.c ****     }
2216:Src/BLDC_controller.c **** 
2217:Src/BLDC_controller.c ****     /* MinMax: '<S43>/MinMax2' incorporates:
2218:Src/BLDC_controller.c ****      *  Sum: '<S43>/Sum2'
2219:Src/BLDC_controller.c ****      *  Sum: '<S43>/Sum6'
2220:Src/BLDC_controller.c ****      *  Sum: '<S44>/Sum6'
2221:Src/BLDC_controller.c ****      */
2222:Src/BLDC_controller.c ****     rtb_Merge = (int16_T)rtb_Gain3;
2223:Src/BLDC_controller.c ****     if (!((int16_T)rtb_Gain3 > (int16_T)rtb_DataTypeConversion)) {
 3042              		.loc 1 2223 0
 3043 0c6c 9942     		cmp	r1, r3
 3044 0c6e 00DD     		ble	.L219
2222:Src/BLDC_controller.c ****     if (!((int16_T)rtb_Gain3 > (int16_T)rtb_DataTypeConversion)) {
 3045              		.loc 1 2222 0
 3046 0c70 0B46     		mov	r3, r1
 3047              	.L219:
 3048              	.LVL416:
2224:Src/BLDC_controller.c ****       rtb_Merge = (int16_T)rtb_DataTypeConversion;
2225:Src/BLDC_controller.c ****     }
2226:Src/BLDC_controller.c **** 
2227:Src/BLDC_controller.c ****     if (!(rtb_Merge > (int16_T)rtb_Switch1)) {
 3049              		.loc 1 2227 0
 3050 0c72 9342     		cmp	r3, r2
 3051 0c74 00DC     		bgt	.L220
2228:Src/BLDC_controller.c ****       rtb_Merge = (int16_T)rtb_Switch1;
 3052              		.loc 1 2228 0
 3053 0c76 1346     		mov	r3, r2
 3054              	.LVL417:
 3055              	.L220:
2229:Src/BLDC_controller.c ****     }
2230:Src/BLDC_controller.c **** 
2231:Src/BLDC_controller.c ****     /* Sum: '<S43>/Add' incorporates:
2232:Src/BLDC_controller.c ****      *  MinMax: '<S43>/MinMax1'
ARM GAS  /tmp/ccoxnsnM.s 			page 98


2233:Src/BLDC_controller.c ****      *  MinMax: '<S43>/MinMax2'
2234:Src/BLDC_controller.c ****      */
2235:Src/BLDC_controller.c ****     rtb_Sum1 = rtb_Switch2_l + rtb_Merge;
 3056              		.loc 1 2235 0
 3057 0c78 6344     		add	r3, r3, ip
 3058              	.LVL418:
2236:Src/BLDC_controller.c ****     if (rtb_Sum1 > 32767) {
 3059              		.loc 1 2236 0
 3060 0c7a B3F5004F 		cmp	r3, #32768
 3061 0c7e 06DA     		bge	.L301
2237:Src/BLDC_controller.c ****       rtb_Sum1 = 32767;
2238:Src/BLDC_controller.c ****     } else {
2239:Src/BLDC_controller.c ****       if (rtb_Sum1 < -32768) {
 3062              		.loc 1 2239 0
 3063 0c80 13F5004F 		cmn	r3, #32768
 3064 0c84 05DA     		bge	.L221
2240:Src/BLDC_controller.c ****         rtb_Sum1 = -32768;
 3065              		.loc 1 2240 0
 3066 0c86 554B     		ldr	r3, .L347
 3067              	.LVL419:
 3068 0c88 03E0     		b	.L221
 3069              	.LVL420:
 3070              	.L298:
2210:Src/BLDC_controller.c ****     }
 3071              		.loc 1 2210 0
 3072 0c8a 9C46     		mov	ip, r3
 3073 0c8c EAE7     		b	.L217
 3074              	.LVL421:
 3075              	.L301:
2237:Src/BLDC_controller.c ****       rtb_Sum1 = 32767;
 3076              		.loc 1 2237 0
 3077 0c8e 47F6FF73 		movw	r3, #32767
 3078              	.LVL422:
 3079              	.L221:
2241:Src/BLDC_controller.c ****       }
2242:Src/BLDC_controller.c ****     }
2243:Src/BLDC_controller.c **** 
2244:Src/BLDC_controller.c ****     /* Gain: '<S43>/Gain2' incorporates:
2245:Src/BLDC_controller.c ****      *  Sum: '<S43>/Add'
2246:Src/BLDC_controller.c ****      */
2247:Src/BLDC_controller.c ****     rtb_DataTypeConversion2 = (int16_T)(rtb_Sum1 >> 1);
 3080              		.loc 1 2247 0
 3081 0c92 43F34F03 		sbfx	r3, r3, #1, #16
 3082              	.LVL423:
2248:Src/BLDC_controller.c **** 
2249:Src/BLDC_controller.c ****     /* Sum: '<S43>/Add1' incorporates:
2250:Src/BLDC_controller.c ****      *  Sum: '<S44>/Sum6'
2251:Src/BLDC_controller.c ****      */
2252:Src/BLDC_controller.c ****     rtb_Gain3 = (int16_T)rtb_Gain3 - rtb_DataTypeConversion2;
 3083              		.loc 1 2252 0
 3084 0c96 C91A     		subs	r1, r1, r3
 3085              	.LVL424:
2253:Src/BLDC_controller.c ****     if (rtb_Gain3 > 32767) {
 3086              		.loc 1 2253 0
 3087 0c98 B1F5004F 		cmp	r1, #32768
 3088 0c9c 04DA     		bge	.L303
2254:Src/BLDC_controller.c ****       rtb_Gain3 = 32767;
ARM GAS  /tmp/ccoxnsnM.s 			page 99


2255:Src/BLDC_controller.c ****     } else {
2256:Src/BLDC_controller.c ****       if (rtb_Gain3 < -32768) {
 3089              		.loc 1 2256 0
 3090 0c9e 11F5004F 		cmn	r1, #32768
 3091 0ca2 03DA     		bge	.L222
2257:Src/BLDC_controller.c ****         rtb_Gain3 = -32768;
 3092              		.loc 1 2257 0
 3093 0ca4 4D49     		ldr	r1, .L347
 3094              	.LVL425:
 3095 0ca6 01E0     		b	.L222
 3096              	.LVL426:
 3097              	.L303:
2254:Src/BLDC_controller.c ****       rtb_Gain3 = 32767;
 3098              		.loc 1 2254 0
 3099 0ca8 47F6FF71 		movw	r1, #32767
 3100              	.LVL427:
 3101              	.L222:
2258:Src/BLDC_controller.c ****       }
2259:Src/BLDC_controller.c ****     }
2260:Src/BLDC_controller.c **** 
2261:Src/BLDC_controller.c ****     /* Gain: '<S43>/Gain4' incorporates:
2262:Src/BLDC_controller.c ****      *  Sum: '<S43>/Add1'
2263:Src/BLDC_controller.c ****      */
2264:Src/BLDC_controller.c ****     rtDW->Gain4[0] = (int16_T)((18919 * rtb_Gain3) >> 14);
 3102              		.loc 1 2264 0
 3103 0cac 44F6E71C 		movw	ip, #18919
 3104              	.LVL428:
 3105 0cb0 0CFB01F1 		mul	r1, ip, r1
 3106              	.LVL429:
 3107 0cb4 41F38F31 		sbfx	r1, r1, #14, #16
 3108 0cb8 A4F85010 		strh	r1, [r4, #80]	@ movhi
2265:Src/BLDC_controller.c **** 
2266:Src/BLDC_controller.c ****     /* Sum: '<S43>/Add1' incorporates:
2267:Src/BLDC_controller.c ****      *  Sum: '<S43>/Sum6'
2268:Src/BLDC_controller.c ****      */
2269:Src/BLDC_controller.c ****     rtb_Gain3 = (int16_T)rtb_DataTypeConversion - rtb_DataTypeConversion2;
 3109              		.loc 1 2269 0
 3110 0cbc AEEB0301 		sub	r1, lr, r3
 3111              	.LVL430:
2270:Src/BLDC_controller.c ****     if (rtb_Gain3 > 32767) {
 3112              		.loc 1 2270 0
 3113 0cc0 B1F5004F 		cmp	r1, #32768
 3114 0cc4 04DA     		bge	.L305
2271:Src/BLDC_controller.c ****       rtb_Gain3 = 32767;
2272:Src/BLDC_controller.c ****     } else {
2273:Src/BLDC_controller.c ****       if (rtb_Gain3 < -32768) {
 3115              		.loc 1 2273 0
 3116 0cc6 11F5004F 		cmn	r1, #32768
 3117 0cca 03DA     		bge	.L223
2274:Src/BLDC_controller.c ****         rtb_Gain3 = -32768;
 3118              		.loc 1 2274 0
 3119 0ccc 4349     		ldr	r1, .L347
 3120              	.LVL431:
 3121 0cce 01E0     		b	.L223
 3122              	.LVL432:
 3123              	.L305:
2271:Src/BLDC_controller.c ****       rtb_Gain3 = 32767;
ARM GAS  /tmp/ccoxnsnM.s 			page 100


 3124              		.loc 1 2271 0
 3125 0cd0 47F6FF71 		movw	r1, #32767
 3126              	.LVL433:
 3127              	.L223:
2275:Src/BLDC_controller.c ****       }
2276:Src/BLDC_controller.c ****     }
2277:Src/BLDC_controller.c **** 
2278:Src/BLDC_controller.c ****     /* Gain: '<S43>/Gain4' incorporates:
2279:Src/BLDC_controller.c ****      *  Sum: '<S43>/Add1'
2280:Src/BLDC_controller.c ****      */
2281:Src/BLDC_controller.c ****     rtDW->Gain4[1] = (int16_T)((18919 * rtb_Gain3) >> 14);
 3128              		.loc 1 2281 0
 3129 0cd4 44F6E71E 		movw	lr, #18919
 3130 0cd8 0EFB01FE 		mul	lr, lr, r1
 3131 0cdc 4EF38F3E 		sbfx	lr, lr, #14, #16
 3132 0ce0 A4F852E0 		strh	lr, [r4, #82]	@ movhi
2282:Src/BLDC_controller.c **** 
2283:Src/BLDC_controller.c ****     /* Sum: '<S43>/Add1' incorporates:
2284:Src/BLDC_controller.c ****      *  Sum: '<S43>/Sum2'
2285:Src/BLDC_controller.c ****      */
2286:Src/BLDC_controller.c ****     rtb_Gain3 = (int16_T)rtb_Switch1 - rtb_DataTypeConversion2;
 3133              		.loc 1 2286 0
 3134 0ce4 D21A     		subs	r2, r2, r3
 3135              	.LVL434:
2287:Src/BLDC_controller.c ****     if (rtb_Gain3 > 32767) {
 3136              		.loc 1 2287 0
 3137 0ce6 B2F5004F 		cmp	r2, #32768
 3138 0cea 04DA     		bge	.L307
2288:Src/BLDC_controller.c ****       rtb_Gain3 = 32767;
2289:Src/BLDC_controller.c ****     } else {
2290:Src/BLDC_controller.c ****       if (rtb_Gain3 < -32768) {
 3139              		.loc 1 2290 0
 3140 0cec 12F5004F 		cmn	r2, #32768
 3141 0cf0 03DA     		bge	.L224
2291:Src/BLDC_controller.c ****         rtb_Gain3 = -32768;
 3142              		.loc 1 2291 0
 3143 0cf2 3A4A     		ldr	r2, .L347
 3144              	.LVL435:
 3145 0cf4 01E0     		b	.L224
 3146              	.LVL436:
 3147              	.L307:
2288:Src/BLDC_controller.c ****       rtb_Gain3 = 32767;
 3148              		.loc 1 2288 0
 3149 0cf6 47F6FF72 		movw	r2, #32767
 3150              	.LVL437:
 3151              	.L224:
2292:Src/BLDC_controller.c ****       }
2293:Src/BLDC_controller.c ****     }
2294:Src/BLDC_controller.c **** 
2295:Src/BLDC_controller.c ****     /* Gain: '<S43>/Gain4' incorporates:
2296:Src/BLDC_controller.c ****      *  Sum: '<S43>/Add1'
2297:Src/BLDC_controller.c ****      */
2298:Src/BLDC_controller.c ****     rtDW->Gain4[2] = (int16_T)((18919 * rtb_Gain3) >> 14);
 3152              		.loc 1 2298 0
 3153 0cfa 44F6E71C 		movw	ip, #18919
 3154 0cfe 0CFB02F2 		mul	r2, ip, r2
 3155              	.LVL438:
ARM GAS  /tmp/ccoxnsnM.s 			page 101


 3156 0d02 42F38F32 		sbfx	r2, r2, #14, #16
 3157 0d06 A4F85420 		strh	r2, [r4, #84]	@ movhi
2299:Src/BLDC_controller.c **** 
2300:Src/BLDC_controller.c ****     /* Update for UnitDelay: '<S6>/UnitDelay4' */
2301:Src/BLDC_controller.c ****     rtDW->UnitDelay4_DSTATE_h = rtDW->Switch1;
 3158              		.loc 1 2301 0
 3159 0d0a A4F88A00 		strh	r0, [r4, #138]	@ movhi
 3160              	.LVL439:
 3161              	.L166:
2302:Src/BLDC_controller.c **** 
2303:Src/BLDC_controller.c ****     /* End of Outputs for SubSystem: '<S1>/F05_Field_Oriented_Control' */
2304:Src/BLDC_controller.c ****   }
2305:Src/BLDC_controller.c **** 
2306:Src/BLDC_controller.c ****   /* End of If: '<S1>/If1' */
2307:Src/BLDC_controller.c **** 
2308:Src/BLDC_controller.c ****   /* Switch: '<S7>/Switch2' incorporates:
2309:Src/BLDC_controller.c ****    *  Constant: '<S1>/z_ctrlTypSel1'
2310:Src/BLDC_controller.c ****    *  Constant: '<S7>/CTRL_COMM1'
2311:Src/BLDC_controller.c ****    *  RelationalOperator: '<S7>/Relational Operator6'
2312:Src/BLDC_controller.c ****    */
2313:Src/BLDC_controller.c ****   if (rtP->z_ctrlTypSel == 2) {
 3162              		.loc 1 2313 0
 3163 0d0e 95F8F630 		ldrb	r3, [r5, #246]	@ zero_extendqisi2
 3164 0d12 022B     		cmp	r3, #2
 3165 0d14 13D0     		beq	.L338
2314:Src/BLDC_controller.c ****     rtb_Merge = rtDW->Merge;
2315:Src/BLDC_controller.c ****   } else {
2316:Src/BLDC_controller.c ****     rtb_Merge = rtDW->Merge1;
 3166              		.loc 1 2316 0
 3167 0d16 B4F95C90 		ldrsh	r9, [r4, #92]
 3168              	.LVL440:
 3169              	.L226:
2317:Src/BLDC_controller.c ****   }
2318:Src/BLDC_controller.c **** 
2319:Src/BLDC_controller.c ****   /* End of Switch: '<S7>/Switch2' */
2320:Src/BLDC_controller.c **** 
2321:Src/BLDC_controller.c ****   /* If: '<S7>/If' incorporates:
2322:Src/BLDC_controller.c ****    *  Constant: '<S10>/vec_hallToPos'
2323:Src/BLDC_controller.c ****    *  Constant: '<S1>/z_ctrlTypSel1'
2324:Src/BLDC_controller.c ****    *  Constant: '<S7>/CTRL_COMM2'
2325:Src/BLDC_controller.c ****    *  Constant: '<S7>/CTRL_COMM3'
2326:Src/BLDC_controller.c ****    *  Inport: '<S85>/V_phaABC_FOC_in'
2327:Src/BLDC_controller.c ****    *  Logic: '<S7>/Logical Operator1'
2328:Src/BLDC_controller.c ****    *  Logic: '<S7>/Logical Operator2'
2329:Src/BLDC_controller.c ****    *  LookupNDDirect: '<S84>/z_commutMap_M1'
2330:Src/BLDC_controller.c ****    *  RelationalOperator: '<S7>/Relational Operator1'
2331:Src/BLDC_controller.c ****    *  RelationalOperator: '<S7>/Relational Operator2'
2332:Src/BLDC_controller.c ****    *  Selector: '<S10>/Selector'
2333:Src/BLDC_controller.c ****    *
2334:Src/BLDC_controller.c ****    * About '<S84>/z_commutMap_M1':
2335:Src/BLDC_controller.c ****    *  2-dimensional Direct Look-Up returning a Column
2336:Src/BLDC_controller.c ****    */
2337:Src/BLDC_controller.c ****   if (rtb_LogicalOperator && (rtP->z_ctrlTypSel == 2)) {
 3170              		.loc 1 2337 0
 3171 0d1a 079A     		ldr	r2, [sp, #28]
 3172 0d1c 0AB1     		cbz	r2, .L227
 3173              		.loc 1 2337 0 is_stmt 0 discriminator 1
ARM GAS  /tmp/ccoxnsnM.s 			page 102


 3174 0d1e 022B     		cmp	r3, #2
 3175 0d20 10D0     		beq	.L339
 3176              	.L227:
2338:Src/BLDC_controller.c ****     /* Outputs for IfAction SubSystem: '<S7>/FOC_Method' incorporates:
2339:Src/BLDC_controller.c ****      *  ActionPort: '<S85>/Action Port'
2340:Src/BLDC_controller.c ****      */
2341:Src/BLDC_controller.c ****     rtb_DataTypeConversion2 = rtDW->Gain4[0];
2342:Src/BLDC_controller.c ****     rtb_Merge_f_idx_1 = rtDW->Gain4[1];
2343:Src/BLDC_controller.c ****     rtb_Saturation1 = rtDW->Gain4[2];
2344:Src/BLDC_controller.c **** 
2345:Src/BLDC_controller.c ****     /* End of Outputs for SubSystem: '<S7>/FOC_Method' */
2346:Src/BLDC_controller.c ****   } else if (rtb_LogicalOperator && (rtP->z_ctrlTypSel == 1)) {
 3177              		.loc 1 2346 0 is_stmt 1
 3178 0d22 079A     		ldr	r2, [sp, #28]
 3179 0d24 0AB1     		cbz	r2, .L229
 3180              		.loc 1 2346 0 is_stmt 0 discriminator 1
 3181 0d26 012B     		cmp	r3, #1
 3182 0d28 13D0     		beq	.L340
 3183              	.L229:
2347:Src/BLDC_controller.c ****     /* Outputs for IfAction SubSystem: '<S7>/SIN_Method' incorporates:
2348:Src/BLDC_controller.c ****      *  ActionPort: '<S86>/Action Port'
2349:Src/BLDC_controller.c ****      */
2350:Src/BLDC_controller.c ****     /* Switch: '<S87>/Switch_PhaAdv' incorporates:
2351:Src/BLDC_controller.c ****      *  Constant: '<S87>/b_fieldWeakEna'
2352:Src/BLDC_controller.c ****      *  Product: '<S88>/Divide2'
2353:Src/BLDC_controller.c ****      *  Product: '<S88>/Divide3'
2354:Src/BLDC_controller.c ****      *  Sum: '<S88>/Sum3'
2355:Src/BLDC_controller.c ****      */
2356:Src/BLDC_controller.c ****     if (rtP->b_fieldWeakEna) {
2357:Src/BLDC_controller.c ****       /* Sum: '<S87>/Sum3' incorporates:
2358:Src/BLDC_controller.c ****        *  Product: '<S87>/Product2'
2359:Src/BLDC_controller.c ****        */
2360:Src/BLDC_controller.c ****       rtb_Saturation1 = (int16_T)((int16_T)((int16_T)(rtDW->Divide3 *
2361:Src/BLDC_controller.c ****         rtDW->Switch2_e) << 2) + rtb_Switch2_fl);
2362:Src/BLDC_controller.c ****       rtb_Saturation1 -= (int16_T)(23040 * (int16_T)div_nde_s32_floor
2363:Src/BLDC_controller.c ****         (rtb_Saturation1, 23040));
2364:Src/BLDC_controller.c ****     } else {
2365:Src/BLDC_controller.c ****       rtb_Saturation1 = rtb_Switch2_fl;
2366:Src/BLDC_controller.c ****     }
2367:Src/BLDC_controller.c **** 
2368:Src/BLDC_controller.c ****     /* End of Switch: '<S87>/Switch_PhaAdv' */
2369:Src/BLDC_controller.c **** 
2370:Src/BLDC_controller.c ****     /* PreLookup: '<S86>/a_elecAngle_XA' */
2371:Src/BLDC_controller.c ****     rtb_Sum = plook_u8s16_evencka(rtb_Saturation1, 0, 128U, 180U);
2372:Src/BLDC_controller.c **** 
2373:Src/BLDC_controller.c ****     /* Product: '<S86>/Divide2' incorporates:
2374:Src/BLDC_controller.c ****      *  Interpolation_n-D: '<S86>/r_sin3PhaA_M1'
2375:Src/BLDC_controller.c ****      *  Interpolation_n-D: '<S86>/r_sin3PhaB_M1'
2376:Src/BLDC_controller.c ****      *  Interpolation_n-D: '<S86>/r_sin3PhaC_M1'
2377:Src/BLDC_controller.c ****      */
2378:Src/BLDC_controller.c ****     rtb_DataTypeConversion2 = (int16_T)((rtDW->Merge1 *
2379:Src/BLDC_controller.c ****       rtConstP.r_sin3PhaA_M1_Table[rtb_Sum]) >> 14);
2380:Src/BLDC_controller.c ****     rtb_Merge_f_idx_1 = (int16_T)((rtDW->Merge1 *
2381:Src/BLDC_controller.c ****       rtConstP.r_sin3PhaB_M1_Table[rtb_Sum]) >> 14);
2382:Src/BLDC_controller.c ****     rtb_Saturation1 = (int16_T)((rtDW->Merge1 *
2383:Src/BLDC_controller.c ****       rtConstP.r_sin3PhaC_M1_Table[rtb_Sum]) >> 14);
2384:Src/BLDC_controller.c **** 
ARM GAS  /tmp/ccoxnsnM.s 			page 103


2385:Src/BLDC_controller.c ****     /* End of Outputs for SubSystem: '<S7>/SIN_Method' */
2386:Src/BLDC_controller.c ****   } else {
2387:Src/BLDC_controller.c ****     /* Outputs for IfAction SubSystem: '<S7>/COM_Method' incorporates:
2388:Src/BLDC_controller.c ****      *  ActionPort: '<S84>/Action Port'
2389:Src/BLDC_controller.c ****      */
2390:Src/BLDC_controller.c ****     if (rtConstP.vec_hallToPos_Value[rtb_Sum] > 5) {
 3184              		.loc 1 2390 0 is_stmt 1
 3185 0d2a 2D4B     		ldr	r3, .L347+4
 3186 0d2c 1E44     		add	r6, r6, r3
 3187              	.LVL441:
 3188 0d2e 96F98807 		ldrsb	r0, [r6, #1928]
 3189 0d32 0528     		cmp	r0, #5
 3190 0d34 56DC     		bgt	.L310
2391:Src/BLDC_controller.c ****       /* LookupNDDirect: '<S84>/z_commutMap_M1'
2392:Src/BLDC_controller.c ****        *
2393:Src/BLDC_controller.c ****        * About '<S84>/z_commutMap_M1':
2394:Src/BLDC_controller.c ****        *  2-dimensional Direct Look-Up returning a Column
2395:Src/BLDC_controller.c ****        */
2396:Src/BLDC_controller.c ****       rtb_Sum2_h = 5;
2397:Src/BLDC_controller.c ****     } else if (rtConstP.vec_hallToPos_Value[rtb_Sum] < 0) {
 3191              		.loc 1 2397 0
 3192 0d36 0028     		cmp	r0, #0
 3193 0d38 55DA     		bge	.L231
2398:Src/BLDC_controller.c ****       /* LookupNDDirect: '<S84>/z_commutMap_M1'
2399:Src/BLDC_controller.c ****        *
2400:Src/BLDC_controller.c ****        * About '<S84>/z_commutMap_M1':
2401:Src/BLDC_controller.c ****        *  2-dimensional Direct Look-Up returning a Column
2402:Src/BLDC_controller.c ****        */
2403:Src/BLDC_controller.c ****       rtb_Sum2_h = 0;
 3194              		.loc 1 2403 0
 3195 0d3a 0020     		movs	r0, #0
 3196 0d3c 53E0     		b	.L231
 3197              	.LVL442:
 3198              	.L338:
2314:Src/BLDC_controller.c ****   } else {
 3199              		.loc 1 2314 0
 3200 0d3e B4F97690 		ldrsh	r9, [r4, #118]
 3201              	.LVL443:
 3202 0d42 EAE7     		b	.L226
 3203              	.L339:
2341:Src/BLDC_controller.c ****     rtb_Merge_f_idx_1 = rtDW->Gain4[1];
 3204              		.loc 1 2341 0
 3205 0d44 B4F95010 		ldrsh	r1, [r4, #80]
 3206              	.LVL444:
2342:Src/BLDC_controller.c ****     rtb_Saturation1 = rtDW->Gain4[2];
 3207              		.loc 1 2342 0
 3208 0d48 B4F95220 		ldrsh	r2, [r4, #82]
 3209              	.LVL445:
2343:Src/BLDC_controller.c **** 
 3210              		.loc 1 2343 0
 3211 0d4c B4F95430 		ldrsh	r3, [r4, #84]
 3212              	.LVL446:
 3213 0d50 65E0     		b	.L228
 3214              	.LVL447:
 3215              	.L340:
2356:Src/BLDC_controller.c ****       /* Sum: '<S87>/Sum3' incorporates:
 3216              		.loc 1 2356 0
ARM GAS  /tmp/ccoxnsnM.s 			page 104


 3217 0d52 95F8F830 		ldrb	r3, [r5, #248]	@ zero_extendqisi2
 3218 0d56 002B     		cmp	r3, #0
 3219 0d58 3DD0     		beq	.L309
2360:Src/BLDC_controller.c ****         rtDW->Switch2_e) << 2) + rtb_Switch2_fl);
 3220              		.loc 1 2360 0
 3221 0d5a B4F85E30 		ldrh	r3, [r4, #94]
2361:Src/BLDC_controller.c ****       rtb_Saturation1 -= (int16_T)(23040 * (int16_T)div_nde_s32_floor
 3222              		.loc 1 2361 0
 3223 0d5e 94F98C50 		ldrsb	r5, [r4, #140]
 3224              	.LVL448:
 3225 0d62 ADB2     		uxth	r5, r5
2360:Src/BLDC_controller.c ****         rtDW->Switch2_e) << 2) + rtb_Switch2_fl);
 3226              		.loc 1 2360 0
 3227 0d64 05FB03F5 		mul	r5, r5, r3
 3228 0d68 2DB2     		sxth	r5, r5
2361:Src/BLDC_controller.c ****       rtb_Saturation1 -= (int16_T)(23040 * (int16_T)div_nde_s32_floor
 3229              		.loc 1 2361 0
 3230 0d6a AD00     		lsls	r5, r5, #2
2360:Src/BLDC_controller.c ****         rtDW->Switch2_e) << 2) + rtb_Switch2_fl);
 3231              		.loc 1 2360 0
 3232 0d6c ADB2     		uxth	r5, r5
2361:Src/BLDC_controller.c ****       rtb_Saturation1 -= (int16_T)(23040 * (int16_T)div_nde_s32_floor
 3233              		.loc 1 2361 0
 3234 0d6e 0D9B     		ldr	r3, [sp, #52]
 3235 0d70 1D44     		add	r5, r5, r3
 3236 0d72 ADB2     		uxth	r5, r5
 3237              	.LVL449:
2362:Src/BLDC_controller.c ****         (rtb_Saturation1, 23040));
 3238              		.loc 1 2362 0
 3239 0d74 4FF4B441 		mov	r1, #23040
 3240 0d78 28B2     		sxth	r0, r5
 3241 0d7a FFF7FEFF 		bl	div_nde_s32_floor
 3242              	.LVL450:
 3243 0d7e 80B2     		uxth	r0, r0
 3244 0d80 00EB4000 		add	r0, r0, r0, lsl #1
 3245 0d84 C0EB0010 		rsb	r0, r0, r0, lsl #4
 3246 0d88 4302     		lsls	r3, r0, #9
 3247 0d8a 98B2     		uxth	r0, r3
 3248 0d8c 281A     		subs	r0, r5, r0
 3249 0d8e 00B2     		sxth	r0, r0
 3250              	.LVL451:
 3251              	.L230:
2371:Src/BLDC_controller.c **** 
 3252              		.loc 1 2371 0
 3253 0d90 B423     		movs	r3, #180
 3254 0d92 8022     		movs	r2, #128
 3255 0d94 0021     		movs	r1, #0
 3256 0d96 FFF7FEFF 		bl	plook_u8s16_evencka
 3257              	.LVL452:
2378:Src/BLDC_controller.c ****       rtConstP.r_sin3PhaA_M1_Table[rtb_Sum]) >> 14);
 3258              		.loc 1 2378 0
 3259 0d9a B4F95C30 		ldrsh	r3, [r4, #92]
2379:Src/BLDC_controller.c ****     rtb_Merge_f_idx_1 = (int16_T)((rtDW->Merge1 *
 3260              		.loc 1 2379 0
 3261 0d9e 104D     		ldr	r5, .L347+4
 3262 0da0 35F91010 		ldrsh	r1, [r5, r0, lsl #1]
2378:Src/BLDC_controller.c ****       rtConstP.r_sin3PhaA_M1_Table[rtb_Sum]) >> 14);
ARM GAS  /tmp/ccoxnsnM.s 			page 105


 3263              		.loc 1 2378 0
 3264 0da4 01FB03F1 		mul	r1, r1, r3
 3265 0da8 41F38F31 		sbfx	r1, r1, #14, #16
 3266              	.LVL453:
2381:Src/BLDC_controller.c ****     rtb_Saturation1 = (int16_T)((rtDW->Merge1 *
 3267              		.loc 1 2381 0
 3268 0dac 00F1B402 		add	r2, r0, #180
 3269 0db0 05EB4202 		add	r2, r5, r2, lsl #1
 3270 0db4 B2F90220 		ldrsh	r2, [r2, #2]
2380:Src/BLDC_controller.c ****       rtConstP.r_sin3PhaB_M1_Table[rtb_Sum]) >> 14);
 3271              		.loc 1 2380 0
 3272 0db8 02FB03F2 		mul	r2, r2, r3
 3273 0dbc 42F38F32 		sbfx	r2, r2, #14, #16
 3274              	.LVL454:
2383:Src/BLDC_controller.c **** 
 3275              		.loc 1 2383 0
 3276 0dc0 00F5B470 		add	r0, r0, #360
 3277              	.LVL455:
 3278 0dc4 05EB4000 		add	r0, r5, r0, lsl #1
 3279 0dc8 B0F90400 		ldrsh	r0, [r0, #4]
2382:Src/BLDC_controller.c ****       rtConstP.r_sin3PhaC_M1_Table[rtb_Sum]) >> 14);
 3280              		.loc 1 2382 0
 3281 0dcc 00FB03F3 		mul	r3, r0, r3
 3282 0dd0 43F38F33 		sbfx	r3, r3, #14, #16
 3283              	.LVL456:
 3284 0dd4 23E0     		b	.L228
 3285              	.LVL457:
 3286              	.L309:
2365:Src/BLDC_controller.c ****     }
 3287              		.loc 1 2365 0
 3288 0dd6 0898     		ldr	r0, [sp, #32]
 3289 0dd8 DAE7     		b	.L230
 3290              	.L348:
 3291 0dda 00BF     		.align	2
 3292              	.L347:
 3293 0ddc 0080FFFF 		.word	-32768
 3294 0de0 00000000 		.word	rtConstP
 3295              	.LVL458:
 3296              	.L310:
2396:Src/BLDC_controller.c ****     } else if (rtConstP.vec_hallToPos_Value[rtb_Sum] < 0) {
 3297              		.loc 1 2396 0
 3298 0de4 0520     		movs	r0, #5
 3299              	.L231:
 3300              	.LVL459:
2404:Src/BLDC_controller.c ****     } else {
2405:Src/BLDC_controller.c ****       /* LookupNDDirect: '<S84>/z_commutMap_M1' incorporates:
2406:Src/BLDC_controller.c ****        *  Constant: '<S10>/vec_hallToPos'
2407:Src/BLDC_controller.c ****        *  Selector: '<S10>/Selector'
2408:Src/BLDC_controller.c ****        *
2409:Src/BLDC_controller.c ****        * About '<S84>/z_commutMap_M1':
2410:Src/BLDC_controller.c ****        *  2-dimensional Direct Look-Up returning a Column
2411:Src/BLDC_controller.c ****        */
2412:Src/BLDC_controller.c ****       rtb_Sum2_h = rtConstP.vec_hallToPos_Value[rtb_Sum];
2413:Src/BLDC_controller.c ****     }
2414:Src/BLDC_controller.c **** 
2415:Src/BLDC_controller.c ****     /* LookupNDDirect: '<S84>/z_commutMap_M1' incorporates:
2416:Src/BLDC_controller.c ****      *  Constant: '<S10>/vec_hallToPos'
ARM GAS  /tmp/ccoxnsnM.s 			page 106


2417:Src/BLDC_controller.c ****      *  Selector: '<S10>/Selector'
2418:Src/BLDC_controller.c ****      *
2419:Src/BLDC_controller.c ****      * About '<S84>/z_commutMap_M1':
2420:Src/BLDC_controller.c ****      *  2-dimensional Direct Look-Up returning a Column
2421:Src/BLDC_controller.c ****      */
2422:Src/BLDC_controller.c ****     rtb_DataTypeConversion = rtb_Sum2_h * 3;
 3301              		.loc 1 2422 0
 3302 0de6 00EB4000 		add	r0, r0, r0, lsl #1
 3303              	.LVL460:
2423:Src/BLDC_controller.c **** 
2424:Src/BLDC_controller.c ****     /* Product: '<S84>/Divide2' incorporates:
2425:Src/BLDC_controller.c ****      *  LookupNDDirect: '<S84>/z_commutMap_M1'
2426:Src/BLDC_controller.c ****      *
2427:Src/BLDC_controller.c ****      * About '<S84>/z_commutMap_M1':
2428:Src/BLDC_controller.c ****      *  2-dimensional Direct Look-Up returning a Column
2429:Src/BLDC_controller.c ****      */
2430:Src/BLDC_controller.c ****     rtb_DataTypeConversion2 = (int16_T)(rtb_Merge *
2431:Src/BLDC_controller.c ****       rtConstP.z_commutMap_M1_table[rtb_DataTypeConversion]);
 3304              		.loc 1 2431 0
 3305 0dea 2B4B     		ldr	r3, .L349
 3306 0dec 1A18     		adds	r2, r3, r0
 3307 0dee 92F97617 		ldrsb	r1, [r2, #1910]
 3308 0df2 89B2     		uxth	r1, r1
2430:Src/BLDC_controller.c ****       rtConstP.z_commutMap_M1_table[rtb_DataTypeConversion]);
 3309              		.loc 1 2430 0
 3310 0df4 1FFA89F5 		uxth	r5, r9
 3311              	.LVL461:
 3312 0df8 05FB01F1 		mul	r1, r5, r1
 3313 0dfc 09B2     		sxth	r1, r1
 3314              	.LVL462:
2432:Src/BLDC_controller.c ****     rtb_Merge_f_idx_1 = (int16_T)(rtConstP.z_commutMap_M1_table[1 +
 3315              		.loc 1 2432 0
 3316 0dfe 421C     		adds	r2, r0, #1
 3317 0e00 1A44     		add	r2, r2, r3
 3318 0e02 92F97627 		ldrsb	r2, [r2, #1910]
 3319 0e06 92B2     		uxth	r2, r2
2433:Src/BLDC_controller.c ****       rtb_DataTypeConversion] * rtb_Merge);
 3320              		.loc 1 2433 0
 3321 0e08 02FB05F2 		mul	r2, r2, r5
2432:Src/BLDC_controller.c ****     rtb_Merge_f_idx_1 = (int16_T)(rtConstP.z_commutMap_M1_table[1 +
 3322              		.loc 1 2432 0
 3323 0e0c 12B2     		sxth	r2, r2
 3324              	.LVL463:
2434:Src/BLDC_controller.c ****     rtb_Saturation1 = (int16_T)(rtConstP.z_commutMap_M1_table[2 +
 3325              		.loc 1 2434 0
 3326 0e0e 0230     		adds	r0, r0, #2
 3327              	.LVL464:
 3328 0e10 1844     		add	r0, r0, r3
 3329              	.LVL465:
 3330 0e12 90F97637 		ldrsb	r3, [r0, #1910]
 3331 0e16 9BB2     		uxth	r3, r3
2435:Src/BLDC_controller.c ****       rtb_DataTypeConversion] * rtb_Merge);
 3332              		.loc 1 2435 0
 3333 0e18 03FB05F3 		mul	r3, r3, r5
2434:Src/BLDC_controller.c ****     rtb_Saturation1 = (int16_T)(rtConstP.z_commutMap_M1_table[2 +
 3334              		.loc 1 2434 0
 3335 0e1c 1BB2     		sxth	r3, r3
ARM GAS  /tmp/ccoxnsnM.s 			page 107


 3336              	.LVL466:
 3337              	.L228:
2436:Src/BLDC_controller.c **** 
2437:Src/BLDC_controller.c ****     /* End of Outputs for SubSystem: '<S7>/COM_Method' */
2438:Src/BLDC_controller.c ****   }
2439:Src/BLDC_controller.c **** 
2440:Src/BLDC_controller.c ****   /* End of If: '<S7>/If' */
2441:Src/BLDC_controller.c **** 
2442:Src/BLDC_controller.c ****   /* Outport: '<Root>/DC_phaA' incorporates:
2443:Src/BLDC_controller.c ****    *  DataTypeConversion: '<S7>/Data Type Conversion6'
2444:Src/BLDC_controller.c ****    */
2445:Src/BLDC_controller.c ****   rtY->DC_phaA = (int16_T)(rtb_DataTypeConversion2 >> 4);
 3338              		.loc 1 2445 0
 3339 0e1e 0911     		asrs	r1, r1, #4
 3340              	.LVL467:
 3341 0e20 A8F80010 		strh	r1, [r8]	@ movhi
2446:Src/BLDC_controller.c **** 
2447:Src/BLDC_controller.c ****   /* Outport: '<Root>/DC_phaB' incorporates:
2448:Src/BLDC_controller.c ****    *  DataTypeConversion: '<S7>/Data Type Conversion6'
2449:Src/BLDC_controller.c ****    */
2450:Src/BLDC_controller.c ****   rtY->DC_phaB = (int16_T)(rtb_Merge_f_idx_1 >> 4);
 3342              		.loc 1 2450 0
 3343 0e24 1211     		asrs	r2, r2, #4
 3344              	.LVL468:
 3345 0e26 A8F80220 		strh	r2, [r8, #2]	@ movhi
2451:Src/BLDC_controller.c **** 
2452:Src/BLDC_controller.c ****   /* Update for UnitDelay: '<S9>/UnitDelay3' incorporates:
2453:Src/BLDC_controller.c ****    *  Inport: '<Root>/b_hallA '
2454:Src/BLDC_controller.c ****    */
2455:Src/BLDC_controller.c ****   rtDW->UnitDelay3_DSTATE_fy = rtU->b_hallA;
 3346              		.loc 1 2455 0
 3347 0e2a 3A79     		ldrb	r2, [r7, #4]	@ zero_extendqisi2
 3348 0e2c 84F89320 		strb	r2, [r4, #147]
2456:Src/BLDC_controller.c **** 
2457:Src/BLDC_controller.c ****   /* Update for UnitDelay: '<S9>/UnitDelay1' incorporates:
2458:Src/BLDC_controller.c ****    *  Inport: '<Root>/b_hallB'
2459:Src/BLDC_controller.c ****    */
2460:Src/BLDC_controller.c ****   rtDW->UnitDelay1_DSTATE = rtU->b_hallB;
 3349              		.loc 1 2460 0
 3350 0e30 7A79     		ldrb	r2, [r7, #5]	@ zero_extendqisi2
 3351 0e32 84F89420 		strb	r2, [r4, #148]
2461:Src/BLDC_controller.c **** 
2462:Src/BLDC_controller.c ****   /* Update for UnitDelay: '<S9>/UnitDelay2' incorporates:
2463:Src/BLDC_controller.c ****    *  Inport: '<Root>/b_hallC'
2464:Src/BLDC_controller.c ****    */
2465:Src/BLDC_controller.c ****   rtDW->UnitDelay2_DSTATE_f = rtU->b_hallC;
 3352              		.loc 1 2465 0
 3353 0e36 BA79     		ldrb	r2, [r7, #6]	@ zero_extendqisi2
 3354 0e38 84F89520 		strb	r2, [r4, #149]
2466:Src/BLDC_controller.c **** 
2467:Src/BLDC_controller.c ****   /* Update for UnitDelay: '<S12>/UnitDelay3' */
2468:Src/BLDC_controller.c ****   rtDW->UnitDelay3_DSTATE = rtb_Switch1_l;
 3355              		.loc 1 2468 0
 3356 0e3c BDF82420 		ldrh	r2, [sp, #36]
 3357 0e40 A4F87C20 		strh	r2, [r4, #124]	@ movhi
2469:Src/BLDC_controller.c **** 
2470:Src/BLDC_controller.c ****   /* Update for UnitDelay: '<S12>/UnitDelay4' */
ARM GAS  /tmp/ccoxnsnM.s 			page 108


2471:Src/BLDC_controller.c ****   rtDW->UnitDelay4_DSTATE_e = rtb_Abs5;
 3358              		.loc 1 2471 0
 3359 0e44 BDF81820 		ldrh	r2, [sp, #24]
 3360 0e48 A4F88620 		strh	r2, [r4, #134]	@ movhi
2472:Src/BLDC_controller.c **** 
2473:Src/BLDC_controller.c ****   /* Update for UnitDelay: '<S8>/UnitDelay2' incorporates:
2474:Src/BLDC_controller.c ****    *  UnitDelay: '<S8>/UnitDelay6'
2475:Src/BLDC_controller.c ****    */
2476:Src/BLDC_controller.c ****   rtDW->UnitDelay2_DSTATE_g = rtDW->UnitDelay6_DSTATE;
 3361              		.loc 1 2476 0
 3362 0e4c 94F89D20 		ldrb	r2, [r4, #157]	@ zero_extendqisi2
 3363 0e50 84F89B20 		strb	r2, [r4, #155]
2477:Src/BLDC_controller.c **** 
2478:Src/BLDC_controller.c ****   /* Update for UnitDelay: '<S7>/UnitDelay4' */
2479:Src/BLDC_controller.c ****   rtDW->UnitDelay4_DSTATE_eu = rtb_Merge;
 3364              		.loc 1 2479 0
 3365 0e54 A4F88890 		strh	r9, [r4, #136]	@ movhi
2480:Src/BLDC_controller.c **** 
2481:Src/BLDC_controller.c ****   /* Update for UnitDelay: '<S8>/UnitDelay5' */
2482:Src/BLDC_controller.c ****   rtDW->UnitDelay5_DSTATE_l = rtb_RelationalOperator4_d;
 3366              		.loc 1 2482 0
 3367 0e58 9DF82C20 		ldrb	r2, [sp, #44]	@ zero_extendqisi2
 3368 0e5c 84F89C20 		strb	r2, [r4, #156]
2483:Src/BLDC_controller.c **** 
2484:Src/BLDC_controller.c ****   /* Update for UnitDelay: '<S8>/UnitDelay6' */
2485:Src/BLDC_controller.c ****   rtDW->UnitDelay6_DSTATE = rtb_RelationalOperator9;
 3369              		.loc 1 2485 0
 3370 0e60 9DF82820 		ldrb	r2, [sp, #40]	@ zero_extendqisi2
 3371 0e64 84F89D20 		strb	r2, [r4, #157]
2486:Src/BLDC_controller.c **** 
2487:Src/BLDC_controller.c ****   /* Outport: '<Root>/DC_phaC' incorporates:
2488:Src/BLDC_controller.c ****    *  DataTypeConversion: '<S7>/Data Type Conversion6'
2489:Src/BLDC_controller.c ****    */
2490:Src/BLDC_controller.c ****   rtY->DC_phaC = (int16_T)(rtb_Saturation1 >> 4);
 3372              		.loc 1 2490 0
 3373 0e68 1B11     		asrs	r3, r3, #4
 3374              	.LVL469:
 3375 0e6a A8F80430 		strh	r3, [r8, #4]	@ movhi
2491:Src/BLDC_controller.c **** 
2492:Src/BLDC_controller.c ****   /* Outport: '<Root>/n_mot' incorporates:
2493:Src/BLDC_controller.c ****    *  DataTypeConversion: '<S1>/Data Type Conversion1'
2494:Src/BLDC_controller.c ****    */
2495:Src/BLDC_controller.c ****   rtY->n_mot = (int16_T)(rtb_Switch2_k >> 4);
 3376              		.loc 1 2495 0
 3377 0e6e 059B     		ldr	r3, [sp, #20]
 3378 0e70 1B11     		asrs	r3, r3, #4
 3379 0e72 A8F80830 		strh	r3, [r8, #8]	@ movhi
2496:Src/BLDC_controller.c **** 
2497:Src/BLDC_controller.c ****   /* Outport: '<Root>/a_elecAngle' incorporates:
2498:Src/BLDC_controller.c ****    *  DataTypeConversion: '<S1>/Data Type Conversion7'
2499:Src/BLDC_controller.c ****    */
2500:Src/BLDC_controller.c ****   rtY->a_elecAngle = (int16_T)(rtb_Switch2_fl >> 6);
 3380              		.loc 1 2500 0
 3381 0e76 089B     		ldr	r3, [sp, #32]
 3382 0e78 9B11     		asrs	r3, r3, #6
 3383 0e7a A8F80A30 		strh	r3, [r8, #10]	@ movhi
2501:Src/BLDC_controller.c **** 
ARM GAS  /tmp/ccoxnsnM.s 			page 109


2502:Src/BLDC_controller.c ****   /* Outport: '<Root>/r_devSignal1' incorporates:
2503:Src/BLDC_controller.c ****    *  DataTypeConversion: '<S1>/Data Type Conversion4'
2504:Src/BLDC_controller.c ****    */
2505:Src/BLDC_controller.c ****   rtY->r_devSignal1 = (int16_T)(rtDW->DataTypeConversion[0] >> 4);
 3384              		.loc 1 2505 0
 3385 0e7e B4F95630 		ldrsh	r3, [r4, #86]
 3386 0e82 1B11     		asrs	r3, r3, #4
 3387 0e84 A8F80C30 		strh	r3, [r8, #12]	@ movhi
2506:Src/BLDC_controller.c **** 
2507:Src/BLDC_controller.c ****   /* Outport: '<Root>/r_devSignal2' incorporates:
2508:Src/BLDC_controller.c ****    *  DataTypeConversion: '<S1>/Data Type Conversion5'
2509:Src/BLDC_controller.c ****    */
2510:Src/BLDC_controller.c ****   rtY->r_devSignal2 = (int16_T)(rtDW->DataTypeConversion[1] >> 4);
 3388              		.loc 1 2510 0
 3389 0e88 B4F95830 		ldrsh	r3, [r4, #88]
 3390 0e8c 1B11     		asrs	r3, r3, #4
 3391 0e8e A8F80E30 		strh	r3, [r8, #14]	@ movhi
2511:Src/BLDC_controller.c **** 
2512:Src/BLDC_controller.c ****   /* End of Outputs for SubSystem: '<Root>/BLDC_controller' */
2513:Src/BLDC_controller.c **** }
 3392              		.loc 1 2513 0
 3393 0e92 15B0     		add	sp, sp, #84
 3394              	.LCFI10:
 3395              		.cfi_def_cfa_offset 36
 3396              		@ sp needed
 3397 0e94 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3398              	.LVL470:
 3399              	.L350:
 3400              		.align	2
 3401              	.L349:
 3402 0e98 00000000 		.word	rtConstP
 3403              		.cfi_endproc
 3404              	.LFE15:
 3406              		.section	.text.BLDC_controller_initialize,"ax",%progbits
 3407              		.align	1
 3408              		.global	BLDC_controller_initialize
 3409              		.syntax unified
 3410              		.thumb
 3411              		.thumb_func
 3412              		.fpu softvfp
 3414              	BLDC_controller_initialize:
 3415              	.LFB16:
2514:Src/BLDC_controller.c **** 
2515:Src/BLDC_controller.c **** /* Model initialize function */
2516:Src/BLDC_controller.c **** void BLDC_controller_initialize(RT_MODEL *const rtM)
2517:Src/BLDC_controller.c **** {
 3416              		.loc 1 2517 0
 3417              		.cfi_startproc
 3418              		@ args = 0, pretend = 0, frame = 0
 3419              		@ frame_needed = 0, uses_anonymous_args = 0
 3420              	.LVL471:
 3421 0000 38B5     		push	{r3, r4, r5, lr}
 3422              	.LCFI11:
 3423              		.cfi_def_cfa_offset 16
 3424              		.cfi_offset 3, -16
 3425              		.cfi_offset 4, -12
 3426              		.cfi_offset 5, -8
ARM GAS  /tmp/ccoxnsnM.s 			page 110


 3427              		.cfi_offset 14, -4
2518:Src/BLDC_controller.c ****   P *rtP = ((P *) rtM->defaultParam);
 3428              		.loc 1 2518 0
 3429 0002 0268     		ldr	r2, [r0]
 3430              	.LVL472:
2519:Src/BLDC_controller.c ****   DW *rtDW = ((DW *) rtM->dwork);
 3431              		.loc 1 2519 0
 3432 0004 C468     		ldr	r4, [r0, #12]
 3433              	.LVL473:
2520:Src/BLDC_controller.c **** 
2521:Src/BLDC_controller.c ****   /* Start for Atomic SubSystem: '<Root>/BLDC_controller' */
2522:Src/BLDC_controller.c ****   /* Start for If: '<S1>/If4' */
2523:Src/BLDC_controller.c ****   rtDW->If4_ActiveSubsystem = -1;
 3434              		.loc 1 2523 0
 3435 0006 FF23     		movs	r3, #255
 3436 0008 84F88E30 		strb	r3, [r4, #142]
2524:Src/BLDC_controller.c **** 
2525:Src/BLDC_controller.c ****   /* Start for IfAction SubSystem: '<S1>/F03_Control_Mode_Manager' */
2526:Src/BLDC_controller.c ****   /* Start for If: '<S29>/If2' */
2527:Src/BLDC_controller.c ****   rtDW->If2_ActiveSubsystem = -1;
 3437              		.loc 1 2527 0
 3438 000c 84F89030 		strb	r3, [r4, #144]
2528:Src/BLDC_controller.c **** 
2529:Src/BLDC_controller.c ****   /* End of Start for SubSystem: '<S1>/F03_Control_Mode_Manager' */
2530:Src/BLDC_controller.c **** 
2531:Src/BLDC_controller.c ****   /* Start for If: '<S1>/If1' */
2532:Src/BLDC_controller.c ****   rtDW->If1_ActiveSubsystem = -1;
 3439              		.loc 1 2532 0
 3440 0010 84F88F30 		strb	r3, [r4, #143]
2533:Src/BLDC_controller.c **** 
2534:Src/BLDC_controller.c ****   /* Start for IfAction SubSystem: '<S1>/F05_Field_Oriented_Control' */
2535:Src/BLDC_controller.c ****   /* Start for If: '<S6>/If2' */
2536:Src/BLDC_controller.c ****   rtDW->If2_ActiveSubsystem_a = -1;
 3441              		.loc 1 2536 0
 3442 0014 84F89130 		strb	r3, [r4, #145]
2537:Src/BLDC_controller.c **** 
2538:Src/BLDC_controller.c ****   /* End of Start for SubSystem: '<S1>/F05_Field_Oriented_Control' */
2539:Src/BLDC_controller.c ****   /* End of Start for SubSystem: '<Root>/BLDC_controller' */
2540:Src/BLDC_controller.c **** 
2541:Src/BLDC_controller.c ****   /* SystemInitialize for Atomic SubSystem: '<Root>/BLDC_controller' */
2542:Src/BLDC_controller.c ****   /* InitializeConditions for UnitDelay: '<S12>/UnitDelay3' */
2543:Src/BLDC_controller.c ****   rtDW->UnitDelay3_DSTATE = rtP->z_maxCntRst;
 3443              		.loc 1 2543 0
 3444 0018 B2F90830 		ldrsh	r3, [r2, #8]
 3445 001c A4F87C30 		strh	r3, [r4, #124]	@ movhi
2544:Src/BLDC_controller.c **** 
2545:Src/BLDC_controller.c ****   /* InitializeConditions for UnitDelay: '<S8>/UnitDelay2' */
2546:Src/BLDC_controller.c ****   rtDW->UnitDelay2_DSTATE_g = true;
 3446              		.loc 1 2546 0
 3447 0020 0125     		movs	r5, #1
 3448 0022 84F89B50 		strb	r5, [r4, #155]
2547:Src/BLDC_controller.c **** 
2548:Src/BLDC_controller.c ****   /* SystemInitialize for IfAction SubSystem: '<S12>/Raw_Motor_Speed_Estimation' */
2549:Src/BLDC_controller.c ****   /* SystemInitialize for Outport: '<S15>/z_counter' */
2550:Src/BLDC_controller.c ****   rtDW->z_counterRawPrev = rtP->z_maxCntRst;
 3449              		.loc 1 2550 0
 3450 0026 B2F90830 		ldrsh	r3, [r2, #8]
ARM GAS  /tmp/ccoxnsnM.s 			page 111


 3451 002a A4F85A30 		strh	r3, [r4, #90]	@ movhi
2551:Src/BLDC_controller.c **** 
2552:Src/BLDC_controller.c ****   /* End of SystemInitialize for SubSystem: '<S12>/Raw_Motor_Speed_Estimation' */
2553:Src/BLDC_controller.c **** 
2554:Src/BLDC_controller.c ****   /* SystemInitialize for Atomic SubSystem: '<S12>/Counter' */
2555:Src/BLDC_controller.c ****   Counter_Init(&rtDW->Counter_e, rtP->z_maxCntRst);
 3452              		.loc 1 2555 0
 3453 002e B2F90810 		ldrsh	r1, [r2, #8]
 3454 0032 04F14400 		add	r0, r4, #68
 3455              	.LVL474:
 3456 0036 FFF7FEFF 		bl	Counter_Init
 3457              	.LVL475:
2556:Src/BLDC_controller.c **** 
2557:Src/BLDC_controller.c ****   /* End of SystemInitialize for SubSystem: '<S12>/Counter' */
2558:Src/BLDC_controller.c **** 
2559:Src/BLDC_controller.c ****   /* SystemInitialize for IfAction SubSystem: '<S1>/F02_Diagnostics' */
2560:Src/BLDC_controller.c **** 
2561:Src/BLDC_controller.c ****   /* SystemInitialize for Atomic SubSystem: '<S3>/Debounce_Filter' */
2562:Src/BLDC_controller.c ****   Debounce_Filter_Init(&rtDW->Debounce_Filter_f);
 3458              		.loc 1 2562 0
 3459 003a A01C     		adds	r0, r4, #2
 3460 003c FFF7FEFF 		bl	Debounce_Filter_Init
 3461              	.LVL476:
2563:Src/BLDC_controller.c **** 
2564:Src/BLDC_controller.c ****   /* End of SystemInitialize for SubSystem: '<S3>/Debounce_Filter' */
2565:Src/BLDC_controller.c **** 
2566:Src/BLDC_controller.c ****   /* End of SystemInitialize for SubSystem: '<S1>/F02_Diagnostics' */
2567:Src/BLDC_controller.c **** 
2568:Src/BLDC_controller.c ****   /* SystemInitialize for IfAction SubSystem: '<S1>/F03_Control_Mode_Manager' */
2569:Src/BLDC_controller.c ****   /* SystemInitialize for IfAction SubSystem: '<S29>/Open_Mode' */
2570:Src/BLDC_controller.c ****   /* SystemInitialize for Atomic SubSystem: '<S33>/rising_edge_init' */
2571:Src/BLDC_controller.c ****   /* InitializeConditions for UnitDelay: '<S35>/UnitDelay' */
2572:Src/BLDC_controller.c ****   rtDW->UnitDelay_DSTATE_e = true;
 3462              		.loc 1 2572 0
 3463 0040 84F89E50 		strb	r5, [r4, #158]
2573:Src/BLDC_controller.c **** 
2574:Src/BLDC_controller.c ****   /* End of SystemInitialize for SubSystem: '<S33>/rising_edge_init' */
2575:Src/BLDC_controller.c ****   /* End of SystemInitialize for SubSystem: '<S29>/Open_Mode' */
2576:Src/BLDC_controller.c ****   /* End of SystemInitialize for SubSystem: '<S1>/F03_Control_Mode_Manager' */
2577:Src/BLDC_controller.c **** 
2578:Src/BLDC_controller.c ****   /* SystemInitialize for IfAction SubSystem: '<S1>/F05_Field_Oriented_Control' */
2579:Src/BLDC_controller.c ****   /* SystemInitialize for IfAction SubSystem: '<S6>/Motor_Limitations' */
2580:Src/BLDC_controller.c **** 
2581:Src/BLDC_controller.c ****   /* SystemInitialize for IfAction SubSystem: '<S45>/Voltage_Mode_Protection' */
2582:Src/BLDC_controller.c **** 
2583:Src/BLDC_controller.c ****   /* SystemInitialize for Atomic SubSystem: '<S73>/I_backCalc_fixdt' */
2584:Src/BLDC_controller.c ****   I_backCalc_fixdt_Init(&rtDW->I_backCalc_fixdt_i, 0);
 3464              		.loc 1 2584 0
 3465 0044 0021     		movs	r1, #0
 3466 0046 04F11C00 		add	r0, r4, #28
 3467 004a FFF7FEFF 		bl	I_backCalc_fixdt_Init
 3468              	.LVL477:
2585:Src/BLDC_controller.c **** 
2586:Src/BLDC_controller.c ****   /* End of SystemInitialize for SubSystem: '<S73>/I_backCalc_fixdt' */
2587:Src/BLDC_controller.c **** 
2588:Src/BLDC_controller.c ****   /* SystemInitialize for Atomic SubSystem: '<S73>/I_backCalc_fixdt1' */
2589:Src/BLDC_controller.c ****   I_backCalc_fixdt_Init(&rtDW->I_backCalc_fixdt1, 0);
ARM GAS  /tmp/ccoxnsnM.s 			page 112


 3469              		.loc 1 2589 0
 3470 004e 0021     		movs	r1, #0
 3471 0050 04F11400 		add	r0, r4, #20
 3472 0054 FFF7FEFF 		bl	I_backCalc_fixdt_Init
 3473              	.LVL478:
2590:Src/BLDC_controller.c **** 
2591:Src/BLDC_controller.c ****   /* End of SystemInitialize for SubSystem: '<S73>/I_backCalc_fixdt1' */
2592:Src/BLDC_controller.c **** 
2593:Src/BLDC_controller.c ****   /* End of SystemInitialize for SubSystem: '<S45>/Voltage_Mode_Protection' */
2594:Src/BLDC_controller.c **** 
2595:Src/BLDC_controller.c ****   /* SystemInitialize for IfAction SubSystem: '<S45>/Torque_Mode_Protection' */
2596:Src/BLDC_controller.c **** 
2597:Src/BLDC_controller.c ****   /* SystemInitialize for Atomic SubSystem: '<S72>/I_backCalc_fixdt' */
2598:Src/BLDC_controller.c ****   I_backCalc_fixdt_Init(&rtDW->I_backCalc_fixdt_g, 0);
 3474              		.loc 1 2598 0
 3475 0058 0021     		movs	r1, #0
 3476 005a 04F10C00 		add	r0, r4, #12
 3477 005e FFF7FEFF 		bl	I_backCalc_fixdt_Init
 3478              	.LVL479:
2599:Src/BLDC_controller.c **** 
2600:Src/BLDC_controller.c ****   /* End of SystemInitialize for SubSystem: '<S72>/I_backCalc_fixdt' */
2601:Src/BLDC_controller.c **** 
2602:Src/BLDC_controller.c ****   /* End of SystemInitialize for SubSystem: '<S45>/Torque_Mode_Protection' */
2603:Src/BLDC_controller.c **** 
2604:Src/BLDC_controller.c ****   /* SystemInitialize for Outport: '<S45>/Vd_max' */
2605:Src/BLDC_controller.c ****   rtDW->Vd_max1 = 14400;
 3479              		.loc 1 2605 0
 3480 0062 4FF46152 		mov	r2, #14400
 3481 0066 A4F86020 		strh	r2, [r4, #96]	@ movhi
2606:Src/BLDC_controller.c **** 
2607:Src/BLDC_controller.c ****   /* SystemInitialize for Outport: '<S45>/Vd_min' */
2608:Src/BLDC_controller.c ****   rtDW->Gain3 = -14400;
 3482              		.loc 1 2608 0
 3483 006a 4CF2C073 		movw	r3, #51136
 3484 006e A4F86230 		strh	r3, [r4, #98]	@ movhi
2609:Src/BLDC_controller.c **** 
2610:Src/BLDC_controller.c ****   /* SystemInitialize for Outport: '<S45>/Vq_max' */
2611:Src/BLDC_controller.c ****   rtDW->Vq_max_M1 = 14400;
 3485              		.loc 1 2611 0
 3486 0072 A4F86420 		strh	r2, [r4, #100]	@ movhi
2612:Src/BLDC_controller.c **** 
2613:Src/BLDC_controller.c ****   /* SystemInitialize for Outport: '<S45>/Vq_min' */
2614:Src/BLDC_controller.c ****   rtDW->Gain5 = -14400;
 3487              		.loc 1 2614 0
 3488 0076 A4F86630 		strh	r3, [r4, #102]	@ movhi
2615:Src/BLDC_controller.c **** 
2616:Src/BLDC_controller.c ****   /* SystemInitialize for Outport: '<S45>/id_max' */
2617:Src/BLDC_controller.c ****   rtDW->i_max = 12000;
 3489              		.loc 1 2617 0
 3490 007a 42F6E062 		movw	r2, #12000
 3491 007e A4F86820 		strh	r2, [r4, #104]	@ movhi
2618:Src/BLDC_controller.c **** 
2619:Src/BLDC_controller.c ****   /* SystemInitialize for Outport: '<S45>/id_min' */
2620:Src/BLDC_controller.c ****   rtDW->Gain4_c = -12000;
 3492              		.loc 1 2620 0
 3493 0082 4DF22013 		movw	r3, #53536
 3494 0086 A4F86E30 		strh	r3, [r4, #110]	@ movhi
ARM GAS  /tmp/ccoxnsnM.s 			page 113


2621:Src/BLDC_controller.c **** 
2622:Src/BLDC_controller.c ****   /* SystemInitialize for Outport: '<S45>/iq_max' */
2623:Src/BLDC_controller.c ****   rtDW->Divide1_a = 12000;
 3495              		.loc 1 2623 0
 3496 008a A4F86A20 		strh	r2, [r4, #106]	@ movhi
2624:Src/BLDC_controller.c **** 
2625:Src/BLDC_controller.c ****   /* SystemInitialize for Outport: '<S45>/iq_min' */
2626:Src/BLDC_controller.c ****   rtDW->Gain1 = -12000;
 3497              		.loc 1 2626 0
 3498 008e A4F86C30 		strh	r3, [r4, #108]	@ movhi
 3499 0092 38BD     		pop	{r3, r4, r5, pc}
 3500              		.cfi_endproc
 3501              	.LFE16:
 3503              		.text
 3504              	.Letext0:
 3505              		.file 2 "Inc/rtwtypes.h"
 3506              		.file 3 "Inc/BLDC_controller.h"
ARM GAS  /tmp/ccoxnsnM.s 			page 114


DEFINED SYMBOLS
                            *ABS*:0000000000000000 BLDC_controller.c
     /tmp/ccoxnsnM.s:16     .text.plook_u8s16_evencka:0000000000000000 $t
     /tmp/ccoxnsnM.s:23     .text.plook_u8s16_evencka:0000000000000000 plook_u8s16_evencka
     /tmp/ccoxnsnM.s:65     .text.plook_u8u16_evencka:0000000000000000 $t
     /tmp/ccoxnsnM.s:72     .text.plook_u8u16_evencka:0000000000000000 plook_u8u16_evencka
     /tmp/ccoxnsnM.s:113    .text.div_nde_s32_floor:0000000000000000 $t
     /tmp/ccoxnsnM.s:120    .text.div_nde_s32_floor:0000000000000000 div_nde_s32_floor
     /tmp/ccoxnsnM.s:156    .text.Counter_Init:0000000000000000 $t
     /tmp/ccoxnsnM.s:163    .text.Counter_Init:0000000000000000 Counter_Init
     /tmp/ccoxnsnM.s:178    .text.Counter:0000000000000000 $t
     /tmp/ccoxnsnM.s:185    .text.Counter:0000000000000000 Counter
     /tmp/ccoxnsnM.s:226    .text.PI_clamp_fixdt:0000000000000000 $t
     /tmp/ccoxnsnM.s:233    .text.PI_clamp_fixdt:0000000000000000 PI_clamp_fixdt
     /tmp/ccoxnsnM.s:436    .text.PI_clamp_fixdt:00000000000000d8 $d
     /tmp/ccoxnsnM.s:441    .text.Low_Pass_Filter_Reset:0000000000000000 $t
     /tmp/ccoxnsnM.s:448    .text.Low_Pass_Filter_Reset:0000000000000000 Low_Pass_Filter_Reset
     /tmp/ccoxnsnM.s:466    .text.Low_Pass_Filter:0000000000000000 $t
     /tmp/ccoxnsnM.s:473    .text.Low_Pass_Filter:0000000000000000 Low_Pass_Filter
     /tmp/ccoxnsnM.s:556    .text.Low_Pass_Filter:0000000000000058 $d
     /tmp/ccoxnsnM.s:561    .text.I_backCalc_fixdt_Init:0000000000000000 $t
     /tmp/ccoxnsnM.s:568    .text.I_backCalc_fixdt_Init:0000000000000000 I_backCalc_fixdt_Init
     /tmp/ccoxnsnM.s:583    .text.I_backCalc_fixdt:0000000000000000 $t
     /tmp/ccoxnsnM.s:590    .text.I_backCalc_fixdt:0000000000000000 I_backCalc_fixdt
     /tmp/ccoxnsnM.s:708    .text.Counter_b_Init:0000000000000000 $t
     /tmp/ccoxnsnM.s:715    .text.Counter_b_Init:0000000000000000 Counter_b_Init
     /tmp/ccoxnsnM.s:730    .text.Counter_i:0000000000000000 $t
     /tmp/ccoxnsnM.s:737    .text.Counter_i:0000000000000000 Counter_i
     /tmp/ccoxnsnM.s:778    .text.either_edge:0000000000000000 $t
     /tmp/ccoxnsnM.s:785    .text.either_edge:0000000000000000 either_edge
     /tmp/ccoxnsnM.s:808    .text.Debounce_Filter_Init:0000000000000000 $t
     /tmp/ccoxnsnM.s:815    .text.Debounce_Filter_Init:0000000000000000 Debounce_Filter_Init
     /tmp/ccoxnsnM.s:844    .text.Debounce_Filter:0000000000000000 $t
     /tmp/ccoxnsnM.s:851    .text.Debounce_Filter:0000000000000000 Debounce_Filter
     /tmp/ccoxnsnM.s:940    .text.BLDC_controller_step:0000000000000000 $t
     /tmp/ccoxnsnM.s:947    .text.BLDC_controller_step:0000000000000000 BLDC_controller_step
     /tmp/ccoxnsnM.s:1455   .text.BLDC_controller_step:00000000000002dc $d
     /tmp/ccoxnsnM.s:1460   .text.BLDC_controller_step:00000000000002e4 $t
     /tmp/ccoxnsnM.s:2055   .text.BLDC_controller_step:0000000000000614 $d
     /tmp/ccoxnsnM.s:2061   .text.BLDC_controller_step:0000000000000624 $t
     /tmp/ccoxnsnM.s:2686   .text.BLDC_controller_step:0000000000000a24 $d
     /tmp/ccoxnsnM.s:2691   .text.BLDC_controller_step:0000000000000a2c $t
     /tmp/ccoxnsnM.s:3293   .text.BLDC_controller_step:0000000000000ddc $d
     /tmp/ccoxnsnM.s:3298   .text.BLDC_controller_step:0000000000000de4 $t
     /tmp/ccoxnsnM.s:3402   .text.BLDC_controller_step:0000000000000e98 $d
     /tmp/ccoxnsnM.s:3407   .text.BLDC_controller_initialize:0000000000000000 $t
     /tmp/ccoxnsnM.s:3414   .text.BLDC_controller_initialize:0000000000000000 BLDC_controller_initialize
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
rtConstP
